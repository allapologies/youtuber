!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="/",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n(2),a=r(o),i=n(7),u=r(i),l=n(17),c=r(l);u.default.render(a.default.createElement(c.default,null),document.querySelector(".container"))},function(e,t,n){"use strict";e.exports=n(3)},function(e,t,n){/** @license React v16.2.0
	 * react.production.min.js
	 *
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
"use strict";function r(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||O}function a(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||O}function i(){}function u(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||O}function l(e,t,n){var r,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)R.call(t,r)&&!A.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:x,type:e,key:a,ref:i,props:o,_owner:I.current}}function c(e){return"object"==typeof e&&null!==e&&e.$$typeof===x}function s(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}function f(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function p(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function d(e,t,n,o){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var i=!1;if(null===e)i=!0;else switch(a){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case x:case k:case E:case T:i=!0}}if(i)return n(o,e,""===t?"."+h(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var u=0;u<e.length;u++){a=e[u];var l=t+h(a,u);i+=d(a,l,n,o)}else if(null===e||"undefined"==typeof e?l=null:(l=_&&e[_]||e["@@iterator"],l="function"==typeof l?l:null),"function"==typeof l)for(e=l.call(e),u=0;!(a=e.next()).done;)a=a.value,l=t+h(a,u++),i+=d(a,l,n,o);else"object"===a&&(n=""+e,r("31","[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return i}function h(e,t){return"object"==typeof e&&null!==e&&null!=e.key?s(e.key):t.toString(36)}function m(e,t){e.func.call(e.context,t,e.count++)}function v(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?y(e,r,n,w.thatReturnsArgument):null!=e&&(c(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n,e={$$typeof:x,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function y(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(j,"$&/")+"/"),t=f(t,a,r,o),null==e||d(e,"",v,t),p(t)}var g=n(4),b=n(5),w=n(6),C="function"==typeof Symbol&&Symbol.for,x=C?Symbol.for("react.element"):60103,k=C?Symbol.for("react.call"):60104,E=C?Symbol.for("react.return"):60105,T=C?Symbol.for("react.portal"):60106,S=C?Symbol.for("react.fragment"):60107,_="function"==typeof Symbol&&Symbol.iterator,O={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};o.prototype.isReactComponent={},o.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?r("85"):void 0,this.updater.enqueueSetState(this,e,t,"setState")},o.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},i.prototype=o.prototype;var P=a.prototype=new i;P.constructor=a,g(P,o.prototype),P.isPureReactComponent=!0;var N=u.prototype=new i;N.constructor=u,g(N,o.prototype),N.unstable_isAsyncReactComponent=!0,N.render=function(){return this.props.children};var I={current:null},R=Object.prototype.hasOwnProperty,A={key:!0,ref:!0,__self:!0,__source:!0},j=/\/+/g,M=[],D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return y(e,r,null,t,n),r},forEach:function(e,t,n){return null==e?e:(t=f(null,null,t,n),null==e||d(e,"",m,t),void p(t))},count:function(e){return null==e?0:d(e,"",w.thatReturnsNull,null)},toArray:function(e){var t=[];return y(e,t,null,w.thatReturnsArgument),t},only:function(e){return c(e)?void 0:r("143"),e}},Component:o,PureComponent:a,unstable_AsyncComponent:u,Fragment:S,createElement:l,cloneElement:function(e,t,n){var r=g({},e.props),o=e.key,a=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,i=I.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in t)R.call(t,l)&&!A.hasOwnProperty(l)&&(r[l]=void 0===t[l]&&void 0!==u?u[l]:t[l])}var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){u=Array(l);for(var c=0;c<l;c++)u[c]=arguments[c+2];r.children=u}return{$$typeof:x,type:e.type,key:o,ref:a,props:r,_owner:i}},createFactory:function(e){var t=l.bind(null,e);return t.type=e,t},isValidElement:c,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:I,assign:g}},F=Object.freeze({default:D}),L=F&&D||F;e.exports=L.default?L.default:L},function(e,t){/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
"use strict";function n(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function r(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}var o=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=r()?Object.assign:function(e,t){for(var r,u,l=n(e),c=1;c<arguments.length;c++){r=Object(arguments[c]);for(var s in r)a.call(r,s)&&(l[s]=r[s]);if(o){u=o(r);for(var f=0;f<u.length;f++)i.call(r,u[f])&&(l[u[f]]=r[u[f]])}}return l}},function(e,t,n){"use strict";var r={};e.exports=r},function(e,t){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){"use strict";function r(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(r)}catch(e){console.error(e)}}r(),e.exports=n(8)},function(e,t,n){/** @license React v16.2.0
	 * react-dom.production.min.js
	 *
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
"use strict";function r(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."),t.name="Invariant Violation",t.framesToPop=1,t}function o(e,t){return(e&t)===t}function a(e,t){if(Pn.hasOwnProperty(e)||2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return Pn.hasOwnProperty(e)?e=!0:(t=i(e))?e=t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:(e=e.toLowerCase().slice(0,5),e="data-"===e||"aria-"===e),e;case"undefined":case"number":case"string":case"object":return!0;default:return!1}}function i(e){return In.hasOwnProperty(e)?In[e]:null}function u(e){return e[1].toUpperCase()}function l(e,t,n,r,o,a,i,u,l){Kn._hasCaughtError=!1,Kn._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){Kn._caughtError=e,Kn._hasCaughtError=!0}}function c(){if(Kn._hasRethrowError){var e=Kn._rethrowError;throw Kn._rethrowError=null,Kn._hasRethrowError=!1,e}}function s(){if(Wn)for(var e in qn){var t=qn[e],n=Wn.indexOf(e);if(-1<n?void 0:r("96",e),!$n[n]){t.extractEvents?void 0:r("97",e),$n[n]=t,n=t.eventTypes;for(var o in n){var a=void 0,i=n[o],u=t,l=o;Qn.hasOwnProperty(l)?r("99",l):void 0,Qn[l]=i;var c=i.phasedRegistrationNames;if(c){for(a in c)c.hasOwnProperty(a)&&f(c[a],u,l);a=!0}else i.registrationName?(f(i.registrationName,u,l),a=!0):a=!1;a?void 0:r("98",o,e)}}}}function f(e,t,n){Gn[e]?r("100",e):void 0,Gn[e]=t,Yn[e]=t.eventTypes[n].dependencies}function p(e){Wn?r("101"):void 0,Wn=Array.prototype.slice.call(e),s()}function d(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];qn.hasOwnProperty(t)&&qn[t]===o||(qn[t]?r("102",t):void 0,qn[t]=o,n=!0)}n&&s()}function h(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=er(r),Kn.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function m(e,t){return null==t?r("30"):void 0,null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function v(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}function y(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)h(e,t,n[o],r[o]);else n&&h(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function g(e){return y(e,!0)}function b(e){return y(e,!1)}function w(e,t){var n=e.stateNode;if(!n)return null;var o=Jn(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(e=e.type,o=!("button"===e||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(n&&"function"!=typeof n?r("231",t,typeof n):void 0,n)}function C(e,t,n,r){for(var o,a=0;a<$n.length;a++){var i=$n[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=m(o,i))}return o}function x(e){e&&(tr=m(tr,e))}function k(e){var t=tr;tr=null,t&&(e?v(t,g):v(t,b),tr?r("95"):void 0,Kn.rethrowCaughtError())}function E(e){if(e[ar])return e[ar];for(var t=[];!e[ar];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}var n=void 0,r=e[ar];if(5===r.tag||6===r.tag)return r;for(;e&&(r=e[ar]);e=t.pop())n=r;return n}function T(e){return 5===e.tag||6===e.tag?e.stateNode:void r("33")}function S(e){return e[ir]||null}function _(e){do e=e.return;while(e&&5!==e.tag);return e?e:null}function O(e,t,n){for(var r=[];e;)r.push(e),e=_(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function P(e,t,n){(t=w(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=m(n._dispatchListeners,t),n._dispatchInstances=m(n._dispatchInstances,e))}function N(e){e&&e.dispatchConfig.phasedRegistrationNames&&O(e._targetInst,P,e)}function I(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;t=t?_(t):null,O(t,P,e)}}function R(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=w(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=m(n._dispatchListeners,t),n._dispatchInstances=m(n._dispatchInstances,e))}function A(e){e&&e.dispatchConfig.registrationName&&R(e._targetInst,null,e)}function j(e){v(e,N)}function M(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,u=o;u;u=_(u))i++;u=0;for(var l=a;l;l=_(l))u++;for(;0<i-u;)o=_(o),i--;for(;0<u-i;)a=_(a),u--;for(;i--;){if(o===a||o===a.alternate)break e;o=_(o),a=_(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(i=n.alternate,null===i||i!==a);)o.push(n),n=_(n);for(n=[];r&&r!==a&&(i=r.alternate,null===i||i!==a);)n.push(r),r=_(r);for(r=0;r<o.length;r++)R(o[r],"bubbled",e);for(e=n.length;0<e--;)R(n[e],"captured",t)}function D(){return!cr&&wn.canUseDOM&&(cr="textContent"in document.documentElement?"textContent":"innerText"),cr}function F(){if(sr._fallbackText)return sr._fallbackText;var e,t,n=sr._startText,r=n.length,o=L(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return sr._fallbackText=o.slice(e,1<t?1-t:void 0),sr._fallbackText}function L(){return"value"in sr._root?sr._root.value:sr._root[D()]}function U(e,t,n,r){this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface;for(var o in e)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?xn.thatReturnsTrue:xn.thatReturnsFalse,this.isPropagationStopped=xn.thatReturnsFalse,this}function H(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function V(e){e instanceof this?void 0:r("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function z(e){e.eventPool=[],e.getPooled=H,e.release=V}function B(e,t,n,r){return U.call(this,e,t,n,r)}function K(e,t,n,r){return U.call(this,e,t,n,r)}function W(e,t){switch(e){case"topKeyUp":return-1!==dr.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function q(e){return e=e.detail,"object"==typeof e&&"data"in e?e.data:null}function $(e,t){switch(e){case"topCompositionEnd":return q(t);case"topKeyPress":return 32!==t.which?null:(kr=!0,Cr);case"topTextInput":return e=t.data,e===Cr&&kr?null:e;default:return null}}function Q(e,t){if(Er)return"topCompositionEnd"===e||!hr&&W(e,t)?(e=F(),sr._root=null,sr._startText=null,sr._fallbackText=null,Er=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return wr?null:t.data;default:return null}}function G(e){if(e=Zn(e)){Sr&&"function"==typeof Sr.restoreControlledState?void 0:r("194");var t=Jn(e.stateNode);Sr.restoreControlledState(e.stateNode,e.type,t)}}function Y(e){_r?Or?Or.push(e):Or=[e]:_r=e}function X(){if(_r){var e=_r,t=Or;if(Or=_r=null,G(e),t)for(e=0;e<t.length;e++)G(t[e])}}function J(e,t){return e(t)}function Z(e,t){if(Ir)return J(e,t);Ir=!0;try{return J(e,t)}finally{Ir=!1,X()}}function ee(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Rr[e.type]:"textarea"===t}function te(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ne(e,t){if(!wn.canUseDOM||t&&!("addEventListener"in document))return!1;t="on"+e;var n=t in document;return n||(n=document.createElement("div"),n.setAttribute(t,"return;"),n="function"==typeof n[t]),!n&&gr&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}function re(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function oe(e){var t=re(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}function ae(e){e._valueTracker||(e._valueTracker=oe(e))}function ie(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=re(e)?e.checked?"true":"false":e.value),e=r,e!==n&&(t.setValue(e),!0)}function ue(e,t,n){return e=U.getPooled(Ar.change,e,t,n),e.type="change",Y(n),j(e),e}function le(e){x(e),k(!1)}function ce(e){var t=T(e);if(ie(t))return e}function se(e,t){if("topChange"===e)return t}function fe(){jr&&(jr.detachEvent("onpropertychange",pe),Mr=jr=null)}function pe(e){"value"===e.propertyName&&ce(Mr)&&(e=ue(Mr,e,te(e)),Z(le,e))}function de(e,t,n){"topFocus"===e?(fe(),jr=t,Mr=n,jr.attachEvent("onpropertychange",pe)):"topBlur"===e&&fe()}function he(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return ce(Mr)}function me(e,t){if("topClick"===e)return ce(t)}function ve(e,t){if("topInput"===e||"topChange"===e)return ce(t)}function ye(e,t,n,r){return U.call(this,e,t,n,r)}function ge(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Lr[e])&&!!t[e]}function be(){return ge}function we(e,t,n,r){return U.call(this,e,t,n,r)}function Ce(e){return e=e.type,"string"==typeof e?e:"function"==typeof e?e.displayName||e.name:null}function xe(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!==(2&t.effectTag))return 1;for(;t.return;)if(t=t.return,0!==(2&t.effectTag))return 1}return 3===t.tag?2:3}function ke(e){return!!(e=e._reactInternalFiber)&&2===xe(e)}function Ee(e){2!==xe(e)?r("188"):void 0}function Te(e){var t=e.alternate;if(!t)return t=xe(e),3===t?r("188"):void 0,1===t?null:e;for(var n=e,o=t;;){var a=n.return,i=a?a.alternate:null;if(!a||!i)break;if(a.child===i.child){for(var u=a.child;u;){if(u===n)return Ee(a),e;if(u===o)return Ee(a),t;u=u.sibling}r("188")}if(n.return!==o.return)n=a,o=i;else{u=!1;for(var l=a.child;l;){if(l===n){u=!0,n=a,o=i;break}if(l===o){u=!0,o=a,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,o=a;break}if(l===o){u=!0,o=i,n=a;break}l=l.sibling}u?void 0:r("189")}}n.alternate!==o?r("190"):void 0}return 3!==n.tag?r("188"):void 0,n.stateNode.current===n?e:t}function Se(e){if(e=Te(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function _e(e){if(e=Te(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Oe(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(n=3!==n.tag?null:n.stateNode.containerInfo,!n)break;e.ancestors.push(t),t=E(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],Kr(e.topLevelType,t,e.nativeEvent,te(e.nativeEvent))}function Pe(e){Br=!!e}function Ne(e,t,n){return n?kn.listen(n,t,Re.bind(null,e)):null}function Ie(e,t,n){return n?kn.capture(n,t,Re.bind(null,e)):null}function Re(e,t){if(Br){var n=te(t);if(n=E(n),null===n||"number"!=typeof n.tag||2===xe(n)||(n=null),zr.length){var r=zr.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Z(Oe,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>zr.length&&zr.push(e)}}}function Ae(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}function je(e){if($r[e])return $r[e];if(!qr[e])return e;var t,n=qr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Qr)return $r[e]=n[t];return""}function Me(e){return Object.prototype.hasOwnProperty.call(e,Jr)||(e[Jr]=Xr++,Yr[e[Jr]]={}),Yr[e[Jr]]}function De(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Fe(e,t){var n=De(e);e=0;for(var r;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=De(n)}}function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}function Ue(e,t){if(oo||null==to||to!==En())return null;var n=to;return"selectionStart"in n&&Le(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?(n=window.getSelection(),n={anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}):n=void 0,ro&&Tn(ro,n)?null:(ro=n,e=U.getPooled(eo.select,no,e,t),e.type="select",e.target=to,j(e),e)}function He(e,t,n,r){return U.call(this,e,t,n,r)}function Ve(e,t,n,r){return U.call(this,e,t,n,r)}function ze(e,t,n,r){return U.call(this,e,t,n,r)}function Be(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,0===e&&13===t&&(e=13)):e=t,32<=e||13===e?e:0}function Ke(e,t,n,r){return U.call(this,e,t,n,r)}function We(e,t,n,r){return U.call(this,e,t,n,r)}function qe(e,t,n,r){return U.call(this,e,t,n,r)}function $e(e,t,n,r){return U.call(this,e,t,n,r)}function Qe(e,t,n,r){return U.call(this,e,t,n,r)}function Ge(e){0>po||(e.current=fo[po],fo[po]=null,po--)}function Ye(e,t){po++,fo[po]=e.current,e.current=t}function Xe(e){return Ze(e)?vo:ho.current}function Je(e,t){var n=e.type.contextTypes;if(!n)return On;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ze(e){return 2===e.tag&&null!=e.type.childContextTypes}function et(e){Ze(e)&&(Ge(mo,e),Ge(ho,e))}function tt(e,t,n){null!=ho.cursor?r("168"):void 0,Ye(ho,t,e),Ye(mo,n,e)}function nt(e,t){var n=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;n=n.getChildContext();for(var a in n)a in o?void 0:r("108",Ce(e)||"Unknown",a);return Cn({},t,n)}function rt(e){if(!Ze(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||On,vo=ho.current,Ye(ho,t,e),Ye(mo,mo.current,e),!0}function ot(e,t){var n=e.stateNode;if(n?void 0:r("169"),t){var o=nt(e,vo);n.__reactInternalMemoizedMergedChildContext=o,Ge(mo,e),Ge(ho,e),Ye(ho,o,e)}else Ge(mo,e);Ye(mo,t,e)}function at(e,t,n){this.tag=e,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function it(e,t,n){var r=e.alternate;return null===r?(r=new at(e.tag,e.key,e.internalContextTag),r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.pendingProps=t,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function ut(e,t,n){var o=void 0,a=e.type,i=e.key;return"function"==typeof a?(o=a.prototype&&a.prototype.isReactComponent?new at(2,i,t):new at(0,i,t),o.type=a,o.pendingProps=e.props):"string"==typeof a?(o=new at(5,i,t),o.type=a,o.pendingProps=e.props):"object"==typeof a&&null!==a&&"number"==typeof a.tag?(o=a,o.pendingProps=e.props):r("130",null==a?a:typeof a,""),o.expirationTime=n,o}function lt(e,t,n,r){return t=new at(10,r,t),t.pendingProps=e,t.expirationTime=n,t}function ct(e,t,n){return t=new at(6,null,t),t.pendingProps=e,t.expirationTime=n,t}function st(e,t,n){return t=new at(7,e.key,t),t.type=e.handler,t.pendingProps=e,t.expirationTime=n,t}function ft(e,t,n){return e=new at(9,null,t),e.expirationTime=n,e}function pt(e,t,n){return t=new at(4,e.key,t),t.pendingProps=e.children||[],t.expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function dt(e){return function(t){try{return e(t)}catch(e){}}}function ht(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);yo=dt(function(e){return t.onCommitFiberRoot(n,e)}),go=dt(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}function mt(e){"function"==typeof yo&&yo(e)}function vt(e){"function"==typeof go&&go(e)}function yt(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function gt(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}function bt(e,t){var n=e.alternate,r=e.updateQueue;null===r&&(r=e.updateQueue=yt(null)),null!==n?(e=n.updateQueue,null===e&&(e=n.updateQueue=yt(null))):e=null,e=e!==r?e:null,null===e?gt(r,t):null===r.last||null===e.last?(gt(r,t),gt(e,t)):(gt(r,t),e.last=t)}function wt(e,t,n,r){return e=e.partialState,"function"==typeof e?e.call(t,n,r):e}function Ct(e,t,n,r,o,a){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var i=!0,u=n.first,l=!1;null!==u;){var c=u.expirationTime;if(c>a){var s=n.expirationTime;(0===s||s>c)&&(n.expirationTime=c),l||(l=!0,n.baseState=e)}else l||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=wt(u,r,e,o),i=!0):(c=wt(u,r,e,o))&&(e=i?Cn({},e,c):Cn(e,c),i=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(c=n.callbackList,null===c&&(c=n.callbackList=[]),c.push(u));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||(t.updateQueue=null),l||(n.baseState=e),e}function xt(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var o=n[e],a=o.callback;o.callback=null,"function"!=typeof a?r("191",a):void 0,a.call(t)}}function kt(e,t,n,o){function a(e,t){t.updater=i,e.stateNode=t,t._reactInternalFiber=e}var i={isMounted:ke,enqueueSetState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var a=t(n);bt(n,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,nextCallback:null,next:null}),e(n,a)},enqueueReplaceState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var a=t(n);bt(n,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,nextCallback:null,next:null}),e(n,a)},enqueueForceUpdate:function(n,r){n=n._reactInternalFiber,r=void 0===r?null:r;var o=t(n);bt(n,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,nextCallback:null,next:null}),e(n,o)}};return{adoptClassInstance:a,constructClassInstance:function(e,t){var n=e.type,r=Xe(e),o=2===e.tag&&null!=e.type.contextTypes,i=o?Je(e,r):On;return t=new n(t,i),a(e,t),o&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t},mountClassInstance:function(e,t){var n=e.alternate,o=e.stateNode,a=o.state||null,u=e.pendingProps;u?void 0:r("158");var l=Xe(e);o.props=u,o.state=e.memoizedState=a,o.refs=On,o.context=Je(e,l),null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=1),"function"==typeof o.componentWillMount&&(a=o.state,o.componentWillMount(),a!==o.state&&i.enqueueReplaceState(o,o.state,null),a=e.updateQueue,null!==a&&(o.state=Ct(n,e,a,o,u,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},updateClassInstance:function(e,t,a){var u=t.stateNode;u.props=t.memoizedProps,u.state=t.memoizedState;var l=t.memoizedProps,c=t.pendingProps;c||(c=l,null==c?r("159"):void 0);var s=u.context,f=Xe(t);if(f=Je(t,f),"function"!=typeof u.componentWillReceiveProps||l===c&&s===f||(s=u.state,u.componentWillReceiveProps(c,f),u.state!==s&&i.enqueueReplaceState(u,u.state,null)),s=t.memoizedState,a=null!==t.updateQueue?Ct(e,t,t.updateQueue,u,c,a):s,!(l!==c||s!==a||mo.current||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof u.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),!1;var p=c;if(null===l||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)p=!0;else{var d=t.stateNode,h=t.type;p="function"==typeof d.shouldComponentUpdate?d.shouldComponentUpdate(p,a,f):!h.prototype||!h.prototype.isPureReactComponent||(!Tn(l,p)||!Tn(s,a))}return p?("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(c,a,f),"function"==typeof u.componentDidUpdate&&(t.effectTag|=4)):("function"!=typeof u.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),n(t,c),o(t,a)),u.props=c,u.state=a,u.context=f,p}}}function Et(e){return null===e||"undefined"==typeof e?null:(e=To&&e[To]||e["@@iterator"],"function"==typeof e?e:null)}function Tt(e,t){var n=t.ref;if(null!==n&&"function"!=typeof n){if(t._owner){t=t._owner;var o=void 0;t&&(2!==t.tag?r("110"):void 0,o=t.stateNode),o?void 0:r("147",n);var a=""+n;return null!==e&&null!==e.ref&&e.ref._stringRef===a?e.ref:(e=function(e){var t=o.refs===On?o.refs={}:o.refs;null===e?delete t[a]:t[a]=e},e._stringRef=a,e)}"string"!=typeof n?r("148"):void 0,t._owner?void 0:r("149",n)}return n}function St(e,t){"textarea"!==e.type&&r("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function _t(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t,n){return e=it(e,t,n),e.index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?(r=t.alternate,null!==r?(r=r.index,r<n?(t.effectTag=2,n):r):(t.effectTag=2,n)):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?(t=ct(n,e.internalContextTag,r),t.return=e,t):(t=a(t,n,r),t.return=e,t)}function c(e,t,n,r){return null!==t&&t.type===n.type?(r=a(t,n.props,r),r.ref=Tt(t,n),r.return=e,r):(r=ut(n,e.internalContextTag,r),r.ref=Tt(t,n),r.return=e,r)}function s(e,t,n,r){return null===t||7!==t.tag?(t=st(n,e.internalContextTag,r),t.return=e,t):(t=a(t,n,r),t.return=e,t)}function f(e,t,n,r){return null===t||9!==t.tag?(t=ft(n,e.internalContextTag,r),t.type=n.value,t.return=e,t):(t=a(t,null,r),t.type=n.value,t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?(t=pt(n,e.internalContextTag,r),t.return=e,t):(t=a(t,n.children||[],r),t.return=e,t)}function d(e,t,n,r,o){return null===t||10!==t.tag?(t=lt(n,e.internalContextTag,r,o),t.return=e,t):(t=a(t,n,r),t.return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return t=ct(""+t,e.internalContextTag,n),t.return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case wo:return t.type===Eo?(t=lt(t.props.children,e.internalContextTag,n,t.key),t.return=e,t):(n=ut(t,e.internalContextTag,n),n.ref=Tt(null,t),n.return=e,n);case Co:return t=st(t,e.internalContextTag,n),t.return=e,t;case xo:return n=ft(t,e.internalContextTag,n),n.type=t.value,n.return=e,n;case ko:return t=pt(t,e.internalContextTag,n),t.return=e,t}if(So(t)||Et(t))return t=lt(t,e.internalContextTag,n,null),t.return=e,t;St(e,t)}return null}function m(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case wo:return n.key===o?n.type===Eo?d(e,t,n.props.children,r,o):c(e,t,n,r):null;case Co:return n.key===o?s(e,t,n,r):null;case xo:return null===o?f(e,t,n,r):null;case ko:return n.key===o?p(e,t,n,r):null}if(So(n)||Et(n))return null!==o?null:d(e,t,n,r,null);St(e,n)}return null}function v(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return e=e.get(n)||null,l(t,e,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case wo:return e=e.get(null===r.key?n:r.key)||null,r.type===Eo?d(t,e,r.props.children,o,r.key):c(t,e,r,o);case Co:return e=e.get(null===r.key?n:r.key)||null,s(t,e,r,o);case xo:return e=e.get(n)||null,f(t,e,r,o);case ko:return e=e.get(null===r.key?n:r.key)||null,p(t,e,r,o)}if(So(r)||Et(r))return e=e.get(n)||null,d(t,e,r,o,null);St(t,r)}return null}function y(r,a,u,l){for(var c=null,s=null,f=a,p=a=0,d=null;null!==f&&p<u.length;p++){f.index>p?(d=f,f=null):d=f.sibling;var y=m(r,f,u[p],l);if(null===y){null===f&&(f=d);break}e&&f&&null===y.alternate&&t(r,f),a=i(y,a,p),null===s?c=y:s.sibling=y,s=y,f=d}if(p===u.length)return n(r,f),c;if(null===f){for(;p<u.length;p++)(f=h(r,u[p],l))&&(a=i(f,a,p),null===s?c=f:s.sibling=f,s=f);return c}for(f=o(r,f);p<u.length;p++)(d=v(f,r,p,u[p],l))&&(e&&null!==d.alternate&&f.delete(null===d.key?p:d.key),a=i(d,a,p),null===s?c=d:s.sibling=d,s=d);return e&&f.forEach(function(e){return t(r,e)}),c}function g(a,u,l,c){var s=Et(l);"function"!=typeof s?r("150"):void 0,l=s.call(l),null==l?r("151"):void 0;for(var f=s=null,p=u,d=u=0,y=null,g=l.next();null!==p&&!g.done;d++,g=l.next()){p.index>d?(y=p,p=null):y=p.sibling;var b=m(a,p,g.value,c);if(null===b){p||(p=y);break}e&&p&&null===b.alternate&&t(a,p),u=i(b,u,d),null===f?s=b:f.sibling=b,f=b,p=y}if(g.done)return n(a,p),s;if(null===p){for(;!g.done;d++,g=l.next())g=h(a,g.value,c),null!==g&&(u=i(g,u,d),null===f?s=g:f.sibling=g,f=g);return s}for(p=o(a,p);!g.done;d++,g=l.next())g=v(p,a,d,g.value,c),null!==g&&(e&&null!==g.alternate&&p.delete(null===g.key?d:g.key),u=i(g,u,d),null===f?s=g:f.sibling=g,f=g);return e&&p.forEach(function(e){return t(a,e)}),s}return function(e,o,i,l){"object"==typeof i&&null!==i&&i.type===Eo&&null===i.key&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case wo:e:{var s=i.key;for(c=o;null!==c;){if(c.key===s){if(10===c.tag?i.type===Eo:c.type===i.type){n(e,c.sibling),o=a(c,i.type===Eo?i.props.children:i.props,l),o.ref=Tt(c,i),o.return=e,e=o;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Eo?(o=lt(i.props.children,e.internalContextTag,l,i.key),o.return=e,e=o):(l=ut(i,e.internalContextTag,l),l.ref=Tt(o,i),l.return=e,e=l)}return u(e);case Co:e:{for(c=i.key;null!==o;){if(o.key===c){if(7===o.tag){n(e,o.sibling),o=a(o,i,l),o.return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}o=st(i,e.internalContextTag,l),o.return=e,e=o}return u(e);case xo:e:{if(null!==o){if(9===o.tag){n(e,o.sibling),o=a(o,null,l),o.type=i.value,o.return=e,e=o;break e}n(e,o)}o=ft(i,e.internalContextTag,l),o.type=i.value,o.return=e,e=o}return u(e);case ko:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(e,o.sibling),o=a(o,i.children||[],l),o.return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}o=pt(i,e.internalContextTag,l),o.return=e,e=o}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==o&&6===o.tag?(n(e,o.sibling),o=a(o,i,l)):(n(e,o),o=ct(i,e.internalContextTag,l)),o.return=e,e=o,u(e);if(So(i))return y(e,o,i,l);if(Et(i))return g(e,o,i,l);if(c&&St(e,i),"undefined"==typeof i)switch(e.tag){case 2:case 1:l=e.type,r("152",l.displayName||l.name||"Component")}return n(e,o)}}function Ot(e,t,n,o,a){function i(e,t,n){var r=t.expirationTime;t.child=null===e?Oo(t,null,n,r):_o(t,e.child,n,r)}function u(e,t){var n=t.ref;null===n||e&&e.ref===n||(t.effectTag|=128)}function l(e,t,n,r){if(u(e,t),!n)return r&&ot(t,!1),s(e,t);n=t.stateNode,Vr.current=t;var o=n.render();return t.effectTag|=1,i(e,t,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&ot(t,!0),t.child}function c(e){var t=e.stateNode;t.pendingContext?tt(e,t.pendingContext,t.pendingContext!==t.context):t.context&&tt(e,t.context,!1),v(e,t.containerInfo)}function s(e,t){if(null!==e&&t.child!==e.child?r("153"):void 0,null!==t.child){e=t.child;var n=it(e,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,n=n.sibling=it(e,e.pendingProps,e.expirationTime),n.return=t;n.sibling=null}return t.child}function f(e,t){switch(t.tag){case 3:c(t);break;case 2:rt(t);break;case 4:v(t,t.stateNode.containerInfo)}return null}var p=e.shouldSetTextContent,d=e.useSyncScheduling,h=e.shouldDeprioritizeSubtree,m=t.pushHostContext,v=t.pushHostContainer,y=n.enterHydrationState,g=n.resetHydrationState,b=n.tryToClaimNextHydratableInstance;e=kt(o,a,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t});var w=e.adoptClassInstance,C=e.constructClassInstance,x=e.mountClassInstance,k=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n)return f(e,t);switch(t.tag){case 0:null!==e?r("155"):void 0;var o=t.type,a=t.pendingProps,E=Xe(t);return E=Je(t,E),o=o(a,E),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render?(t.tag=2,a=rt(t),w(t,o),x(t,n),t=l(e,t,!0,a)):(t.tag=1,i(e,t,o),t.memoizedProps=a,t=t.child),t;case 1:e:{if(a=t.type,n=t.pendingProps,o=t.memoizedProps,mo.current)null===n&&(n=o);else if(null===n||o===n){t=s(e,t);break e}o=Xe(t),o=Je(t,o),a=a(n,o),t.effectTag|=1,i(e,t,a),t.memoizedProps=n,t=t.child}return t;case 2:return a=rt(t),o=void 0,null===e?t.stateNode?r("153"):(C(t,t.pendingProps),x(t,n),o=!0):o=k(e,t,n),l(e,t,o,a);case 3:return c(t),a=t.updateQueue,null!==a?(o=t.memoizedState,a=Ct(e,t,a,null,null,n),o===a?(g(),t=s(e,t)):(o=a.element,E=t.stateNode,(null===e||null===e.child)&&E.hydrate&&y(t)?(t.effectTag|=2,t.child=Oo(t,null,o,n)):(g(),i(e,t,o)),t.memoizedState=a,t=t.child)):(g(),t=s(e,t)),t;case 5:m(t),null===e&&b(t),a=t.type;var T=t.memoizedProps;return o=t.pendingProps,null===o&&(o=T,null===o?r("154"):void 0),E=null!==e?e.memoizedProps:null,mo.current||null!==o&&T!==o?(T=o.children,p(a,o)?T=null:E&&p(a,E)&&(t.effectTag|=16),u(e,t),2147483647!==n&&!d&&h(a,o)?(t.expirationTime=2147483647,t=null):(i(e,t,T),t.memoizedProps=o,t=t.child)):t=s(e,t),t;case 6:return null===e&&b(t),e=t.pendingProps,null===e&&(e=t.memoizedProps),t.memoizedProps=e,null;case 8:t.tag=7;case 7:return a=t.pendingProps,mo.current?null===a&&(a=e&&e.memoizedProps,null===a?r("154"):void 0):null!==a&&t.memoizedProps!==a||(a=t.memoizedProps),o=a.children,t.stateNode=null===e?Oo(t,t.stateNode,o,n):_o(t,t.stateNode,o,n),t.memoizedProps=a,t.stateNode;case 9:return null;case 4:e:{if(v(t,t.stateNode.containerInfo),a=t.pendingProps,mo.current)null===a&&(a=e&&e.memoizedProps,null==a?r("154"):void 0);else if(null===a||t.memoizedProps===a){t=s(e,t);break e}null===e?t.child=_o(t,null,a,n):i(e,t,a),t.memoizedProps=a,t=t.child}return t;case 10:e:{if(n=t.pendingProps,mo.current)null===n&&(n=t.memoizedProps);else if(null===n||t.memoizedProps===n){t=s(e,t);break e}i(e,t,n),t.memoizedProps=n,t=t.child}return t;default:r("156")}},beginFailedWork:function(e,t,n){switch(t.tag){case 2:rt(t);break;case 3:c(t);break;default:r("157")}return t.effectTag|=64,null===e?t.child=null:t.child!==e.child&&(t.child=e.child),0===t.expirationTime||t.expirationTime>n?f(e,t):(t.firstEffect=null,t.lastEffect=null,t.child=null===e?Oo(t,null,null,n):_o(t,e.child,null,n),
2===t.tag&&(e=t.stateNode,t.memoizedProps=e.props,t.memoizedState=e.state),t.child)}}}function Pt(e,t,n){function o(e){e.effectTag|=4}var a=e.createInstance,i=e.createTextInstance,u=e.appendInitialChild,l=e.finalizeInitialChildren,c=e.prepareUpdate,s=e.persistence,f=t.getRootHostContainer,p=t.popHostContext,d=t.getHostContext,h=t.popHostContainer,m=n.prepareToHydrateHostInstance,v=n.prepareToHydrateHostTextInstance,y=n.popHydrationState,g=void 0,b=void 0,w=void 0;return e.mutation?(g=function(){},b=function(e,t,n){(t.updateQueue=n)&&o(t)},w=function(e,t,n,r){n!==r&&o(t)}):r(s?"235":"236"),{completeWork:function(e,t,n){var s=t.pendingProps;switch(null===s?s=t.memoizedProps:2147483647===t.expirationTime&&2147483647!==n||(t.pendingProps=null),t.tag){case 1:return null;case 2:return et(t),null;case 3:return h(t),Ge(mo,t),Ge(ho,t),s=t.stateNode,s.pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==e&&null!==e.child||(y(t),t.effectTag&=-3),g(t),null;case 5:p(t),n=f();var C=t.type;if(null!==e&&null!=t.stateNode){var x=e.memoizedProps,k=t.stateNode,E=d();k=c(k,C,x,s,n,E),b(e,t,k,C,x,s,n),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!s)return null===t.stateNode?r("166"):void 0,null;if(e=d(),y(t))m(t,n,e)&&o(t);else{e=a(C,s,n,e,t);e:for(x=t.child;null!==x;){if(5===x.tag||6===x.tag)u(e,x.stateNode);else if(4!==x.tag&&null!==x.child){x.child.return=x,x=x.child;continue}if(x===t)break;for(;null===x.sibling;){if(null===x.return||x.return===t)break e;x=x.return}x.sibling.return=x.return,x=x.sibling}l(e,C,s,n)&&o(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)w(e,t,e.memoizedProps,s);else{if("string"!=typeof s)return null===t.stateNode?r("166"):void 0,null;e=f(),n=d(),y(t)?v(t)&&o(t):t.stateNode=i(s,e,n,t)}return null;case 7:(s=t.memoizedProps)?void 0:r("165"),t.tag=8,C=[];e:for((x=t.stateNode)&&(x.return=t);null!==x;){if(5===x.tag||6===x.tag||4===x.tag)r("247");else if(9===x.tag)C.push(x.type);else if(null!==x.child){x.child.return=x,x=x.child;continue}for(;null===x.sibling;){if(null===x.return||x.return===t)break e;x=x.return}x.sibling.return=x.return,x=x.sibling}return x=s.handler,s=x(s.props,C),t.child=_o(t,null!==e?e.child:null,s,n),t.child;case 8:return t.tag=7,null;case 9:return null;case 10:return null;case 4:return h(t),g(t),null;case 0:r("167");default:r("156")}}}}function Nt(e,t){function n(e){var n=e.ref;if(null!==n)try{n(null)}catch(n){t(e,n)}}function o(e){switch("function"==typeof vt&&vt(e),e.tag){case 2:n(e);var r=e.stateNode;if("function"==typeof r.componentWillUnmount)try{r.props=e.memoizedProps,r.state=e.memoizedState,r.componentWillUnmount()}catch(n){t(e,n)}break;case 5:n(e);break;case 7:a(e.stateNode);break;case 4:c&&u(e)}}function a(e){for(var t=e;;)if(o(t),null===t.child||c&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function i(e){return 5===e.tag||3===e.tag||4===e.tag}function u(e){for(var t=e,n=!1,i=void 0,u=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n?r("160"):void 0,n.tag){case 5:i=n.stateNode,u=!1;break e;case 3:i=n.stateNode.containerInfo,u=!0;break e;case 4:i=n.stateNode.containerInfo,u=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)a(t),u?b(i,t.stateNode):g(i,t.stateNode);else if(4===t.tag?i=t.stateNode.containerInfo:o(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return,4===t.tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var l=e.getPublicInstance,c=e.mutation;e=e.persistence,c||r(e?"235":"236");var s=c.commitMount,f=c.commitUpdate,p=c.resetTextContent,d=c.commitTextUpdate,h=c.appendChild,m=c.appendChildToContainer,v=c.insertBefore,y=c.insertInContainerBefore,g=c.removeChild,b=c.removeChildFromContainer;return{commitResetTextContent:function(e){p(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(i(t)){var n=t;break e}t=t.return}r("160"),n=void 0}var o=t=void 0;switch(n.tag){case 5:t=n.stateNode,o=!1;break;case 3:t=n.stateNode.containerInfo,o=!0;break;case 4:t=n.stateNode.containerInfo,o=!0;break;default:r("161")}16&n.effectTag&&(p(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||i(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var a=e;;){if(5===a.tag||6===a.tag)n?o?y(t,a.stateNode,n):v(t,a.stateNode,n):o?m(t,a.stateNode):h(t,a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)break;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}},commitDeletion:function(e){u(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var a=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&f(n,i,a,e,o,t)}break;case 6:null===t.stateNode?r("162"):void 0,n=t.memoizedProps,d(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:r("163")}},commitLifeCycles:function(e,t){switch(t.tag){case 2:var n=t.stateNode;if(4&t.effectTag)if(null===e)n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidMount();else{var o=e.memoizedProps;e=e.memoizedState,n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidUpdate(o,e)}t=t.updateQueue,null!==t&&xt(t,n);break;case 3:n=t.updateQueue,null!==n&&xt(n,null!==t.child?t.child.stateNode:null);break;case 5:n=t.stateNode,null===e&&4&t.effectTag&&s(n,t.type,t.memoizedProps,t);break;case 6:break;case 4:break;default:r("163")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:t(l(n));break;default:t(n)}}},commitDetachRef:function(e){e=e.ref,null!==e&&e(null)}}}function It(e){function t(e){return e===Po?r("174"):void 0,e}var n=e.getChildHostContext,o=e.getRootHostContext,a={current:Po},i={current:Po},u={current:Po};return{getHostContext:function(){return t(a.current)},getRootHostContainer:function(){return t(u.current)},popHostContainer:function(e){Ge(a,e),Ge(i,e),Ge(u,e)},popHostContext:function(e){i.current===e&&(Ge(a,e),Ge(i,e))},pushHostContainer:function(e,t){Ye(u,t,e),t=o(t),Ye(i,e,e),Ye(a,t,e)},pushHostContext:function(e){var r=t(u.current),o=t(a.current);r=n(o,e.type,r),o!==r&&(Ye(i,e,e),Ye(a,r,e))},resetHostContainer:function(){a.current=Po,u.current=Po}}}function Rt(e){function t(e,t){var n=new at(5,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return t=i(t,e.type,e.pendingProps),null!==t&&(e.stateNode=t,!0);case 6:return t=u(t,e.pendingProps),null!==t&&(e.stateNode=t,!0);default:return!1}}function o(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;p=e}var a=e.shouldSetTextContent;if(e=e.hydration,!e)return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){r("175")},prepareToHydrateHostTextInstance:function(){r("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,u=e.canHydrateTextInstance,l=e.getNextHydratableSibling,c=e.getFirstHydratableChild,s=e.hydrateInstance,f=e.hydrateTextInstance,p=null,d=null,h=!1;return{enterHydrationState:function(e){return d=c(e.stateNode.containerInfo),p=e,h=!0},resetHydrationState:function(){d=p=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(r=l(r),!r||!n(e,r))return e.effectTag|=2,h=!1,void(p=e);t(p,d)}p=e,d=c(r)}else e.effectTag|=2,h=!1,p=e}},prepareToHydrateHostInstance:function(e,t,n){return t=s(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return f(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==p)return!1;if(!h)return o(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!a(n,e.memoizedProps))for(n=d;n;)t(e,n),n=l(n);return o(e),d=p?l(e.stateNode):null,!0}}}function At(e){function t(e){ae=G=!0;var t=e.stateNode;if(t.current===e?r("177"):void 0,t.isReadyForCommit=!1,Vr.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var n=e.firstEffect}else n=e;else n=e.firstEffect;for(K(),Z=n;null!==Z;){var o=!1,a=void 0;try{for(;null!==Z;){var i=Z.effectTag;if(16&i&&A(Z),128&i){var u=Z.alternate;null!==u&&U(u)}switch(i&-242){case 2:j(Z),Z.effectTag&=-3;break;case 6:j(Z),Z.effectTag&=-3,D(Z.alternate,Z);break;case 4:D(Z.alternate,Z);break;case 8:ie=!0,M(Z),ie=!1}Z=Z.nextEffect}}catch(e){o=!0,a=e}o&&(null===Z?r("178"):void 0,l(Z,a),null!==Z&&(Z=Z.nextEffect))}for(W(),t.current=e,Z=n;null!==Z;){n=!1,o=void 0;try{for(;null!==Z;){var c=Z.effectTag;if(36&c&&F(Z.alternate,Z),128&c&&L(Z),64&c)switch(a=Z,i=void 0,null!==ee&&(i=ee.get(a),ee.delete(a),null==i&&null!==a.alternate&&(a=a.alternate,i=ee.get(a),ee.delete(a))),null==i?r("184"):void 0,a.tag){case 2:a.stateNode.componentDidCatch(i.error,{componentStack:i.componentStack});break;case 3:null===re&&(re=i.error);break;default:r("157")}var s=Z.nextEffect;Z.nextEffect=null,Z=s}}catch(e){n=!0,o=e}n&&(null===Z?r("178"):void 0,l(Z,o),null!==Z&&(Z=Z.nextEffect))}return G=ae=!1,"function"==typeof mt&&mt(e.stateNode),ne&&(ne.forEach(m),ne=null),null!==re&&(e=re,re=null,k(e)),t=t.current.expirationTime,0===t&&(te=ee=null),t}function n(e){for(;;){var t=R(e.alternate,e,J),n=e.return,r=e.sibling,o=e;if(2147483647===J||2147483647!==o.expirationTime){if(2!==o.tag&&3!==o.tag)var a=0;else a=o.updateQueue,a=null===a?0:a.expirationTime;for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){e.stateNode.isReadyForCommit=!0;break}e=n}return null}function o(e){var t=N(e.alternate,e,J);return null===t&&(t=n(e)),Vr.current=null,t}function a(e){var t=I(e.alternate,e,J);return null===t&&(t=n(e)),Vr.current=null,t}function i(e){if(null!==ee){if(!(0===J||J>e))if(J<=$)for(;null!==Y;)Y=c(Y)?a(Y):o(Y);else for(;null!==Y&&!x();)Y=c(Y)?a(Y):o(Y)}else if(!(0===J||J>e))if(J<=$)for(;null!==Y;)Y=o(Y);else for(;null!==Y&&!x();)Y=o(Y)}function u(e,t){if(G?r("243"):void 0,G=!0,e.isReadyForCommit=!1,e!==X||t!==J||null===Y){for(;-1<po;)fo[po]=null,po--;vo=On,ho.current=On,mo.current=!1,O(),X=e,J=t,Y=it(X.current,null,t)}var n=!1,o=null;try{i(t)}catch(e){n=!0,o=e}for(;n;){if(oe){re=o;break}var u=Y;if(null===u)oe=!0;else{var c=l(u,o);if(null===c?r("183"):void 0,!oe){try{for(n=c,o=t,c=n;null!==u;){switch(u.tag){case 2:et(u);break;case 5:_(u);break;case 3:S(u);break;case 4:S(u)}if(u===c||u.alternate===c)break;u=u.return}Y=a(n),i(o)}catch(e){n=!0,o=e;continue}break}}}return t=re,oe=G=!1,re=null,null!==t&&k(t),e.isReadyForCommit?e.current.alternate:null}function l(e,t){var n=Vr.current=null,r=!1,o=!1,a=null;if(3===e.tag)n=e,s(e)&&(oe=!0);else for(var i=e.return;null!==i&&null===n;){if(2===i.tag?"function"==typeof i.stateNode.componentDidCatch&&(r=!0,a=Ce(i),n=i,o=!0):3===i.tag&&(n=i),s(i)){if(ie||null!==ne&&(ne.has(i)||null!==i.alternate&&ne.has(i.alternate)))return null;n=null,o=!1}i=i.return}if(null!==n){null===te&&(te=new Set),te.add(n);var u="";i=e;do{e:switch(i.tag){case 0:case 1:case 2:case 5:var l=i._debugOwner,c=i._debugSource,f=Ce(i),p=null;l&&(p=Ce(l)),l=c,f="\n    in "+(f||"Unknown")+(l?" (at "+l.fileName.replace(/^.*[\\\/]/,"")+":"+l.lineNumber+")":p?" (created by "+p+")":"");break e;default:f=""}u+=f,i=i.return}while(i);i=u,e=Ce(e),null===ee&&(ee=new Map),t={componentName:e,componentStack:i,error:t,errorBoundary:r?n.stateNode:null,errorBoundaryFound:r,errorBoundaryName:a,willRetry:o},ee.set(n,t);try{var d=t.error;d&&d.suppressReactErrorLogging||console.error(d)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}return ae?(null===ne&&(ne=new Set),ne.add(n)):m(n),n}return null===re&&(re=t),null}function c(e){return null!==ee&&(ee.has(e)||null!==e.alternate&&ee.has(e.alternate))}function s(e){return null!==te&&(te.has(e)||null!==e.alternate&&te.has(e.alternate))}function f(){return 20*(((v()+100)/20|0)+1)}function p(e){return 0!==Q?Q:G?ae?1:J:!B||1&e.internalContextTag?f():1}function d(e,t){return h(e,t,!1)}function h(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!G&&n===X&&t<J&&(Y=X=null,J=0);var o=n,a=t;if(xe>we&&r("185"),null===o.nextScheduledRoot)o.remainingExpirationTime=a,null===le?(ue=le=o,o.nextScheduledRoot=o):(le=le.nextScheduledRoot=o,le.nextScheduledRoot=ue);else{var i=o.remainingExpirationTime;(0===i||a<i)&&(o.remainingExpirationTime=a)}fe||(ge?be&&(pe=o,de=1,C(pe,de)):1===a?w(1,null):y(a)),!G&&n===X&&t<J&&(Y=X=null,J=0)}e=e.return}}function m(e){h(e,1,!0)}function v(){return $=((H()-q)/10|0)+2}function y(e){if(0!==ce){if(e>ce)return;z(se)}var t=H()-q;ce=e,se=V(b,{timeout:10*(e-2)-t})}function g(){var e=0,t=null;if(null!==le)for(var n=le,o=ue;null!==o;){var a=o.remainingExpirationTime;if(0===a){if(null===n||null===le?r("244"):void 0,o===o.nextScheduledRoot){ue=le=o.nextScheduledRoot=null;break}if(o===ue)ue=a=o.nextScheduledRoot,le.nextScheduledRoot=a,o.nextScheduledRoot=null;else{if(o===le){le=n,le.nextScheduledRoot=ue,o.nextScheduledRoot=null;break}n.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=n.nextScheduledRoot}else{if((0===e||a<e)&&(e=a,t=o),o===le)break;n=o,o=o.nextScheduledRoot}}n=pe,null!==n&&n===t?xe++:xe=0,pe=t,de=e}function b(e){w(0,e)}function w(e,t){for(ye=t,g();null!==pe&&0!==de&&(0===e||de<=e)&&!he;)C(pe,de),g();if(null!==ye&&(ce=0,se=-1),0!==de&&y(de),ye=null,he=!1,xe=0,me)throw e=ve,ve=null,me=!1,e}function C(e,n){if(fe?r("245"):void 0,fe=!0,n<=v()){var o=e.finishedWork;null!==o?(e.finishedWork=null,e.remainingExpirationTime=t(o)):(e.finishedWork=null,o=u(e,n),null!==o&&(e.remainingExpirationTime=t(o)))}else o=e.finishedWork,null!==o?(e.finishedWork=null,e.remainingExpirationTime=t(o)):(e.finishedWork=null,o=u(e,n),null!==o&&(x()?e.finishedWork=o:e.remainingExpirationTime=t(o)));fe=!1}function x(){return!(null===ye||ye.timeRemaining()>ke)&&(he=!0)}function k(e){null===pe?r("246"):void 0,pe.remainingExpirationTime=0,me||(me=!0,ve=e)}var E=It(e),T=Rt(e),S=E.popHostContainer,_=E.popHostContext,O=E.resetHostContainer,P=Ot(e,E,T,d,p),N=P.beginWork,I=P.beginFailedWork,R=Pt(e,E,T).completeWork;E=Nt(e,l);var A=E.commitResetTextContent,j=E.commitPlacement,M=E.commitDeletion,D=E.commitWork,F=E.commitLifeCycles,L=E.commitAttachRef,U=E.commitDetachRef,H=e.now,V=e.scheduleDeferredCallback,z=e.cancelDeferredCallback,B=e.useSyncScheduling,K=e.prepareForCommit,W=e.resetAfterCommit,q=H(),$=2,Q=0,G=!1,Y=null,X=null,J=0,Z=null,ee=null,te=null,ne=null,re=null,oe=!1,ae=!1,ie=!1,ue=null,le=null,ce=0,se=-1,fe=!1,pe=null,de=0,he=!1,me=!1,ve=null,ye=null,ge=!1,be=!1,we=1e3,xe=0,ke=1;return{computeAsyncExpiration:f,computeExpirationForFiber:p,scheduleWork:d,batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||fe||w(1,null)}},unbatchedUpdates:function(e){if(ge&&!be){be=!0;try{return e()}finally{be=!1}}return e()},flushSync:function(e){var t=ge;ge=!0;try{e:{var n=Q;Q=1;try{var o=e();break e}finally{Q=n}o=void 0}return o}finally{ge=t,fe?r("187"):void 0,w(1,null)}},deferredUpdates:function(e){var t=Q;Q=f();try{return e()}finally{Q=t}}}}function jt(e){function t(e){return e=Se(e),null===e?null:e.stateNode}var n=e.getPublicInstance;e=At(e);var o=e.computeAsyncExpiration,a=e.computeExpirationForFiber,i=e.scheduleWork;return{createContainer:function(e,t){var n=new at(3,null,0);return e={current:n,containerInfo:e,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:t,nextScheduledRoot:null},n.stateNode=e},updateContainer:function(e,t,n,u){var l=t.current;if(n){n=n._reactInternalFiber;var c;e:{for(2===xe(n)&&2===n.tag?void 0:r("170"),c=n;3!==c.tag;){if(Ze(c)){c=c.stateNode.__reactInternalMemoizedMergedChildContext;break e}(c=c.return)?void 0:r("171")}c=c.stateNode.context}n=Ze(n)?nt(n,c):c}else n=On;null===t.context?t.context=n:t.pendingContext=n,t=u,t=void 0===t?null:t,u=null!=e&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent?o():a(l),bt(l,{expirationTime:u,partialState:{element:e},callback:t,isReplace:!1,isForced:!1,nextCallback:null,next:null}),i(l,u)},batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,flushSync:e.flushSync,getPublicRootInstance:function(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:t,findHostInstanceWithNoPortals:function(e){return e=_e(e),null===e?null:e.stateNode},injectIntoDevTools:function(e){var n=e.findFiberByHostInstance;return ht(Cn({},e,{findHostInstanceByFiber:function(e){return t(e)},findFiberByHostInstance:function(e){return n?n(e):null}}))}}}function Mt(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ko,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Dt(e){return!!Go.hasOwnProperty(e)||!Qo.hasOwnProperty(e)&&($o.test(e)?Go[e]=!0:(Qo[e]=!0,!1))}function Ft(e,t,n){var r=i(t);if(r&&a(t,n)){var o=r.mutationMethod;o?o(e,n):null==n||r.hasBooleanValue&&!n||r.hasNumericValue&&isNaN(n)||r.hasPositiveNumericValue&&1>n||r.hasOverloadedBooleanValue&&!1===n?Ut(e,t):r.mustUseProperty?e[r.propertyName]=n:(t=r.attributeName,(o=r.attributeNamespace)?e.setAttributeNS(o,t,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===n?e.setAttribute(t,""):e.setAttribute(t,""+n))}else Lt(e,t,a(t,n)?n:null)}function Lt(e,t,n){Dt(t)&&(null==n?e.removeAttribute(t):e.setAttribute(t,""+n))}function Ut(e,t){var n=i(t);n?(t=n.mutationMethod)?t(e,void 0):n.mustUseProperty?e[n.propertyName]=!n.hasBooleanValue&&"":e.removeAttribute(n.attributeName):e.removeAttribute(t)}function Ht(e,t){var n=t.value,r=t.checked;return Cn({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked})}function Vt(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function zt(e,t){t=t.checked,null!=t&&Ft(e,"checked",t)}function Bt(e,t){zt(e,t);var n=t.value;null!=n?0===n&&""===e.value?e.value="0":"number"===t.type?(t=parseFloat(e.value)||0,(n!=t||n==t&&e.value!=n)&&(e.value=""+n)):e.value!==""+n&&(e.value=""+n):(null==t.value&&null!=t.defaultValue&&e.defaultValue!==""+t.defaultValue&&(e.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked))}function Kt(e,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":e.value="",e.value=e.defaultValue;break;default:e.value=e.value}t=e.name,""!==t&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Wt(e){var t="";return bn.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}function qt(e,t){return e=Cn({children:void 0},t),(t=Wt(t.children))&&(e.children=t),e}function $t(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Qt(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Gt(e,t){return null!=t.dangerouslySetInnerHTML?r("91"):void 0,Cn({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yt(e,t){var n=t.value;null==n&&(n=t.defaultValue,t=t.children,null!=t&&(null!=n?r("92"):void 0,Array.isArray(t)&&(1>=t.length?void 0:r("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Xt(e,t){var n=t.value;null!=n&&(n=""+n,n!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Jt(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}function Zt(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function en(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zt(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}function tn(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function nn(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||Zo.hasOwnProperty(o)&&Zo[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}function rn(e,t,n){t&&(ta[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML?r("137",e,n()):void 0),null!=t.dangerouslySetInnerHTML&&(null!=t.children?r("60"):void 0,"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML?void 0:r("61")),null!=t.style&&"object"!=typeof t.style?r("62",n()):void 0)}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function an(e,t){e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument;var n=Me(e);t=Yn[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Ie("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Ie("topFocus","focus",e),Ie("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(ne("cancel",!0)&&Ie("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(ne("close",!0)&&Ie("topClose","close",e),n.topClose=!0):Gr.hasOwnProperty(o)&&Ne(o,Gr[o],e),n[o]=!0)}}function un(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===na&&(r=Zt(e)),r===na?"script"===e?(e=n.createElement("div"),e.innerHTML="<script></script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function ln(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function cn(e,t,n,r){var o=on(t,n);switch(t){case"iframe":case"object":Ne("topLoad","load",e);var a=n;break;case"video":case"audio":for(a in oa)oa.hasOwnProperty(a)&&Ne(a,oa[a],e);a=n;break;case"source":Ne("topError","error",e),a=n;break;case"img":case"image":Ne("topError","error",e),Ne("topLoad","load",e),a=n;break;case"form":Ne("topReset","reset",e),Ne("topSubmit","submit",e),a=n;break;case"details":Ne("topToggle","toggle",e),a=n;break;case"input":Vt(e,n),a=Ht(e,n),Ne("topInvalid","invalid",e),an(r,"onChange");break;case"option":a=qt(e,n);break;case"select":Qt(e,n),a=Cn({},n,{value:void 0}),Ne("topInvalid","invalid",e),an(r,"onChange");break;case"textarea":Yt(e,n),a=Gt(e,n),Ne("topInvalid","invalid",e),an(r,"onChange");break;default:a=n}rn(t,a,ra);var i,u=a;for(i in u)if(u.hasOwnProperty(i)){var l=u[i];"style"===i?nn(e,l,ra):"dangerouslySetInnerHTML"===i?(l=l?l.__html:void 0,null!=l&&Jo(e,l)):"children"===i?"string"==typeof l?("textarea"!==t||""!==l)&&tn(e,l):"number"==typeof l&&tn(e,""+l):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(Gn.hasOwnProperty(i)?null!=l&&an(r,i):o?Lt(e,i,l):null!=l&&Ft(e,i,l))}switch(t){case"input":ae(e),Kt(e,n);break;case"textarea":ae(e),Jt(e,n);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,t=n.value,null!=t?$t(e,!!n.multiple,t,!1):null!=n.defaultValue&&$t(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=xn)}}function sn(e,t,n,r,o){var a=null;switch(t){case"input":n=Ht(e,n),r=Ht(e,r),a=[];break;case"option":n=qt(e,n),r=qt(e,r),a=[];break;case"select":n=Cn({},n,{value:void 0}),r=Cn({},r,{value:void 0}),a=[];break;case"textarea":n=Gt(e,n),r=Gt(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=xn)}rn(t,r,ra);var i,u;e=null;for(i in n)if(!r.hasOwnProperty(i)&&n.hasOwnProperty(i)&&null!=n[i])if("style"===i)for(u in t=n[i])t.hasOwnProperty(u)&&(e||(e={}),e[u]="");else"dangerouslySetInnerHTML"!==i&&"children"!==i&&"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(Gn.hasOwnProperty(i)?a||(a=[]):(a=a||[]).push(i,null));for(i in r){var l=r[i];if(t=null!=n?n[i]:void 0,r.hasOwnProperty(i)&&l!==t&&(null!=l||null!=t))if("style"===i)if(t){for(u in t)!t.hasOwnProperty(u)||l&&l.hasOwnProperty(u)||(e||(e={}),e[u]="");for(u in l)l.hasOwnProperty(u)&&t[u]!==l[u]&&(e||(e={}),e[u]=l[u])}else e||(a||(a=[]),a.push(i,e)),e=l;else"dangerouslySetInnerHTML"===i?(l=l?l.__html:void 0,t=t?t.__html:void 0,null!=l&&t!==l&&(a=a||[]).push(i,""+l)):"children"===i?t===l||"string"!=typeof l&&"number"!=typeof l||(a=a||[]).push(i,""+l):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&(Gn.hasOwnProperty(i)?(null!=l&&an(o,i),a||t===l||(a=[])):(a=a||[]).push(i,l))}return e&&(a=a||[]).push("style",e),a}function fn(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&zt(e,o),on(n,r),r=on(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],u=t[a+1];"style"===i?nn(e,u,ra):"dangerouslySetInnerHTML"===i?Jo(e,u):"children"===i?tn(e,u):r?null!=u?Lt(e,i,u):e.removeAttribute(i):null!=u?Ft(e,i,u):Ut(e,i)}switch(n){case"input":Bt(e,o);break;case"textarea":Xt(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,n=o.value,null!=n?$t(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?$t(e,!!o.multiple,o.defaultValue,!0):$t(e,!!o.multiple,o.multiple?[]:"",!1))}}function pn(e,t,n,r,o){switch(t){case"iframe":case"object":Ne("topLoad","load",e);break;case"video":case"audio":for(var a in oa)oa.hasOwnProperty(a)&&Ne(a,oa[a],e);break;case"source":Ne("topError","error",e);break;case"img":case"image":Ne("topError","error",e),Ne("topLoad","load",e);break;case"form":Ne("topReset","reset",e),Ne("topSubmit","submit",e);break;case"details":Ne("topToggle","toggle",e);break;case"input":Vt(e,n),Ne("topInvalid","invalid",e),an(o,"onChange");break;case"select":Qt(e,n),Ne("topInvalid","invalid",e),an(o,"onChange");break;case"textarea":Yt(e,n),Ne("topInvalid","invalid",e),an(o,"onChange")}rn(t,n,ra),r=null;for(var i in n)n.hasOwnProperty(i)&&(a=n[i],"children"===i?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):Gn.hasOwnProperty(i)&&null!=a&&an(o,i));switch(t){case"input":ae(e),Kt(e,n);break;case"textarea":ae(e),Jt(e,n);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=xn)}return r}function dn(e,t){return e.nodeValue!==t}function hn(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function mn(e){return e=e?9===e.nodeType?e.documentElement:e.firstChild:null,!(!e||1!==e.nodeType||!e.hasAttribute("data-reactroot"))}function vn(e,t,n,o,a){hn(n)?void 0:r("200");var i=n._reactRootContainer;if(i)la.updateContainer(t,i,e,a);else{if(o=o||mn(n),!o)for(i=void 0;i=n.lastChild;)n.removeChild(i);var u=la.createContainer(n,o);i=n._reactRootContainer=u,la.unbatchedUpdates(function(){la.updateContainer(t,u,e,a)})}return la.getPublicRootInstance(i)}function yn(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return hn(t)?void 0:r("200"),Mt(e,t,null,n)}function gn(e,t){this._reactRootContainer=la.createContainer(e,t)}var bn=n(2),wn=n(9),Cn=n(4),xn=n(6),kn=n(10),En=n(11),Tn=n(12),Sn=n(13),_n=n(16),On=n(5);bn?void 0:r("227");var Pn={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0},Nn={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=Nn,n=e.Properties||{},a=e.DOMAttributeNamespaces||{},i=e.DOMAttributeNames||{};e=e.DOMMutationMethods||{};for(var u in n){In.hasOwnProperty(u)?r("48",u):void 0;var l=u.toLowerCase(),c=n[u];l={attributeName:l,attributeNamespace:null,propertyName:u,mutationMethod:null,mustUseProperty:o(c,t.MUST_USE_PROPERTY),hasBooleanValue:o(c,t.HAS_BOOLEAN_VALUE),hasNumericValue:o(c,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:o(c,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:o(c,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:o(c,t.HAS_STRING_BOOLEAN_VALUE)},1>=l.hasBooleanValue+l.hasNumericValue+l.hasOverloadedBooleanValue?void 0:r("50",u),i.hasOwnProperty(u)&&(l.attributeName=i[u]),a.hasOwnProperty(u)&&(l.attributeNamespace=a[u]),e.hasOwnProperty(u)&&(l.mutationMethod=e[u]),In[u]=l}}},In={},Rn=Nn,An=Rn.MUST_USE_PROPERTY,jn=Rn.HAS_BOOLEAN_VALUE,Mn=Rn.HAS_NUMERIC_VALUE,Dn=Rn.HAS_POSITIVE_NUMERIC_VALUE,Fn=Rn.HAS_OVERLOADED_BOOLEAN_VALUE,Ln=Rn.HAS_STRING_BOOLEAN_VALUE,Un={Properties:{allowFullScreen:jn,async:jn,autoFocus:jn,autoPlay:jn,capture:Fn,checked:An|jn,cols:Dn,contentEditable:Ln,controls:jn,default:jn,defer:jn,disabled:jn,download:Fn,draggable:Ln,formNoValidate:jn,hidden:jn,loop:jn,multiple:An|jn,muted:An|jn,noValidate:jn,open:jn,playsInline:jn,readOnly:jn,required:jn,reversed:jn,rows:Dn,rowSpan:Mn,scoped:jn,seamless:jn,selected:An|jn,size:Dn,start:Mn,span:Dn,spellCheck:Ln,style:0,tabIndex:0,itemScope:jn,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:Ln},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(e,t){return null==t?e.removeAttribute("value"):void("number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t))}}},Hn=Rn.HAS_STRING_BOOLEAN_VALUE,Vn={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},zn={Properties:{autoReverse:Hn,externalResourcesRequired:Hn,preserveAlpha:Hn},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:Vn.xlink,xlinkArcrole:Vn.xlink,xlinkHref:Vn.xlink,xlinkRole:Vn.xlink,xlinkShow:Vn.xlink,xlinkTitle:Vn.xlink,xlinkType:Vn.xlink,xmlBase:Vn.xml,xmlLang:Vn.xml,xmlSpace:Vn.xml}},Bn=/[\-\:]([a-z])/g;"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(e){
var t=e.replace(Bn,u);zn.Properties[t]=0,zn.DOMAttributeNames[t]=e}),Rn.injectDOMPropertyConfig(Un),Rn.injectDOMPropertyConfig(zn);var Kn={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback?r("197"):void 0,l=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,t,n,r,o,a,i,u,c){l.apply(Kn,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,u,l){if(Kn.invokeGuardedCallback.apply(this,arguments),Kn.hasCaughtError()){var c=Kn.clearCaughtError();Kn._hasRethrowError||(Kn._hasRethrowError=!0,Kn._rethrowError=c)}},rethrowCaughtError:function(){return c.apply(Kn,arguments)},hasCaughtError:function(){return Kn._hasCaughtError},clearCaughtError:function(){if(Kn._hasCaughtError){var e=Kn._caughtError;return Kn._caughtError=null,Kn._hasCaughtError=!1,e}r("198")}},Wn=null,qn={},$n=[],Qn={},Gn={},Yn={},Xn=Object.freeze({plugins:$n,eventNameDispatchConfigs:Qn,registrationNameModules:Gn,registrationNameDependencies:Yn,possibleRegistrationNames:null,injectEventPluginOrder:p,injectEventPluginsByName:d}),Jn=null,Zn=null,er=null,tr=null,nr={injectEventPluginOrder:p,injectEventPluginsByName:d},rr=Object.freeze({injection:nr,getListener:w,extractEvents:C,enqueueEvents:x,processEventQueue:k}),or=Math.random().toString(36).slice(2),ar="__reactInternalInstance$"+or,ir="__reactEventHandlers$"+or,ur=Object.freeze({precacheFiberNode:function(e,t){t[ar]=e},getClosestInstanceFromNode:E,getInstanceFromNode:function(e){return e=e[ar],!e||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:T,getFiberCurrentPropsFromNode:S,updateFiberProps:function(e,t){e[ir]=t}}),lr=Object.freeze({accumulateTwoPhaseDispatches:j,accumulateTwoPhaseDispatchesSkipTarget:function(e){v(e,I)},accumulateEnterLeaveDispatches:M,accumulateDirectDispatches:function(e){v(e,A)}}),cr=null,sr={_root:null,_startText:null,_fallbackText:null},fr="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),pr={type:null,target:null,currentTarget:xn.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};Cn(U.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=xn.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=xn.thatReturnsTrue)},persist:function(){this.isPersistent=xn.thatReturnsTrue},isPersistent:xn.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<fr.length;t++)this[fr[t]]=null}}),U.Interface=pr,U.augmentClass=function(e,t){function n(){}n.prototype=this.prototype;var r=new n;Cn(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=Cn({},this.Interface,t),e.augmentClass=this.augmentClass,z(e)},z(U),U.augmentClass(B,{data:null}),U.augmentClass(K,{data:null});var dr=[9,13,27,32],hr=wn.canUseDOM&&"CompositionEvent"in window,mr=null;wn.canUseDOM&&"documentMode"in document&&(mr=document.documentMode);var vr;if(vr=wn.canUseDOM&&"TextEvent"in window&&!mr){var yr=window.opera;vr=!("object"==typeof yr&&"function"==typeof yr.version&&12>=parseInt(yr.version(),10))}var gr,br=vr,wr=wn.canUseDOM&&(!hr||mr&&8<mr&&11>=mr),Cr=String.fromCharCode(32),xr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},kr=!1,Er=!1,Tr={eventTypes:xr,extractEvents:function(e,t,n,r){var o;if(hr)e:{switch(e){case"topCompositionStart":var a=xr.compositionStart;break e;case"topCompositionEnd":a=xr.compositionEnd;break e;case"topCompositionUpdate":a=xr.compositionUpdate;break e}a=void 0}else Er?W(e,n)&&(a=xr.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(a=xr.compositionStart);return a?(wr&&(Er||a!==xr.compositionStart?a===xr.compositionEnd&&Er&&(o=F()):(sr._root=r,sr._startText=L(),Er=!0)),a=B.getPooled(a,t,n,r),o?a.data=o:(o=q(n),null!==o&&(a.data=o)),j(a),o=a):o=null,(e=br?$(e,n):Q(e,n))?(t=K.getPooled(xr.beforeInput,t,n,r),t.data=e,j(t)):t=null,[o,t]}},Sr=null,_r=null,Or=null,Pr={injectFiberControlledHostComponent:function(e){Sr=e}},Nr=Object.freeze({injection:Pr,enqueueStateRestore:Y,restoreStateIfNeeded:X}),Ir=!1,Rr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};wn.canUseDOM&&(gr=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var Ar={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}},jr=null,Mr=null,Dr=!1;wn.canUseDOM&&(Dr=ne("input")&&(!document.documentMode||9<document.documentMode));var Fr={eventTypes:Ar,_isInputEventSupported:Dr,extractEvents:function(e,t,n,r){var o=t?T(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=se;else if(ee(o))if(Dr)i=ve;else{i=he;var u=de}else a=o.nodeName,!a||"input"!==a.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(i=me);return i&&(i=i(e,t))?ue(i,n,r):(u&&u(e,o,t),void("topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&(e=""+o.value,o.getAttribute("value")!==e&&o.setAttribute("value",e))))}};U.augmentClass(ye,{view:null,detail:null});var Lr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};ye.augmentClass(we,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:be,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}});var Ur={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Hr={eventTypes:Ur,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?E(t):null):e=null,e===t)return null;var a=null==e?o:T(e);o=null==t?o:T(t);var i=we.getPooled(Ur.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,n=we.getPooled(Ur.mouseEnter,t,n,r),n.type="mouseenter",n.target=o,n.relatedTarget=a,M(i,n,e,t),[i,n]}},Vr=bn.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,zr=[],Br=!0,Kr=void 0,Wr=Object.freeze({get _enabled(){return Br},get _handleTopLevel(){return Kr},setHandleTopLevel:function(e){Kr=e},setEnabled:Pe,isEnabled:function(){return Br},trapBubbledEvent:Ne,trapCapturedEvent:Ie,dispatchEvent:Re}),qr={animationend:Ae("Animation","AnimationEnd"),animationiteration:Ae("Animation","AnimationIteration"),animationstart:Ae("Animation","AnimationStart"),transitionend:Ae("Transition","TransitionEnd")},$r={},Qr={};wn.canUseDOM&&(Qr=document.createElement("div").style,"AnimationEvent"in window||(delete qr.animationend.animation,delete qr.animationiteration.animation,delete qr.animationstart.animation),"TransitionEvent"in window||delete qr.transitionend.transition);var Gr={topAbort:"abort",topAnimationEnd:je("animationend")||"animationend",topAnimationIteration:je("animationiteration")||"animationiteration",topAnimationStart:je("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:je("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},Yr={},Xr=0,Jr="_reactListenersID"+(""+Math.random()).slice(2),Zr=wn.canUseDOM&&"documentMode"in document&&11>=document.documentMode,eo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},to=null,no=null,ro=null,oo=!1,ao={eventTypes:eo,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Me(a),o=Yn.onSelect;for(var i=0;i<o.length;i++){var u=o[i];if(!a.hasOwnProperty(u)||!a[u]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?T(t):window,e){case"topFocus":(ee(a)||"true"===a.contentEditable)&&(to=a,no=t,ro=null);break;case"topBlur":ro=no=to=null;break;case"topMouseDown":oo=!0;break;case"topContextMenu":case"topMouseUp":return oo=!1,Ue(n,r);case"topSelectionChange":if(Zr)break;case"topKeyDown":case"topKeyUp":return Ue(n,r)}return null}};U.augmentClass(He,{animationName:null,elapsedTime:null,pseudoElement:null}),U.augmentClass(Ve,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ye.augmentClass(ze,{relatedTarget:null});var io={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},uo={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};ye.augmentClass(Ke,{key:function(e){if(e.key){var t=io[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?(e=Be(e),13===e?"Enter":String.fromCharCode(e)):"keydown"===e.type||"keyup"===e.type?uo[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:be,charCode:function(e){return"keypress"===e.type?Be(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Be(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),we.augmentClass(We,{dataTransfer:null}),ye.augmentClass(qe,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:be}),U.augmentClass($e,{propertyName:null,elapsedTime:null,pseudoElement:null}),we.augmentClass(Qe,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null});var lo={},co={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t;t="top"+t,n={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[t]},lo[e]=n,co[t]=n});var so={eventTypes:lo,extractEvents:function(e,t,n,r){var o=co[e];if(!o)return null;switch(e){case"topKeyPress":if(0===Be(n))return null;case"topKeyDown":case"topKeyUp":e=Ke;break;case"topBlur":case"topFocus":e=ze;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=we;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=We;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=qe;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=He;break;case"topTransitionEnd":e=$e;break;case"topScroll":e=ye;break;case"topWheel":e=Qe;break;case"topCopy":case"topCut":case"topPaste":e=Ve;break;default:e=U}return t=e.getPooled(o,t,n,r),j(t),t}};Kr=function(e,t,n,r){e=C(e,t,n,r),x(e),k(!1)},nr.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),Jn=ur.getFiberCurrentPropsFromNode,Zn=ur.getInstanceFromNode,er=ur.getNodeFromInstance,nr.injectEventPluginsByName({SimpleEventPlugin:so,EnterLeaveEventPlugin:Hr,ChangeEventPlugin:Fr,SelectEventPlugin:ao,BeforeInputEventPlugin:Tr});var fo=[],po=-1;new Set;var ho={current:On},mo={current:!1},vo=On,yo=null,go=null,bo="function"==typeof Symbol&&Symbol.for,wo=bo?Symbol.for("react.element"):60103,Co=bo?Symbol.for("react.call"):60104,xo=bo?Symbol.for("react.return"):60105,ko=bo?Symbol.for("react.portal"):60106,Eo=bo?Symbol.for("react.fragment"):60107,To="function"==typeof Symbol&&Symbol.iterator,So=Array.isArray,_o=_t(!0),Oo=_t(!1),Po={},No=Object.freeze({default:jt}),Io=No&&jt||No,Ro=Io.default?Io.default:Io,Ao="object"==typeof performance&&"function"==typeof performance.now,jo=void 0;jo=Ao?function(){return performance.now()}:function(){return Date.now()};var Mo=void 0,Do=void 0;if(wn.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Fo,Lo=null,Uo=!1,Ho=-1,Vo=!1,zo=0,Bo=33,Ko=33;Fo=Ao?{didTimeout:!1,timeRemaining:function(){var e=zo-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=zo-Date.now();return 0<e?e:0}};var Wo="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Wo){if(Uo=!1,e=jo(),0>=zo-e){if(!(-1!==Ho&&Ho<=e))return void(Vo||(Vo=!0,requestAnimationFrame(qo)));Fo.didTimeout=!0}else Fo.didTimeout=!1;Ho=-1,e=Lo,Lo=null,null!==e&&e(Fo)}},!1);var qo=function(e){Vo=!1;var t=e-zo+Ko;t<Ko&&Bo<Ko?(8>t&&(t=8),Ko=t<Bo?Bo:t):Bo=t,zo=e+Ko,Uo||(Uo=!0,window.postMessage(Wo,"*"))};Mo=function(e,t){return Lo=e,null!=t&&"number"==typeof t.timeout&&(Ho=jo()+t.timeout),Vo||(Vo=!0,requestAnimationFrame(qo)),0},Do=function(){Lo=null,Uo=!1,Ho=-1}}else Mo=window.requestIdleCallback,Do=window.cancelIdleCallback;else Mo=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0}})})},Do=function(e){clearTimeout(e)};var $o=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Qo={},Go={},Yo={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"},Xo=void 0,Jo=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e}(function(e,t){if(e.namespaceURI!==Yo.svg||"innerHTML"in e)e.innerHTML=t;else{for(Xo=Xo||document.createElement("div"),Xo.innerHTML="<svg>"+t+"</svg>",t=Xo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}),Zo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ea=["Webkit","ms","Moz","O"];Object.keys(Zo).forEach(function(e){ea.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zo[t]=Zo[e]})});var ta=Cn({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),na=Yo.html,ra=xn.thatReturns(""),oa={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},aa=Object.freeze({createElement:un,createTextNode:ln,setInitialProperties:cn,diffProperties:sn,updateProperties:fn,diffHydratedProperties:pn,diffHydratedText:dn,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Bt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var a=S(o);a?void 0:r("90"),ie(o),Bt(o,a)}}}break;case"textarea":Xt(e,n);break;case"select":t=n.value,null!=t&&$t(e,!!n.multiple,t,!1)}}});Pr.injectFiberControlledHostComponent(aa);var ia=null,ua=null,la=Ro({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:en(null,"");break;default:t=8===t?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=en(e,t)}return e},getChildHostContext:function(e,t){return en(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){ia=Br;var e=En();if(Le(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,u=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(i=a+r),s!==o||0!==n&&3!==s.nodeType||(u=a+n),3===s.nodeType&&(a+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(i=a),f===o&&++c===n&&(u=a),null!==(p=s.nextSibling))break;s=f,f=s.parentNode}s=p}t=-1===i||-1===u?null:{start:i,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;ua={focusedElem:e,selectionRange:t},Pe(!1)},resetAfterCommit:function(){var e=ua,t=En(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&Sn(document.documentElement,n)){if(Le(n))if(t=r.start,e=r.end,void 0===e&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[D()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Fe(n,e);var a=Fe(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(_n(n),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}ua=null,Pe(ia),ia=null},createInstance:function(e,t,n,r,o){return e=un(e,t,n,r),e[ar]=o,e[ir]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){cn(e,t,n,r);e:{switch(t){case"button":case"input":case"select":case"textarea":e=!!n.autoFocus;break e}e=!1}return e},prepareUpdate:function(e,t,n,r,o){return sn(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return e=ln(e,t),e[ar]=r,e},now:jo,mutation:{commitMount:function(e){e.focus()},commitUpdate:function(e,t,n,r,o){e[ir]=o,fn(e,t,n,r,o)},resetTextContent:function(e){e.textContent=""},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[ar]=a,e[ir]=n,pn(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[ar]=n,dn(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Mo,cancelDeferredCallback:Do,useSyncScheduling:!0});J=la.batchedUpdates,gn.prototype.render=function(e,t){la.updateContainer(e,this._reactRootContainer,null,t)},gn.prototype.unmount=function(e){la.updateContainer(null,this._reactRootContainer,null,e)};var ca={createPortal:yn,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return t?la.findHostInstance(t):void("function"==typeof e.render?r("188"):r("213",Object.keys(e)))},hydrate:function(e,t,n){return vn(null,e,t,!0,n)},render:function(e,t,n){return vn(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,o){return null==e||void 0===e._reactInternalFiber?r("38"):void 0,vn(e,t,n,!1,o)},unmountComponentAtNode:function(e){return hn(e)?void 0:r("40"),!!e._reactRootContainer&&(la.unbatchedUpdates(function(){vn(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:yn,unstable_batchedUpdates:Z,unstable_deferredUpdates:la.deferredUpdates,flushSync:la.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:rr,EventPluginRegistry:Xn,EventPropagators:lr,ReactControlledComponent:Nr,ReactDOMComponentTree:ur,ReactDOMEventListener:Wr}};la.injectIntoDevTools({findFiberByHostInstance:E,bundleType:0,version:"16.2.0",rendererPackageName:"react-dom"});var sa=Object.freeze({default:ca}),fa=sa&&ca||sa;e.exports=fa.default?fa.default:fa},function(e,t){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};e.exports=r},function(e,t,n){"use strict";var r=n(6),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:r}},registerDefault:function(){}};e.exports=o},function(e,t){"use strict";function n(e){if(e=e||("undefined"!=typeof document?document:void 0),"undefined"==typeof e)return null;try{return e.activeElement||e.body}catch(t){return e.body}}e.exports=n},function(e,t){"use strict";function n(e,t){return e===t?0!==e||0!==t||1/e===1/t:e!==e&&t!==t}function r(e,t){if(n(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),a=Object.keys(t);if(r.length!==a.length)return!1;for(var i=0;i<r.length;i++)if(!o.call(t,r[i])||!n(e[r[i]],t[r[i]]))return!1;return!0}var o=Object.prototype.hasOwnProperty;e.exports=r},function(e,t,n){"use strict";function r(e,t){return!(!e||!t)&&(e===t||!o(e)&&(o(t)?r(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}var o=n(14);e.exports=r},function(e,t,n){"use strict";function r(e){return o(e)&&3==e.nodeType}var o=n(15);e.exports=r},function(e,t){"use strict";function n(e){var t=e?e.ownerDocument||e:document,n=t.defaultView||window;return!(!e||!("function"==typeof n.Node?e instanceof n.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}e.exports=n},function(e,t){"use strict";function n(e){try{e.focus()}catch(e){}}e.exports=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(2),c=r(l),s=n(18),f=r(s),p=n(30),d=r(p),h=n(58),m=r(h),v=n(93),y=r(v),g=n(95),b=r(g),w=n(96),C=function(e){function t(e){o(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={videos:[],selectedVideo:null},n.handleVideoSelect=n.handleVideoSelect.bind(n),n.handleSearchTermChange=n.handleSearchTermChange.bind(n),n.videoSearch=(0,f.default)(n.videoSearch.bind(n),300),n.videoSearch(w.DEFAULT_SEARCH),n}return i(t,e),u(t,[{key:"videoSearch",value:function(e){var t=this;return(0,d.default)(w.API_ROOT_URL,w.API_KEY,e).then(function(e){t.setState({videos:e,selectedVideo:e[0]})})}},{key:"handleVideoSelect",value:function(e){this.setState({selectedVideo:e})}},{key:"handleSearchTermChange",value:function(e){this.videoSearch(e)}},{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement(b.default,{onSearchTermChange:this.handleSearchTermChange}),c.default.createElement("div",{className:"row"},c.default.createElement(m.default,{video:this.state.selectedVideo}),c.default.createElement(y.default,{onVideoSelect:this.handleVideoSelect,videos:this.state.videos})))}}]),t}(l.Component);t.default=C},function(e,t,n){function r(e,t,n){function r(t){var n=g,r=b;return g=b=void 0,E=t,C=e.apply(r,n)}function s(e){return E=e,x=setTimeout(d,t),T?r(e):C}function f(e){var n=e-k,r=e-E,o=t-n;return S?c(o,w-r):o}function p(e){var n=e-k,r=e-E;return void 0===k||n>=t||n<0||S&&r>=w}function d(){var e=a();return p(e)?h(e):void(x=setTimeout(d,f(e)))}function h(e){return x=void 0,_&&g?r(e):(g=b=void 0,C)}function m(){void 0!==x&&clearTimeout(x),E=0,g=k=b=x=void 0}function v(){return void 0===x?C:h(a())}function y(){var e=a(),n=p(e);if(g=arguments,b=this,k=e,n){if(void 0===x)return s(k);if(S)return x=setTimeout(d,t),r(k)}return void 0===x&&(x=setTimeout(d,t)),C}var g,b,w,C,x,k,E=0,T=!1,S=!1,_=!0;if("function"!=typeof e)throw new TypeError(u);return t=i(t)||0,o(n)&&(T=!!n.leading,S="maxWait"in n,w=S?l(i(n.maxWait)||0,t):w,_="trailing"in n?!!n.trailing:_),y.cancel=m,y.flush=v,y}var o=n(19),a=n(20),i=n(23),u="Expected a function",l=Math.max,c=Math.min;e.exports=r},function(e,t){function n(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}e.exports=n},function(e,t,n){var r=n(21),o=function(){return r.Date.now()};e.exports=o},function(e,t,n){var r=n(22),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(t,function(){return this}())},function(e,t,n){function r(e){if("number"==typeof e)return e;if(a(e))return i;if(o(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=o(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(u,"");var n=c.test(e);return n||s.test(e)?f(e.slice(2),n?2:8):l.test(e)?i:+e}var o=n(19),a=n(24),i=NaN,u=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,s=/^0o[0-7]+$/i,f=parseInt;e.exports=r},function(e,t,n){function r(e){return"symbol"==typeof e||a(e)&&o(e)==i}var o=n(25),a=n(29),i="[object Symbol]";e.exports=r},function(e,t,n){function r(e){return null==e?void 0===e?l:u:c&&c in Object(e)?a(e):i(e)}var o=n(26),a=n(27),i=n(28),u="[object Null]",l="[object Undefined]",c=o?o.toStringTag:void 0;
e.exports=r},function(e,t,n){var r=n(21),o=r.Symbol;e.exports=o},function(e,t,n){function r(e){var t=i.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var o=u.call(e);return r&&(t?e[l]=n:delete e[l]),o}var o=n(26),a=Object.prototype,i=a.hasOwnProperty,u=a.toString,l=o?o.toStringTag:void 0;e.exports=r},function(e,t){function n(e){return o.call(e)}var r=Object.prototype,o=r.toString;e.exports=n},function(e,t){function n(e){return null!=e&&"object"==typeof e}e.exports=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(31),a=r(o),i=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(!e||!t)throw new Error("expected api url and key");var r={part:"snippet",key:t,q:n,type:"video"};return a.default.get(e,{params:r}).then(function(e){return e.data.items})};t.default=i},function(e,t,n){e.exports=n(32)},function(e,t,n){"use strict";function r(e){var t=new i(e),n=a(i.prototype.request,t);return o.extend(n,i.prototype,t),o.extend(n,t),n}var o=n(33),a=n(34),i=n(36),u=n(37),l=r(u);l.Axios=i,l.create=function(e){return r(o.merge(u,e))},l.Cancel=n(55),l.CancelToken=n(56),l.isCancel=n(52),l.all=function(e){return Promise.all(e)},l.spread=n(57),e.exports=l,e.exports.default=l},function(e,t,n){"use strict";function r(e){return"[object Array]"===E.call(e)}function o(e){return"[object ArrayBuffer]"===E.call(e)}function a(e){return"undefined"!=typeof FormData&&e instanceof FormData}function i(e){var t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer}function u(e){return"string"==typeof e}function l(e){return"number"==typeof e}function c(e){return"undefined"==typeof e}function s(e){return null!==e&&"object"==typeof e}function f(e){return"[object Date]"===E.call(e)}function p(e){return"[object File]"===E.call(e)}function d(e){return"[object Blob]"===E.call(e)}function h(e){return"[object Function]"===E.call(e)}function m(e){return s(e)&&h(e.pipe)}function v(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}function y(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function g(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)}function b(e,t){if(null!==e&&"undefined"!=typeof e)if("object"!=typeof e&&(e=[e]),r(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}function w(){function e(e,n){"object"==typeof t[n]&&"object"==typeof e?t[n]=w(t[n],e):t[n]=e}for(var t={},n=0,r=arguments.length;n<r;n++)b(arguments[n],e);return t}function C(e,t,n){return b(t,function(t,r){n&&"function"==typeof t?e[r]=x(t,n):e[r]=t}),e}var x=n(34),k=n(35),E=Object.prototype.toString;e.exports={isArray:r,isArrayBuffer:o,isBuffer:k,isFormData:a,isArrayBufferView:i,isString:u,isNumber:l,isObject:s,isUndefined:c,isDate:f,isFile:p,isBlob:d,isFunction:h,isStream:m,isURLSearchParams:v,isStandardBrowserEnv:g,forEach:b,merge:w,extend:C,trim:y}},function(e,t){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function r(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */
e.exports=function(e){return null!=e&&(n(e)||r(e)||!!e._isBuffer)}},function(e,t,n){"use strict";function r(e){this.defaults=e,this.interceptors={request:new i,response:new i}}var o=n(37),a=n(33),i=n(49),u=n(50);r.prototype.request=function(e){"string"==typeof e&&(e=a.merge({url:arguments[0]},arguments[1])),e=a.merge(o,{method:"get"},this.defaults,e),e.method=e.method.toLowerCase();var t=[u,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},a.forEach(["delete","get","head","options"],function(e){r.prototype[e]=function(t,n){return this.request(a.merge(n||{},{method:e,url:t}))}}),a.forEach(["post","put","patch"],function(e){r.prototype[e]=function(t,n,r){return this.request(a.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=r},function(e,t,n){(function(t){"use strict";function r(e,t){!a.isUndefined(e)&&a.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function o(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(40):"undefined"!=typeof t&&(e=n(40)),e}var a=n(33),i=n(39),u={"Content-Type":"application/x-www-form-urlencoded"},l={adapter:o(),transformRequest:[function(e,t){return i(t,"Content-Type"),a.isFormData(e)||a.isArrayBuffer(e)||a.isBuffer(e)||a.isStream(e)||a.isFile(e)||a.isBlob(e)?e:a.isArrayBufferView(e)?e.buffer:a.isURLSearchParams(e)?(r(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):a.isObject(e)?(r(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},a.forEach(["delete","get","head"],function(e){l.headers[e]={}}),a.forEach(["post","put","patch"],function(e){l.headers[e]=a.merge(u)}),e.exports=l}).call(t,n(38))},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(s===setTimeout)return setTimeout(e,0);if((s===n||!s)&&setTimeout)return s=setTimeout,setTimeout(e,0);try{return s(e,0)}catch(t){try{return s.call(null,e,0)}catch(t){return s.call(this,e,0)}}}function a(e){if(f===clearTimeout)return clearTimeout(e);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function i(){m&&d&&(m=!1,d.length?h=d.concat(h):v=-1,h.length&&u())}function u(){if(!m){var e=o(i);m=!0;for(var t=h.length;t;){for(d=h,h=[];++v<t;)d&&d[v].run();v=-1,t=h.length}d=null,m=!1,a(e)}}function l(e,t){this.fun=e,this.array=t}function c(){}var s,f,p=e.exports={};!function(){try{s="function"==typeof setTimeout?setTimeout:n}catch(e){s=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(e){f=r}}();var d,h=[],m=!1,v=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new l(e,t)),1!==h.length||m||o(u)},l.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=c,p.addListener=c,p.once=c,p.off=c,p.removeListener=c,p.removeAllListeners=c,p.emit=c,p.prependListener=c,p.prependOnceListener=c,p.listeners=function(e){return[]},p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(33);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(33),o=n(41),a=n(44),i=n(45),u=n(46),l=n(42),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(47);e.exports=function(e){return new Promise(function(t,s){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||u(e.url)||(d=new window.XDomainRequest,h="onload",m=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var v=e.auth.username||"",y=e.auth.password||"";p.Authorization="Basic "+c(v+":"+y)}if(d.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||m)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?i(d.getAllResponseHeaders()):null,r=e.responseType&&"text"!==e.responseType?d.response:d.responseText,a={data:r,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,s,a),d=null}},d.onerror=function(){s(l("Network Error",e,null,d)),d=null},d.ontimeout=function(){s(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var g=n(48),b=(e.withCredentials||u(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;b&&(p[e.xsrfHeaderName]=b)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){"undefined"==typeof f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),s(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,t,n){"use strict";var r=n(42);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(43);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";function r(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var o=n(33);e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(o.isURLSearchParams(t))a=t.toString();else{var i=[];o.forEach(t,function(e,t){null!==e&&"undefined"!=typeof e&&(o.isArray(e)?t+="[]":e=[e],o.forEach(e,function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),i.push(r(t)+"="+r(e))}))}),a=i.join("&")}return a&&(e+=(e.indexOf("?")===-1?"?":"&")+a),e}},function(e,t,n){"use strict";var r=n(33),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;"set-cookie"===t?i[t]=(i[t]?i[t]:[]).concat([n]):i[t]=i[t]?i[t]+", "+n:n}}),i):i}},function(e,t,n){"use strict";var r=n(33);e.exports=r.isStandardBrowserEnv()?function(){function e(e){var t=e;return n&&(o.setAttribute("href",t),t=o.href),o.setAttribute("href",t),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}var t,n=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");return t=e(window.location.href),function(n){var o=r.isString(n)?e(n):n;return o.protocol===t.protocol&&o.host===t.host}}():function(){return function(){return!0}}()},function(e,t){"use strict";function n(){this.message="String contains an invalid character"}function r(e){for(var t,r,a=String(e),i="",u=0,l=o;a.charAt(0|u)||(l="=",u%1);i+=l.charAt(63&t>>8-u%1*8)){if(r=a.charCodeAt(u+=.75),r>255)throw new n;t=t<<8|r}return i}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.prototype=new Error,n.prototype.code=5,n.prototype.name="InvalidCharacterError",e.exports=r},function(e,t,n){"use strict";var r=n(33);e.exports=r.isStandardBrowserEnv()?function(){return{write:function(e,t,n,o,a,i){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(a)&&u.push("domain="+a),i===!0&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},function(e,t,n){"use strict";function r(){this.handlers=[]}var o=n(33);r.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){o.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=r},function(e,t,n){"use strict";function r(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var o=n(33),a=n(51),i=n(52),u=n(37),l=n(53),c=n(54);e.exports=function(e){r(e),e.baseURL&&!l(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),o.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]});var t=e.adapter||u.adapter;return t(e).then(function(t){return r(e),t.data=a(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(r(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(33);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,n){"use strict";function r(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new o(e),t(n.reason))})}var o=n(55);r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var e,t=new r(function(t){e=t});return{token:t,cancel:e}},e.exports=r},function(e,t){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),a=r(o),i=n(59),u=r(i),l=n(63),c=r(l),s=function(e){var t=e.video,n=void 0===t?{}:t;if((0,c.default)(n))return a.default.createElement("div",null,"Loading...");var r=n.id.videoId,o="https://www.youtube.com/embed/"+r;return a.default.createElement("div",{className:"video-detail col-md-8"},a.default.createElement("div",{className:"embed-responsive embed-responsive-16by9"},a.default.createElement("iframe",{title:"video-detail-window",className:"embed-responsive-item",src:o})),a.default.createElement("div",{className:"details"},a.default.createElement("div",null,n.snippet.title),a.default.createElement("div",null,n.snippet.description)))};s.propTypes={video:u.default.shape({snippet:u.default.shape({title:u.default.string,description:u.default.string})})},s.defaultProps={video:{}},t.default=s},function(e,t,n){e.exports=n(60)()},function(e,t,n){"use strict";var r=n(6),o=n(61),a=n(62);e.exports=function(){function e(e,t,n,r,i,u){u!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";function r(e,t,n,r,a,i,u,l){if(o(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,a,i,u,l],f=0;c=new Error(t.replace(/%s/g,function(){return s[f++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var o=function(e){};e.exports=r},function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";e.exports=n},function(e,t,n){function r(e){if(null==e)return!0;if(l(e)&&(u(e)||"string"==typeof e||"function"==typeof e.splice||c(e)||f(e)||i(e)))return!e.length;var t=a(e);if(t==p||t==d)return!e.size;if(s(e))return!o(e).length;for(var n in e)if(m.call(e,n))return!1;return!0}var o=n(64),a=n(68),i=n(81),u=n(83),l=n(84),c=n(86),s=n(65),f=n(89),p="[object Map]",d="[object Set]",h=Object.prototype,m=h.hasOwnProperty;e.exports=r},function(e,t,n){function r(e){if(!o(e))return a(e);var t=[];for(var n in Object(e))u.call(e,n)&&"constructor"!=n&&t.push(n);return t}var o=n(65),a=n(66),i=Object.prototype,u=i.hasOwnProperty;e.exports=r},function(e,t){function n(e){var t=e&&e.constructor,n="function"==typeof t&&t.prototype||r;return e===n}var r=Object.prototype;e.exports=n},function(e,t,n){var r=n(67),o=r(Object.keys,Object);e.exports=o},function(e,t){function n(e,t){return function(n){return e(t(n))}}e.exports=n},function(e,t,n){var r=n(69),o=n(77),a=n(78),i=n(79),u=n(80),l=n(25),c=n(75),s="[object Map]",f="[object Object]",p="[object Promise]",d="[object Set]",h="[object WeakMap]",m="[object DataView]",v=c(r),y=c(o),g=c(a),b=c(i),w=c(u),C=l;(r&&C(new r(new ArrayBuffer(1)))!=m||o&&C(new o)!=s||a&&C(a.resolve())!=p||i&&C(new i)!=d||u&&C(new u)!=h)&&(C=function(e){var t=l(e),n=t==f?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case v:return m;case y:return s;case g:return p;case b:return d;case w:return h}return t}),e.exports=C},function(e,t,n){var r=n(70),o=n(21),a=r(o,"DataView");e.exports=a},function(e,t,n){function r(e,t){var n=a(e,t);return o(n)?n:void 0}var o=n(71),a=n(76);e.exports=r},function(e,t,n){function r(e){if(!i(e)||a(e))return!1;var t=o(e)?h:c;return t.test(u(e))}var o=n(72),a=n(73),i=n(19),u=n(75),l=/[\\^$.*+?()[\]{}|]/g,c=/^\[object .+?Constructor\]$/,s=Function.prototype,f=Object.prototype,p=s.toString,d=f.hasOwnProperty,h=RegExp("^"+p.call(d).replace(l,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=r},function(e,t,n){function r(e){if(!a(e))return!1;var t=o(e);return t==u||t==l||t==i||t==c}var o=n(25),a=n(19),i="[object AsyncFunction]",u="[object Function]",l="[object GeneratorFunction]",c="[object Proxy]";e.exports=r},function(e,t,n){function r(e){return!!a&&a in e}var o=n(74),a=function(){var e=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();e.exports=r},function(e,t,n){var r=n(21),o=r["__core-js_shared__"];e.exports=o},function(e,t){function n(e){if(null!=e){try{return o.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var r=Function.prototype,o=r.toString;e.exports=n},function(e,t){function n(e,t){return null==e?void 0:e[t]}e.exports=n},function(e,t,n){var r=n(70),o=n(21),a=r(o,"Map");e.exports=a},function(e,t,n){var r=n(70),o=n(21),a=r(o,"Promise");e.exports=a},function(e,t,n){var r=n(70),o=n(21),a=r(o,"Set");e.exports=a},function(e,t,n){var r=n(70),o=n(21),a=r(o,"WeakMap");e.exports=a},function(e,t,n){var r=n(82),o=n(29),a=Object.prototype,i=a.hasOwnProperty,u=a.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(e){return o(e)&&i.call(e,"callee")&&!u.call(e,"callee")};e.exports=l},function(e,t,n){function r(e){return a(e)&&o(e)==i}var o=n(25),a=n(29),i="[object Arguments]";e.exports=r},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){function r(e){return null!=e&&a(e.length)&&!o(e)}var o=n(72),a=n(85);e.exports=r},function(e,t){function n(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}var r=9007199254740991;e.exports=n},function(e,t,n){(function(e){var r=n(21),o=n(88),a="object"==typeof t&&t&&!t.nodeType&&t,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,u=i&&i.exports===a,l=u?r.Buffer:void 0,c=l?l.isBuffer:void 0,s=c||o;e.exports=s}).call(t,n(87)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){function n(){return!1}e.exports=n},function(e,t,n){var r=n(90),o=n(91),a=n(92),i=a&&a.isTypedArray,u=i?o(i):r;e.exports=u},function(e,t,n){function r(e){return i(e)&&a(e.length)&&!!I[o(e)]}var o=n(25),a=n(85),i=n(29),u="[object Arguments]",l="[object Array]",c="[object Boolean]",s="[object Date]",f="[object Error]",p="[object Function]",d="[object Map]",h="[object Number]",m="[object Object]",v="[object RegExp]",y="[object Set]",g="[object String]",b="[object WeakMap]",w="[object ArrayBuffer]",C="[object DataView]",x="[object Float32Array]",k="[object Float64Array]",E="[object Int8Array]",T="[object Int16Array]",S="[object Int32Array]",_="[object Uint8Array]",O="[object Uint8ClampedArray]",P="[object Uint16Array]",N="[object Uint32Array]",I={};I[x]=I[k]=I[E]=I[T]=I[S]=I[_]=I[O]=I[P]=I[N]=!0,I[u]=I[l]=I[w]=I[c]=I[C]=I[s]=I[f]=I[p]=I[d]=I[h]=I[m]=I[v]=I[y]=I[g]=I[b]=!1,e.exports=r},function(e,t){function n(e){return function(t){return e(t)}}e.exports=n},function(e,t,n){(function(e){var r=n(22),o="object"==typeof t&&t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o,u=i&&r.process,l=function(){try{return u&&u.binding&&u.binding("util")}catch(e){}}();e.exports=l}).call(t,n(87)(e))},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),a=r(o),i=n(59),u=r(i),l=n(94),c=r(l),s=function(e){var t=e.videos,n=e.onVideoSelect,r=t.map(function(e){return a.default.createElement(c.default,{onVideoSelect:n,key:e.etag,video:e})});return a.default.createElement("ul",{className:"col-md-4 list-group"},r)};s.propTypes={videos:u.default.arrayOf(u.default.shape({etag:u.default.string})),onVideoSelect:u.default.func},s.defaultProps={videos:[],onVideoSelect:function(){}},t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(2),c=r(l),s=n(59),f=r(s),p=function(e){function t(){o(this,t);var e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.handleClick=e.handleClick.bind(e),e}return i(t,e),u(t,[{key:"handleClick",value:function(){var e=this.props,t=e.video,n=e.onVideoSelect;n(t)}},{key:"render",value:function(){var e=this.props.video,t=e.snippet.thumbnails.default.url;return c.default.createElement("li",{onClick:this.handleClick,className:"list-group-item"},c.default.createElement("div",{className:"video-list media"},c.default.createElement("div",{className:"media-left"},c.default.createElement("img",{alt:"",className:"media-object",src:t})),c.default.createElement("div",{className:"media-body"},c.default.createElement("div",{className:"media-hading"},e.snippet.title))))}}]),t}(l.PureComponent);p.propTypes={video:f.default.shape({snippet:f.default.shape({thumbnails:f.default.object})}).isRequired,onVideoSelect:f.default.func.isRequired},t.default=p},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(2),c=r(l),s=n(59),f=r(s),p=function(e){function t(e){o(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onInputChange=n.onInputChange.bind(n),n.state={term:""},n}return i(t,e),u(t,[{key:"onInputChange",value:function(e){var t=e.target.value;this.setState({term:t}),this.props.onSearchTermChange(t)}},{key:"render",value:function(){return c.default.createElement("div",{className:"search-bar"},c.default.createElement("input",{value:this.state.term,onChange:this.onInputChange}))}}]),t}(l.PureComponent);p.propTypes={onSearchTermChange:f.default.func},p.defaultProps={onSearchTermChange:function(){}},t.default=p},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.API_ROOT_URL="https://www.googleapis.com/youtube/v3/search",t.API_KEY="AIzaSyA-Fcdl_x7Rp1ez384VQkuuaSIUUXtYVqQ",t.DEFAULT_SEARCH="tiny houses"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA1YWJhNTQ5NTg5ZGRhOWEwOGUzZSIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanN4Iiwid2VicGFjazovLy8uL34vcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2ZvY3VzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzeCIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvZmV0Y2gtdmlkZW9zLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL34vaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZpZGVvRGV0YWlsLmpzeCIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9sb2Rhc2gvc3R1YkZhbHNlLmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovLy8uL34vbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9WaWRlb0xpc3QuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZpZGVvTGlzdEl0ZW0uanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NlYXJjaEJhci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0RG9tIiwiX3JlYWN0RG9tMiIsIl9BcHAiLCJfQXBwMiIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ5IiwiYSIsImIiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRXJyb3IiLCJuYW1lIiwiZnJhbWVzVG9Qb3AiLCJBIiwidGhpcyIsInByb3BzIiwiY29udGV4dCIsInJlZnMiLCJuIiwidXBkYXRlciIsInoiLCJCIiwiQyIsIkUiLCJKIiwiZCIsImciLCJrIiwicmVmIiwia2V5IiwiSCIsIkkiLCJoYXNPd25Qcm9wZXJ0eSIsImYiLCJjaGlsZHJlbiIsImgiLCJBcnJheSIsImwiLCJkZWZhdWx0UHJvcHMiLCIkJHR5cGVvZiIsInIiLCJ0eXBlIiwiX293bmVyIiwiRyIsImN1cnJlbnQiLCJLIiwiZXNjYXBlIiwiPSIsIjoiLCJyZXBsYWNlIiwiTiIsIk0iLCJwb3AiLCJyZXN1bHQiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY291bnQiLCJPIiwicHVzaCIsIlAiLCJ0IiwidSIsInYiLCJRIiwiaXNBcnJheSIsIngiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiT2JqZWN0Iiwia2V5cyIsImpvaW4iLCJ0b1N0cmluZyIsIlIiLCJTIiwiVCIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJMIiwicSIsIlN5bWJvbCIsInciLCJpdGVyYXRvciIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJwcm90b3R5cGUiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIkQiLCJjb25zdHJ1Y3RvciIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiRiIsInVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCIsIl9fc2VsZiIsIl9fc291cmNlIiwiVSIsIkNoaWxkcmVuIiwibWFwIiwiZm9yRWFjaCIsInRoYXRSZXR1cm5zTnVsbCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsInVuc3RhYmxlX0FzeW5jQ29tcG9uZW50IiwiRnJhZ21lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiYmluZCIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJhc3NpZ24iLCJWIiwiZnJlZXplIiwiVyIsInRvT2JqZWN0IiwidmFsIiwidW5kZWZpbmVkIiwiVHlwZUVycm9yIiwic2hvdWxkVXNlTmF0aXZlIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJpIiwiZnJvbUNoYXJDb2RlIiwib3JkZXIyIiwidGVzdDMiLCJzcGxpdCIsImxldHRlciIsImVyciIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJzIiwiZW1wdHlPYmplY3QiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc1RoaXMiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImNvbnNvbGUiLCJlcnJvciIsInBhIiwidmEiLCJvYSIsIndhIiwiaGFzQm9vbGVhblZhbHVlIiwiaGFzU3RyaW5nQm9vbGVhblZhbHVlIiwiaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSIsInRvTG93ZXJDYXNlIiwic2xpY2UiLCJ1YSIsIklhIiwidG9VcHBlckNhc2UiLCJKYSIsIl9oYXNDYXVnaHRFcnJvciIsIl9jYXVnaHRFcnJvciIsImFwcGx5IiwiS2EiLCJfaGFzUmV0aHJvd0Vycm9yIiwiX3JldGhyb3dFcnJvciIsIk5hIiwiTGEiLCJNYSIsImluZGV4T2YiLCJPYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwiUGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsIlFhIiwicmVnaXN0cmF0aW9uTmFtZSIsIlJhIiwiU2EiLCJkZXBlbmRlbmNpZXMiLCJUYSIsIlVhIiwiWmEiLCJjdXJyZW50VGFyZ2V0IiwiWWEiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCIkYSIsImNvbmNhdCIsImFiIiwiY2IiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJkYiIsImdiIiwiaWIiLCJzdGF0ZU5vZGUiLCJXYSIsImRpc2FibGVkIiwiamIiLCJrYiIsImJiIiwibGIiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJwYiIsInBhcmVudE5vZGUiLCJ0YWciLCJxYiIsInJiIiwib2IiLCJ0YiIsInViIiwidmIiLCJkaXNwYXRjaENvbmZpZyIsIndiIiwiX3RhcmdldEluc3QiLCJ4YiIsInliIiwiemIiLCJBYiIsIkJiIiwiYWx0ZXJuYXRlIiwiRWIiLCJEYiIsImNhblVzZURPTSIsImRvY3VtZW50RWxlbWVudCIsIkZiIiwiX2ZhbGxiYWNrVGV4dCIsIl9zdGFydFRleHQiLCJHYiIsIl9yb290IiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJLYiIsImV2ZW50UG9vbCIsIkxiIiwiZGVzdHJ1Y3RvciIsIkpiIiwiZ2V0UG9vbGVkIiwiTWIiLCJOYiIsImRjIiwiUGIiLCJrZXlDb2RlIiwiZWMiLCJkZXRhaWwiLCJkYXRhIiwiZ2MiLCJ3aGljaCIsImNjIiwiYWMiLCJoYyIsImZjIiwiVmIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCIkYiIsIm1jIiwiWGEiLCJqYyIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJvYyIsImtjIiwibGMiLCJwYyIsInJjIiwidGMiLCJzYyIsInZjIiwibm9kZU5hbWUiLCJ1YyIsIndjIiwic3JjRWxlbWVudCIsIndpbmRvdyIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJ5YyIsInNldEF0dHJpYnV0ZSIsInhjIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiemMiLCJBYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsInNldCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJfdmFsdWVUcmFja2VyIiwiQmMiLCJDYyIsImNoZWNrZWQiLCJFYyIsIkRjIiwiY2hhbmdlIiwiSGMiLCJJYyIsIkpjIiwiTGMiLCJGYyIsImRldGFjaEV2ZW50IiwiTWMiLCJHYyIsInByb3BlcnR5TmFtZSIsIk5jIiwiYXR0YWNoRXZlbnQiLCJPYyIsIlBjIiwiJGMiLCJiZCIsImRkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImNkIiwiZWQiLCJmZCIsImpkIiwiZGlzcGxheU5hbWUiLCJrZCIsImVmZmVjdFRhZyIsImxkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIm1kIiwibmQiLCJjaGlsZCIsInNpYmxpbmciLCJvZCIsInBkIiwicmQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInNkIiwidG9wTGV2ZWxUeXBlIiwidWQiLCJ0ZCIsImJhIiwibGlzdGVuIiwidmQiLCJ3ZCIsImNhcHR1cmUiLCJxZCIsInlkIiwiQ2QiLCJBZCIsInpkIiwiQmQiLCJIZCIsIkdkIiwiRmQiLCJFZCIsIklkIiwiZmlyc3RDaGlsZCIsIkpkIiwidGV4dENvbnRlbnQiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJLZCIsImNvbnRlbnRFZGl0YWJsZSIsIlJkIiwiUWQiLCJOZCIsImRhIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlBkIiwiZWEiLCJNZCIsInNlbGVjdCIsIk9kIiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJjaGFyQ29kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJoZSIsImdlIiwia2UiLCJsZSIsImplIiwiaWUiLCJtZSIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsImNoaWxkQ29udGV4dFR5cGVzIiwibmUiLCJYIiwib2UiLCJjdXJzb3IiLCJwZSIsImdldENoaWxkQ29udGV4dCIsInFlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJyZSIsIlkiLCJpbmRleCIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJwZW5kaW5nUHJvcHMiLCJpbnRlcm5hbENvbnRleHRUYWciLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwiaGFuZGxlciIsInhlIiwieWUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJCZSIsIkNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJ6ZSIsIm9uQ29tbWl0RmliZXJSb290IiwiQWUiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkRlIiwiRWUiLCJGZSIsImJhc2VTdGF0ZSIsImZpcnN0IiwibGFzdCIsImNhbGxiYWNrTGlzdCIsImhhc0ZvcmNlVXBkYXRlIiwiaXNJbml0aWFsaXplZCIsIkdlIiwiSGUiLCJJZSIsInBhcnRpYWxTdGF0ZSIsIkplIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYWxsYmFjayIsIktlIiwiTGUiLCJuZXh0Q2FsbGJhY2siLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwic3RhdGUiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIlhlIiwiV2UiLCJaZSIsIl9zdHJpbmdSZWYiLCIkZSIsImFmIiwiTWFwIiwiUmUiLCJWZSIsIlNlIiwiVGUiLCJVZSIsIlllIiwiZGYiLCJjZiIsImJmIiwicGVuZGluZ0NvbnRleHQiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsInVzZVN5bmNTY2hlZHVsaW5nIiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIk9iIiwiYmVnaW5Xb3JrIiwiZWxlbWVudCIsImh5ZHJhdGUiLCJiZWdpbkZhaWxlZFdvcmsiLCJlZiIsImNyZWF0ZUluc3RhbmNlIiwiY3JlYXRlVGV4dEluc3RhbmNlIiwiYXBwZW5kSW5pdGlhbENoaWxkIiwiZmluYWxpemVJbml0aWFsQ2hpbGRyZW4iLCJwcmVwYXJlVXBkYXRlIiwicGVyc2lzdGVuY2UiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJwb3BIb3N0Q29udGFpbmVyIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJtdXRhdGlvbiIsImNvbXBsZXRlV29yayIsImZmIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZCIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRBdHRhY2hSZWYiLCJjb21taXREZXRhY2hSZWYiLCJoZiIsImdmIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGV4dCIsInJlc2V0SG9zdENvbnRhaW5lciIsImpmIiwiaHlkcmF0aW9uIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImtmIiwiUWIiLCJqYSIsImlzUmVhZHlGb3JDb21taXQiLCJ5ZyIsInpnIiwiQWciLCJOZSIsIk9lIiwiU2MiLCJCZyIsIlRjIiwiQ2ciLCJEZyIsIkVnIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJjb21wb25lbnRTdGFjayIsImNhIiwiUWMiLCJoYSIsInFhIiwiRmciLCJyZyIsIkdnIiwiVWMiLCJyYSIsIlJjIiwiZWIiLCJxZyIsImhhcyIsIlNldCIsImFkZCIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29tcG9uZW50TmFtZSIsImVycm9yQm91bmRhcnkiLCJlcnJvckJvdW5kYXJ5Rm91bmQiLCJlcnJvckJvdW5kYXJ5TmFtZSIsIndpbGxSZXRyeSIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJWYyIsImthIiwiSGciLCJSYiIsIklnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsInNhIiwiRmEiLCJsYSIsIlNiIiwibWEiLCJuYSIsIldjIiwiUGUiLCJUYiIsIkpnIiwiWGMiLCJLZyIsInRpbWVvdXQiLCJmYiIsIlljIiwiVWIiLCJaYyIsImZpbmlzaGVkV29yayIsInRpbWVSZW1haW5pbmciLCJMZyIsIk1lIiwibm93Iiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiY29tcHV0ZUFzeW5jRXhwaXJhdGlvbiIsImNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIiLCJzY2hlZHVsZVdvcmsiLCJiYXRjaGVkVXBkYXRlcyIsInVuYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJkZWZlcnJlZFVwZGF0ZXMiLCJsZiIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJwZiIsIkhmIiwiR2YiLCJGZiIsIkVmIiwidGVzdCIsIklmIiwibXV0YXRpb25NZXRob2QiLCJoYXNOdW1lcmljVmFsdWUiLCJpc05hTiIsImhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlIiwiSmYiLCJtdXN0VXNlUHJvcGVydHkiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwic2V0QXR0cmlidXRlTlMiLCJLZiIsInJlbW92ZUF0dHJpYnV0ZSIsIkxmIiwic3RlcCIsIm1pbiIsIm1heCIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxWYWx1ZSIsImluaXRpYWxDaGVja2VkIiwiTWYiLCJjb250cm9sbGVkIiwiTmYiLCJPZiIsInBhcnNlRmxvYXQiLCJQZiIsIlFmIiwiYWEiLCJSZiIsIlNmIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiVGYiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiVWYiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIlZmIiwiV2YiLCJYZiIsIlpmIiwiJGYiLCJjZyIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsImZnIiwic3R5bGUiLCJkZyIsInRyaW0iLCJzZXRQcm9wZXJ0eSIsImhnIiwiZ2ciLCJpZyIsImlzIiwibGciLCJvd25lckRvY3VtZW50IiwidG9wQmx1ciIsInRvcEZvY3VzIiwidG9wQ2FuY2VsIiwidG9wQ2xvc2UiLCJEZCIsIm5nIiwiamciLCJpbm5lckhUTUwiLCJjcmVhdGVFbGVtZW50TlMiLCJvZyIsImNyZWF0ZVRleHROb2RlIiwicGciLCJtZyIsImtnIiwiX19odG1sIiwiYmciLCJvbkNsaWNrIiwib25jbGljayIsInNnIiwidGciLCJ1ZyIsInZnIiwiTmciLCJPZyIsImhhc0F0dHJpYnV0ZSIsIlBnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIloiLCJRZyIsIlJnIiwiZmEiLCJpYSIsInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsInRhIiwiTVVTVF9VU0VfUFJPUEVSVFkiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJQcm9wZXJ0aWVzIiwiRE9NQXR0cmlidXRlTmFtZXNwYWNlcyIsIkRPTUF0dHJpYnV0ZU5hbWVzIiwiRE9NTXV0YXRpb25NZXRob2RzIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJhbGxvd0Z1bGxTY3JlZW4iLCJhc3luYyIsImF1dG9Gb2N1cyIsImF1dG9QbGF5IiwiY29scyIsImNvbnRyb2xzIiwiZGVmZXIiLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImZvcm1Ob1ZhbGlkYXRlIiwiaGlkZGVuIiwibG9vcCIsIm11dGVkIiwibm9WYWxpZGF0ZSIsIm9wZW4iLCJwbGF5c0lubGluZSIsInJlYWRPbmx5IiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvd3MiLCJyb3dTcGFuIiwic2NvcGVkIiwic2VhbWxlc3MiLCJzaXplIiwic3BhbiIsInNwZWxsQ2hlY2siLCJ0YWJJbmRleCIsIml0ZW1TY29wZSIsImFjY2VwdENoYXJzZXQiLCJjbGFzc05hbWUiLCJodG1sRm9yIiwiaHR0cEVxdWl2IiwidmFsaWRpdHkiLCJiYWRJbnB1dCIsImFjdGl2ZUVsZW1lbnQiLCJFYSIsInhsaW5rIiwieG1sIiwiR2EiLCJhdXRvUmV2ZXJzZSIsImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQiLCJwcmVzZXJ2ZUFscGhhIiwieGxpbmtBY3R1YXRlIiwieGxpbmtBcmNyb2xlIiwieGxpbmtIcmVmIiwieGxpbmtSb2xlIiwieGxpbmtTaG93IiwieGxpbmtUaXRsZSIsInhsaW5rVHlwZSIsInhtbEJhc2UiLCJ4bWxMYW5nIiwieG1sU3BhY2UiLCJIYSIsImluamVjdGlvbiIsImluamVjdEVycm9yVXRpbHMiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJWYSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsImhiIiwibWIiLCJnZXRMaXN0ZW5lciIsImVucXVldWVFdmVudHMiLCJwcm9jZXNzRXZlbnRRdWV1ZSIsIm5iIiwiTWF0aCIsInJhbmRvbSIsInNiIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJDYiIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwiSGIiLCJJYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJpc1RydXN0ZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJhdWdtZW50Q2xhc3MiLCJXYiIsImRvY3VtZW50TW9kZSIsIlhiIiwiWWIiLCJvcGVyYSIsInBhcnNlSW50IiwiWmIiLCJiYyIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJpYyIsIm5jIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsInFjIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwiS2MiLCJhZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJnZXRBdHRyaWJ1dGUiLCJ2aWV3IiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwiZ2QiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsImhkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJ4ZCIsIl9lbmFibGVkIiwiX2hhbmRsZVRvcExldmVsIiwic2V0SGFuZGxlVG9wTGV2ZWwiLCJzZXRFbmFibGVkIiwiaXNFbmFibGVkIiwidHJhcEJ1YmJsZWRFdmVudCIsInRyYXBDYXB0dXJlZEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJ0b3BBYm9ydCIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZGVkRGF0YSIsInRvcExvYWQiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wUGF1c2UiLCJ0b3BQbGF5IiwidG9wUGxheWluZyIsInRvcFByb2dyZXNzIiwidG9wUmF0ZUNoYW5nZSIsInRvcFNjcm9sbCIsInRvcFNlZWtlZCIsInRvcFNlZWtpbmciLCJ0b3BTZWxlY3Rpb25DaGFuZ2UiLCJ0b3BTdGFsbGVkIiwidG9wU3VzcGVuZCIsInRvcFRleHRJbnB1dCIsInRvcFRpbWVVcGRhdGUiLCJ0b3BUb2dnbGUiLCJ0b3BUb3VjaENhbmNlbCIsInRvcFRvdWNoRW5kIiwidG9wVG91Y2hNb3ZlIiwidG9wVG91Y2hTdGFydCIsInRvcFRyYW5zaXRpb25FbmQiLCJ0b3BWb2x1bWVDaGFuZ2UiLCJ0b3BXYWl0aW5nIiwidG9wV2hlZWwiLCJMZCIsIlNkIiwib25TZWxlY3QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiY2xpcGJvYXJkRGF0YSIsIlhkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIllkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwiZGF0YVRyYW5zZmVyIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiZGUiLCJlZSIsImZlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIlFlIiwibWYiLCJuZiIsIm9mIiwicWYiLCJwZXJmb3JtYW5jZSIsInJmIiwic2YiLCJ0ZiIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJCZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiZGlkVGltZW91dCIsIkNmIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRmIiwicG9zdE1lc3NhZ2UiLCJzZXRUaW1lb3V0IiwiSW5maW5pdHkiLCJjbGVhclRpbWVvdXQiLCJZZiIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJhZyIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJlZyIsImNoYXJBdCIsInN1YnN0cmluZyIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIndnIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm0iLCJ4ZyIsIk1nIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwidW5tb3VudCIsIlNnIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2RlZmVycmVkVXBkYXRlcyIsIkV2ZW50UGx1Z2luSHViIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdENvbnRyb2xsZWRDb21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIlRnIiwiVWciLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsIkV2ZW50TGlzdGVuZXIiLCJldmVudFR5cGUiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVnaXN0ZXJEZWZhdWx0IiwiZ2V0QWN0aXZlRWxlbWVudCIsImRvYyIsImJvZHkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm9iamVjdCIsImlzTm9kZSIsIk5vZGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZGVib3VuY2UiLCJfZGVib3VuY2UyIiwiX2ZldGNoVmlkZW9zIiwiX2ZldGNoVmlkZW9zMiIsIl9WaWRlb0RldGFpbCIsIl9WaWRlb0RldGFpbDIiLCJfVmlkZW9MaXN0IiwiX1ZpZGVvTGlzdDIiLCJfU2VhcmNoQmFyIiwiX1NlYXJjaEJhcjIiLCJfY29uc3RhbnRzIiwiQXBwIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiLCJ2aWRlb3MiLCJzZWxlY3RlZFZpZGVvIiwiaGFuZGxlVmlkZW9TZWxlY3QiLCJoYW5kbGVTZWFyY2hUZXJtQ2hhbmdlIiwidmlkZW9TZWFyY2giLCJERUZBVUxUX1NFQVJDSCIsInRlcm0iLCJfdGhpczIiLCJBUElfUk9PVF9VUkwiLCJBUElfS0VZIiwidGhlbiIsInZpZGVvIiwib25TZWFyY2hUZXJtQ2hhbmdlIiwib25WaWRlb1NlbGVjdCIsImRlYm91bmNlIiwid2FpdCIsImludm9rZUZ1bmMiLCJhcmdzIiwibGFzdEFyZ3MiLCJ0aGlzQXJnIiwibGFzdFRoaXMiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmdFZGdlIiwidGltZXJJZCIsInRpbWVyRXhwaXJlZCIsImxlYWRpbmciLCJyZW1haW5pbmdXYWl0IiwidGltZVNpbmNlTGFzdENhbGwiLCJsYXN0Q2FsbFRpbWUiLCJ0aW1lU2luY2VMYXN0SW52b2tlIiwidGltZVdhaXRpbmciLCJtYXhpbmciLCJuYXRpdmVNaW4iLCJtYXhXYWl0Iiwic2hvdWxkSW52b2tlIiwidHJhaWxpbmdFZGdlIiwidHJhaWxpbmciLCJjYW5jZWwiLCJmbHVzaCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJGVU5DX0VSUk9SX1RFWFQiLCJ0b051bWJlciIsImlzT2JqZWN0IiwibmF0aXZlTWF4Iiwicm9vdCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsIkZ1bmN0aW9uIiwiZ2xvYmFsIiwiaXNTeW1ib2wiLCJOQU4iLCJvdGhlciIsInZhbHVlT2YiLCJyZVRyaW0iLCJpc0JpbmFyeSIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJyZUlzQmFkSGV4IiwiaXNPYmplY3RMaWtlIiwiYmFzZUdldFRhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIm51bGxUYWciLCJzeW1Ub1N0cmluZ1RhZyIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmdUYWciLCJpc093biIsInVubWFza2VkIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RQcm90byIsIl9heGlvcyIsIl9heGlvczIiLCJmZXRjaFZpZGVvcyIsImFwaUtleSIsInNlYXJjaFN0cmluZyIsInBhcmFtcyIsInBhcnQiLCJyZXNwb25zZSIsIml0ZW1zIiwiZGVmYXVsdENvbmZpZyIsIkF4aW9zIiwicmVxdWVzdCIsInV0aWxzIiwiZGVmYXVsdHMiLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwibWVyZ2UiLCJDYW5jZWwiLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJQcm9taXNlIiwic3ByZWFkIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0Z1bmN0aW9uIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJzdHIiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJmbiIsImFzc2lnblZhbHVlIiwiaXNCdWZmZXIiLCJpc1Nsb3dCdWZmZXIiLCJyZWFkRmxvYXRMRSIsIl9pc0J1ZmZlciIsImludGVyY2VwdG9ycyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImNvbmZpZyIsIm1ldGhvZCIsImNoYWluIiwicHJvbWlzZSIsInJlc29sdmUiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInNoaWZ0IiwicHJvY2VzcyIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJnZXREZWZhdWx0QWRhcHRlciIsImFkYXB0ZXIiLCJYTUxIdHRwUmVxdWVzdCIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImJ0b2EiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsIkF1dGhvcml6YXRpb24iLCJwYXJhbXNTZXJpYWxpemVyIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VEYXRhIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInRvSVNPU3RyaW5nIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZWQiLCJsaW5lIiwic3Vic3RyIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJvcmlnaW5VUkwiLCJ1c2VyQWdlbnQiLCJyZXF1ZXN0VVJMIiwiYmxvY2siLCJvdXRwdXQiLCJpZHgiLCJjaGFycyIsImNoYXJDb2RlQXQiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJiYXNlVVJMIiwicmVhc29uIiwiZm5zIiwiX19DQU5DRUxfXyIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwiYXJyIiwiX3Byb3BUeXBlcyIsIl9wcm9wVHlwZXMyIiwiX2lzRW1wdHkiLCJfaXNFbXB0eTIiLCJWaWRlb0RldGFpbCIsIl9yZWYiLCJfcmVmJHZpZGVvIiwidmlkZW9JZCIsInNyYyIsInNuaXBwZXQiLCJkZXNjcmlwdGlvbiIsInByb3BUeXBlcyIsInNoYXBlIiwic3RyaW5nIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJ2YWxpZGF0ZUZvcm1hdCIsImFyZ0luZGV4IiwiaXNFbXB0eSIsImlzQXJyYXlMaWtlIiwic3BsaWNlIiwiaXNUeXBlZEFycmF5IiwiaXNBcmd1bWVudHMiLCJnZXRUYWciLCJtYXBUYWciLCJzZXRUYWciLCJpc1Byb3RvdHlwZSIsImJhc2VLZXlzIiwibmF0aXZlS2V5cyIsIkN0b3IiLCJwcm90byIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJEYXRhVmlldyIsIldlYWtNYXAiLCJ0b1NvdXJjZSIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJ3ZWFrTWFwVGFnIiwiZGF0YVZpZXdUYWciLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJjdG9yU3RyaW5nIiwiZ2V0TmF0aXZlIiwiYmFzZUlzTmF0aXZlIiwiaXNNYXNrZWQiLCJwYXR0ZXJuIiwicmVJc05hdGl2ZSIsInJlSXNIb3N0Q3RvciIsInJlUmVnRXhwQ2hhciIsImZ1bmNQcm90byIsImZ1bmNUb1N0cmluZyIsImZ1bmNUYWciLCJnZW5UYWciLCJhc3luY1RhZyIsInByb3h5VGFnIiwibWFza1NyY0tleSIsImNvcmVKc0RhdGEiLCJ1aWQiLCJleGVjIiwiSUVfUFJPVE8iLCJiYXNlSXNBcmd1bWVudHMiLCJhcmdzVGFnIiwiaXNMZW5ndGgiLCJNQVhfU0FGRV9JTlRFR0VSIiwic3R1YkZhbHNlIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsIkJ1ZmZlciIsIm5hdGl2ZUlzQnVmZmVyIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZVV0aWwiLCJub2RlSXNUeXBlZEFycmF5IiwidHlwZWRBcnJheVRhZ3MiLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJudW1iZXJUYWciLCJyZWdleHBUYWciLCJzdHJpbmdUYWciLCJhcnJheUJ1ZmZlclRhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsImZyZWVQcm9jZXNzIiwiX1ZpZGVvTGlzdEl0ZW0iLCJfVmlkZW9MaXN0SXRlbTIiLCJWaWRlb0xpc3QiLCJ2aWRlb0l0ZW1zIiwiZXRhZyIsIlZpZGVvTGlzdEl0ZW0iLCJfUHVyZUNvbXBvbmVudCIsImhhbmRsZUNsaWNrIiwiX3Byb3BzIiwiaW1hZ2VVcmwiLCJ0aHVtYm5haWxzIiwiYWx0IiwiU2VhcmNoQmFyIiwib25JbnB1dENoYW5nZSIsImV2ZW50Iiwib25DaGFuZ2UiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FFLFdBQ0FFLEdBQUFKLEVBQ0FLLFFBQUEsRUFVQSxPQU5BUCxHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxHQUdBSSxFQUFBRSxRQUFBLEVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBcUNBLE9BVEFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsSUFHQVYsRUFBQSxLRE1NLFNBQVVJLEVBQVFELEVBQVNILEdBRWhDSSxFQUFPRCxRQUFVSCxFQUFvQixJQUtoQyxTQUFVSSxFQUFRRCxFQUFTSCxHQUVoQyxZQWNBLFNBQVNXLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFFBQVNGLEdFbkV4RixHQUFBRyxHQUFBZixFQUFBLEdGeURLZ0IsRUFBVUwsRUFBdUJJLEdFeER0Q0UsRUFBQWpCLEVBQUEsR0Y0REtrQixFQUFhUCxFQUF1Qk0sR0UxRHpDRSxFQUFBbkIsRUFBQSxJRjhES29CLEVBQVFULEVBQXVCUSxFRTNEcENELEdBQUFKLFFBQVNPLE9BQU9MLEVBQUFGLFFBQUFRLGNBQUFGLEVBQUFOLFFBQUEsTUFBU1MsU0FBU0MsY0FBYyxnQkZvRTFDLFNBQVVwQixFQUFRRCxFQUFTSCxHRzFFakMsWUFHQUksR0FBQUQsUUFBQUgsRUFBQSxJSG9GTSxTQUFVSSxFQUFRRCxFQUFTSDs7Ozs7Ozs7QUk5RWpDLFlBQ0EsU0FBQXlCLEdBQUFDLEdBQWMsT0FBQUMsR0FBQUMsVUFBQUMsT0FBQSxFQUFBQyxFQUFBLHlCQUFBSixFQUFBLDZFQUE0REEsRUFBQWpCLEVBQUEsRUFBb0ZBLEVBQUFrQixFQUFJbEIsSUFBQXFCLEdBQUEsV0FBQUMsbUJBQUFILFVBQUFuQixFQUFBLEdBQW9PLE1BQXpLa0IsR0FBQUssTUFBQUYsRUFBQSxrSEFBNEhILEVBQUFNLEtBQUEsc0JBQTZCTixFQUFBTyxZQUFBLEVBQWdCUCxFQUNqUSxRQUFBUSxHQUFBVCxFQUFBQyxFQUFBRyxHQUFrQk0sS0FBQUMsTUFBQVgsRUFBYVUsS0FBQUUsUUFBQVgsRUFBZVMsS0FBQUcsS0FBQUMsRUFBWUosS0FBQUssUUFBQVgsR0FBQVksRUFDL0wsUUFBQUMsR0FBQWpCLEVBQUFDLEVBQUFHLEdBQWtCTSxLQUFBQyxNQUFBWCxFQUFhVSxLQUFBRSxRQUFBWCxFQUFlUyxLQUFBRyxLQUFBQyxFQUFZSixLQUFBSyxRQUFBWCxHQUFBWSxFQUFrQixRQUFBRSxNQUF5SCxRQUFBQyxHQUFBbkIsRUFBQUMsRUFBQUcsR0FBa0JNLEtBQUFDLE1BQUFYLEVBQWFVLEtBQUFFLFFBQUFYLEVBQWVTLEtBQUFHLEtBQUFDLEVBQVlKLEtBQUFLLFFBQUFYLEdBQUFZLEVBQy9QLFFBQUFJLEdBQUFwQixFQUFBQyxFQUFBRyxHQUFrQixHQUFBckIsR0FBQXNDLEtBQVVDLEVBQUEsS0FBQUMsRUFBQSxJQUFlLFVBQUF0QixFQUFBLElBQUFsQixJQUFBLFVBQUFrQixFQUFBdUIsTUFBQUQsRUFBQXRCLEVBQUF1QixLQUFBLFNBQUF2QixFQUFBd0IsTUFBQUgsRUFBQSxHQUFBckIsRUFBQXdCLEtBQUF4QixFQUFBeUIsRUFBQTdDLEtBQUFvQixFQUFBbEIsS0FBQTRDLEVBQUFDLGVBQUE3QyxLQUFBc0MsRUFBQXRDLEdBQUFrQixFQUFBbEIsR0FBNEgsSUFBQThDLEdBQUEzQixVQUFBQyxPQUFBLENBQXlCLFFBQUEwQixFQUFBUixFQUFBUyxTQUFBMUIsTUFBc0IsTUFBQXlCLEVBQUEsQ0FBYSxPQUFBRSxHQUFBQyxNQUFBSCxHQUFBSSxFQUFBLEVBQXVCQSxFQUFBSixFQUFJSSxJQUFBRixFQUFBRSxHQUFBL0IsVUFBQStCLEVBQUEsRUFBd0JaLEdBQUFTLFNBQUFDLEVBQWEsR0FBQS9CLEtBQUFrQyxhQUFBLElBQUFuRCxJQUFBOEMsR0FBQTdCLEVBQUFrQyxhQUFBLFNBQUFiLEVBQUF0QyxLQUFBc0MsRUFBQXRDLEdBQUE4QyxFQUFBOUMsR0FBNEUsUUFBT29ELFNBQUFDLEVBQUFDLEtBQUFyQyxFQUFBeUIsSUFBQUgsRUFBQUUsSUFBQUQsRUFBQVosTUFBQVUsRUFBQWlCLE9BQUFDLEVBQUFDLFNBQXdELFFBQUFDLEdBQUF6QyxHQUFjLHNCQUFBQSxJQUFBLE9BQUFBLEtBQUFtQyxXQUFBQyxFQUM1YixRQUFBTSxHQUFBMUMsR0FBbUIsR0FBQUMsSUFBTzBDLElBQUEsS0FBQUMsSUFBQSxLQUE0QixlQUFBNUMsR0FBQTZDLFFBQUEsaUJBQUE3QyxHQUE2QyxNQUFBQyxHQUFBRCxLQUFnQyxRQUFBOEMsR0FBQTlDLEVBQUFDLEVBQUFHLEVBQUFyQixHQUFvQixHQUFBZ0UsRUFBQTVDLE9BQUEsQ0FBYSxHQUFBa0IsR0FBQTBCLEVBQUFDLEtBQXNFLE9BQXhEM0IsR0FBQTRCLE9BQUFqRCxFQUFXcUIsRUFBQTZCLFVBQUFqRCxFQUFjb0IsRUFBQThCLEtBQUEvQyxFQUFTaUIsRUFBQVQsUUFBQTdCLEVBQVlzQyxFQUFBK0IsTUFBQSxFQUFVL0IsRUFBUyxPQUFPNEIsT0FBQWpELEVBQUFrRCxVQUFBakQsRUFBQWtELEtBQUEvQyxFQUFBUSxRQUFBN0IsRUFBQXFFLE1BQUEsR0FBK0MsUUFBQUMsR0FBQXJELEdBQWNBLEVBQUFpRCxPQUFBLEtBQWNqRCxFQUFBa0QsVUFBQSxLQUFpQmxELEVBQUFtRCxLQUFBLEtBQVluRCxFQUFBWSxRQUFBLEtBQWVaLEVBQUFvRCxNQUFBLEVBQVUsR0FBQUwsRUFBQTVDLFFBQUE0QyxFQUFBTyxLQUFBdEQsR0FDM1gsUUFBQXVELEdBQUF2RCxFQUFBQyxFQUFBRyxFQUFBckIsR0FBb0IsR0FBQXNDLFNBQUFyQixFQUFlLGVBQUFxQixHQUFBLFlBQUFBLElBQUFyQixFQUFBLEtBQXlDLElBQUFzQixJQUFBLENBQVMsV0FBQXRCLEVBQUFzQixHQUFBLE1BQWlCLFFBQUFELEdBQWUsMEJBQUFDLEdBQUEsQ0FBaUMsTUFBTSxxQkFBQXRCLEVBQUFtQyxVQUFpQyxJQUFBQyxHQUFBLElBQUFvQixHQUFBLElBQUFDLEdBQUEsSUFBQUMsR0FBQXBDLEdBQUEsR0FBa0MsR0FBQUEsRUFBQSxNQUFBbEIsR0FBQXJCLEVBQUFpQixFQUFBLEtBQUFDLEVBQUEsSUFBQTBELEVBQUEzRCxFQUFBLEdBQUFDLEdBQUEsQ0FBZ0UsSUFBdkJxQixFQUFBLEVBQUlyQixFQUFBLEtBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQUFtQitCLE1BQUE0QixRQUFBNUQsR0FBQSxPQUFBdUIsR0FBQSxFQUFnQ0EsRUFBQXZCLEVBQUFHLE9BQVdvQixJQUFBLENBQUtGLEVBQUFyQixFQUFBdUIsRUFBTyxJQUFBTSxHQUFBNUIsRUFBQTBELEVBQUF0QyxFQUFBRSxFQUFlRCxJQUFBaUMsRUFBQWxDLEVBQUFRLEVBQUF6QixFQUFBckIsT0FBYyxXQUFBaUIsR0FBQSxtQkFBQUEsR0FBQTZCLEVBQUEsTUFBQUEsRUFBQWdDLEdBQUE3RCxFQUFBNkQsSUFBQTdELEVBQUEsY0FBQTZCLEVBQUEsa0JBQUFBLEtBQUEsd0JBQUFBLEdBQUEsSUFBQTdCLEVBQ25YNkIsRUFBQWhELEtBQUFtQixHQUFBdUIsRUFBQSxJQUFjRixFQUFBckIsRUFBQThELFFBQUFDLE1BQW1CMUMsSUFBQTJDLE1BQUFuQyxFQUFBNUIsRUFBQTBELEVBQUF0QyxFQUFBRSxLQUFBRCxHQUFBaUMsRUFBQWxDLEVBQUFRLEVBQUF6QixFQUFBckIsT0FBc0MsV0FBQXNDLElBQUFqQixFQUFBLEdBQUFKLEVBQUFELEVBQUEseUJBQUFLLEVBQUEscUJBQTBFNkQsT0FBQUMsS0FBQWxFLEdBQUFtRSxLQUFBLFVBQThCL0QsRUFBQSxJQUFTLE9BQUFrQixHQUFTLFFBQUFxQyxHQUFBM0QsRUFBQUMsR0FBZ0Isc0JBQUFELElBQUEsT0FBQUEsR0FBQSxNQUFBQSxFQUFBeUIsSUFBQWlCLEVBQUExQyxFQUFBeUIsS0FBQXhCLEVBQUFtRSxTQUFBLElBQThFLFFBQUFDLEdBQUFyRSxFQUFBQyxHQUFnQkQsRUFBQW1ELEtBQUF0RSxLQUFBbUIsRUFBQVksUUFBQVgsRUFBQUQsRUFBQW9ELFNBQy9TLFFBQUFrQixHQUFBdEUsRUFBQUMsRUFBQUcsR0FBa0IsR0FBQXJCLEdBQUFpQixFQUFBaUQsT0FBQTVCLEVBQUFyQixFQUFBa0QsU0FBNkJsRCxLQUFBbUQsS0FBQXRFLEtBQUFtQixFQUFBWSxRQUFBWCxFQUFBRCxFQUFBb0QsU0FBcUNwQixNQUFBNEIsUUFBQTVELEdBQUF1RSxFQUFBdkUsRUFBQWpCLEVBQUFxQixFQUFBcEIsRUFBQXdGLHFCQUFBLE1BQUF4RSxJQUFBeUMsRUFBQXpDLEtBQUFDLEVBQUFvQixJQUFBckIsRUFBQXlCLEtBQUF4QixLQUFBd0IsTUFBQXpCLEVBQUF5QixJQUFBLE9BQUF6QixFQUFBeUIsS0FBQW9CLFFBQUE0QixFQUFBLFlBQUFyRSxFQUFBSixHQUEySW1DLFNBQUFDLEVBQUFDLEtBQUFyQyxFQUFBcUMsS0FBQVosSUFBQXhCLEVBQUF1QixJQUFBeEIsRUFBQXdCLElBQUFiLE1BQUFYLEVBQUFXLE1BQUEyQixPQUFBdEMsRUFBQXNDLFNBQXFFdkQsRUFBQXVFLEtBQUF0RCxJQUFhLFFBQUF1RSxHQUFBdkUsRUFBQUMsRUFBQUcsRUFBQXJCLEVBQUFzQyxHQUFzQixHQUFBQyxHQUFBLEVBQVMsT0FBQWxCLElBQUFrQixHQUFBLEdBQUFsQixHQUFBeUMsUUFBQTRCLEVBQUEsWUFBNEN4RSxFQUFBNkMsRUFBQTdDLEVBQUFxQixFQUFBdkMsRUFBQXNDLEdBQWEsTUFBQXJCLEdBQUF1RCxFQUFBdkQsRUFBQSxHQUFBc0UsRUFBQXJFLEdBQXFCb0QsRUFBQXBELEdBUmpaLEdBQUFuQixHQUFBUixFQUFBLEdBQUF3QyxFQUFBeEMsRUFBQSxHQUFBVSxFQUFBVixFQUFBLEdBQUFvRyxFQUFBLGtCQUFBQyxnQkFBQSxJQUFBdkMsRUFBQXNDLEVBQUFDLE9BQUEsMkJBQUFuQixFQUFBa0IsRUFBQUMsT0FBQSx3QkFBQWxCLEVBQUFpQixFQUFBQyxPQUFBLDBCQUFBakIsRUFBQWdCLEVBQUFDLE9BQUEsMEJBQUFDLEVBQUFGLEVBQUFDLE9BQUEsNEJBQUFkLEVBQUEsa0JBQUFjLGdCQUFBRSxTQUViN0QsR0FBTzhELFVBQUEsV0FBcUIsVUFBU0MsbUJBQUEsYUFBZ0NDLG9CQUFBLGFBQWlDQyxnQkFBQSxhQUEyR3hFLEdBQUF5RSxVQUFBQyxvQkFBZ0MxRSxFQUFBeUUsVUFBQUUsU0FBQSxTQUFBcEYsRUFBQUMsR0FBbUMsZ0JBQUFELElBQUEsa0JBQUFBLElBQUEsTUFBQUEsRUFBQUQsRUFBQSxhQUFtRVcsS0FBQUssUUFBQWtFLGdCQUFBdkUsS0FBQVYsRUFBQUMsRUFBQSxhQUFtRFEsRUFBQXlFLFVBQUFHLFlBQUEsU0FBQXJGLEdBQW9DVSxLQUFBSyxRQUFBZ0UsbUJBQUFyRSxLQUFBVixFQUFBLGdCQUNwVmtCLEVBQUFnRSxVQUFBekUsRUFBQXlFLFNBQXdCLElBQUFJLEdBQUFyRSxFQUFBaUUsVUFBQSxHQUFBaEUsRUFBd0JvRSxHQUFBQyxZQUFBdEUsRUFBZ0JuQyxFQUFBd0csRUFBQTdFLEVBQUF5RSxXQUFpQkksRUFBQUUsc0JBQUEsQ0FBc0csSUFBQUMsR0FBQXRFLEVBQUErRCxVQUFBLEdBQUFoRSxFQUF3QnVFLEdBQUFGLFlBQUFwRSxFQUFnQnJDLEVBQUEyRyxFQUFBaEYsRUFBQXlFLFdBQWlCTyxFQUFBQyxnQ0FBQSxFQUFvQ0QsRUFBQTlGLE9BQUEsV0FBb0IsTUFBQWUsTUFBQUMsTUFBQW1CLFNBQTRCLElBQUFTLElBQU9DLFFBQUEsTUFBYWQsRUFBQXVDLE9BQUFpQixVQUFBdEQsZUFBQUQsR0FBc0NGLEtBQUEsRUFBQUQsS0FBQSxFQUFBbUUsUUFBQSxFQUFBQyxVQUFBLEdBRXZXbkIsRUFBQSxPQUFBMUIsS0FJakg4QyxHQUFPQyxVQUFVQyxJQUFBLFNBQUEvRixFQUFBQyxFQUFBRyxHQUFvQixTQUFBSixFQUFBLE1BQUFBLEVBQW9CLElBQUFqQixLQUF5QixPQUFoQndGLEdBQUF2RSxFQUFBakIsRUFBQSxLQUFBa0IsRUFBQUcsR0FBZ0JyQixHQUFTaUgsUUFBQSxTQUFBaEcsRUFBQUMsRUFBQUcsR0FBeUIsYUFBQUosS0FBb0JDLEVBQUE2QyxFQUFBLFVBQUE3QyxFQUFBRyxHQUFtQixNQUFBSixHQUFBdUQsRUFBQXZELEVBQUEsR0FBQXFFLEVBQUFwRSxPQUFxQm9ELEdBQUFwRCxLQUFLbUQsTUFBQSxTQUFBcEQsR0FBbUIsYUFBQUEsRUFBQSxFQUFBdUQsRUFBQXZELEVBQUEsR0FBQWhCLEVBQUFpSCxnQkFBQSxPQUFnREMsUUFBQSxTQUFBbEcsR0FBcUIsR0FBQUMsS0FBMkMsT0FBbENzRSxHQUFBdkUsRUFBQUMsRUFBQSxLQUFBakIsRUFBQXdGLHFCQUFrQ3ZFLEdBQVNrRyxLQUFBLFNBQUFuRyxHQUF1QyxNQUFyQnlDLEdBQUF6QyxHQUFBLE9BQUFELEVBQUEsT0FBcUJDLElBQVVvRyxVQUFBM0YsRUFBQTRGLGNBQUFwRixFQUFBcUYsd0JBQUFuRixFQUFBb0YsU0FBQTNCLEVBQUFoRixjQUFBd0IsRUFBQW9GLGFBQUEsU0FBQXhHLEVBQUFDLEVBQUFHLEdBQStHLEdBQUFyQixHQUFBRCxLQUFVa0IsRUFBQVcsT0FDM2VVLEVBQUFyQixFQUFBeUIsSUFBQUgsRUFBQXRCLEVBQUF3QixJQUFBRCxFQUFBdkIsRUFBQXNDLE1BQTJCLFVBQUFyQyxFQUFBLENBQStFLEdBQW5FLFNBQUFBLEVBQUF1QixNQUFBRixFQUFBckIsRUFBQXVCLElBQUFELEVBQUFnQixFQUFBQyxTQUFzQyxTQUFBdkMsRUFBQXdCLE1BQUFKLEVBQUEsR0FBQXBCLEVBQUF3QixLQUE2QnpCLEVBQUFxQyxNQUFBckMsRUFBQXFDLEtBQUFILGFBQUEsR0FBQUwsR0FBQTdCLEVBQUFxQyxLQUFBSCxZQUF5RCxLQUFBSCxJQUFBOUIsR0FBQXlCLEVBQUE3QyxLQUFBb0IsRUFBQThCLEtBQUFKLEVBQUFDLGVBQUFHLEtBQUFoRCxFQUFBZ0QsR0FBQSxTQUFBOUIsRUFBQThCLElBQUEsU0FBQUYsSUFBQUUsR0FBQTlCLEVBQUE4QixJQUF5RixHQUFBQSxHQUFBN0IsVUFBQUMsT0FBQSxDQUF5QixRQUFBNEIsRUFBQWhELEVBQUErQyxTQUFBMUIsTUFBc0IsTUFBQTJCLEVBQUEsQ0FBYUYsRUFBQUcsTUFBQUQsRUFBVyxRQUFBRSxHQUFBLEVBQVlBLEVBQUFGLEVBQUlFLElBQUFKLEVBQUFJLEdBQUEvQixVQUFBK0IsRUFBQSxFQUF3QmxELEdBQUErQyxTQUFBRCxFQUFhLE9BQU9NLFNBQUFDLEVBQUFDLEtBQUFyQyxFQUFBcUMsS0FBQVosSUFBQUosRUFBQUcsSUFBQUYsRUFBQVgsTUFBQTVCLEVBQUF1RCxPQUFBZixJQUFxRGtGLGNBQUEsU0FBQXpHLEdBQTJCLEdBQUFDLEdBQUFtQixFQUFBc0YsS0FBQSxLQUFBMUcsRUFBOEIsT0FBVEMsR0FBQW9DLEtBQUFyQyxFQUFTQyxHQUM3ZTBHLGVBQUFsRSxFQUFBbUUsUUFBQSxTQUFBQyxvREFBc0ZDLGtCQUFBdkUsRUFBQXdFLE9BQUFqSSxJQUE4QmtJLEVBQUEvQyxPQUFBZ0QsUUFBa0I3SCxRQUFBeUcsSUFBVXFCLEVBQUFGLEdBQUFuQixHQUFBbUIsQ0FBWXRJLEdBQUFELFFBQUF5SSxFQUFBLFFBQUFBLEVBQUEsUUFBQUEsR0o4RnRKLFNBQVV4SSxFQUFRRDs7Ozs7QUs1R3hCLFlBTUEsU0FBQTBJLEdBQUFDLEdBQ0EsVUFBQUEsR0FBQUMsU0FBQUQsRUFDQSxTQUFBRSxXQUFBLHdEQUdBLE9BQUFyRCxRQUFBbUQsR0FHQSxRQUFBRyxLQUNBLElBQ0EsSUFBQXRELE9BQUE4QyxPQUNBLFFBTUEsSUFBQVMsR0FBQSxHQUFBQyxRQUFBLE1BRUEsSUFEQUQsRUFBQSxRQUNBLE1BQUF2RCxPQUFBeUQsb0JBQUFGLEdBQUEsR0FDQSxRQUtBLFFBREFHLE1BQ0FDLEVBQUEsRUFBaUJBLEVBQUEsR0FBUUEsSUFDekJELEVBQUEsSUFBQUYsT0FBQUksYUFBQUQsS0FFQSxJQUFBRSxHQUFBN0QsT0FBQXlELG9CQUFBQyxHQUFBNUIsSUFBQSxTQUFBakYsR0FDQSxNQUFBNkcsR0FBQTdHLElBRUEsbUJBQUFnSCxFQUFBM0QsS0FBQSxJQUNBLFFBSUEsSUFBQTRELEtBSUEsT0FIQSx1QkFBQUMsTUFBQSxJQUFBaEMsUUFBQSxTQUFBaUMsR0FDQUYsRUFBQUUsT0FHQSx5QkFEQWhFLE9BQUFDLEtBQUFELE9BQUE4QyxVQUFrQ2dCLElBQUE1RCxLQUFBLElBTWhDLE1BQUErRCxHQUVGLFVBcERBLEdBQUFDLEdBQUFsRSxPQUFBa0Usc0JBQ0F2RyxFQUFBcUMsT0FBQWlCLFVBQUF0RCxlQUNBd0csRUFBQW5FLE9BQUFpQixVQUFBbUQsb0JBc0RBM0osR0FBQUQsUUFBQThJLElBQUF0RCxPQUFBOEMsT0FBQSxTQUFBdUIsRUFBQUMsR0FLQSxPQUpBQyxHQUVBQyxFQURBQyxFQUFBdkIsRUFBQW1CLEdBR0FLLEVBQUEsRUFBZ0JBLEVBQUF6SSxVQUFBQyxPQUFzQndJLElBQUEsQ0FDdENILEVBQUF2RSxPQUFBL0QsVUFBQXlJLEdBRUEsUUFBQWxILEtBQUErRyxHQUNBNUcsRUFBQS9DLEtBQUEySixFQUFBL0csS0FDQWlILEVBQUFqSCxHQUFBK0csRUFBQS9HLEdBSUEsSUFBQTBHLEVBQUEsQ0FDQU0sRUFBQU4sRUFBQUssRUFDQSxRQUFBWixHQUFBLEVBQWtCQSxFQUFBYSxFQUFBdEksT0FBb0J5SCxJQUN0Q1EsRUFBQXZKLEtBQUEySixFQUFBQyxFQUFBYixNQUNBYyxFQUFBRCxFQUFBYixJQUFBWSxFQUFBQyxFQUFBYixNQU1BLE1BQUFjLEtMMEhNLFNBQVVoSyxFQUFRRCxFQUFTSCxHTTFNakMsWUFFQSxJQUFBc0ssS0FNQWxLLEdBQUFELFFBQUFtSyxHTndOTSxTQUFVbEssRUFBUUQsR094T3hCLFlBV0EsU0FBQW9LLEdBQUFDLEdBQ0Esa0JBQ0EsTUFBQUEsSUFTQSxHQUFBQyxHQUFBLFlBRUFBLEdBQUFDLFlBQUFILEVBQ0FFLEVBQUFFLGlCQUFBSixHQUFBLEdBQ0FFLEVBQUFHLGdCQUFBTCxHQUFBLEdBQ0FFLEVBQUE5QyxnQkFBQTRDLEVBQUEsTUFDQUUsRUFBQUksZ0JBQUEsV0FDQSxNQUFBekksT0FFQXFJLEVBQUF2RSxvQkFBQSxTQUFBc0UsR0FDQSxNQUFBQSxJQUdBcEssRUFBQUQsUUFBQXNLLEdQOE9NLFNBQVVySyxFQUFRRCxFQUFTSCxHUWpSakMsWUFFQSxTQUFBOEssS0FFQSxHQUNBLG1CQUFBQyxpQ0FDQSxrQkFBQUEsZ0NBQUFELFNBY0EsSUFFQUMsK0JBQUFELFlBQ0csTUFBQWxCLEdBR0hvQixRQUFBQyxNQUFBckIsSUFPQWtCLElBQ0ExSyxFQUFBRCxRQUFBSCxFQUFBLElSMlJNLFNBQVVJLEVBQVFELEVBQVNIOzs7Ozs7OztBU2pUakMsWUFDQSxTQUFBNkMsR0FBQW5CLEdBQWMsT0FBQUMsR0FBQUMsVUFBQUMsT0FBQSxFQUFBcEIsRUFBQSx5QkFBQWlCLEVBQUEsNkVBQTREQSxFQUFBcUIsRUFBQSxFQUFvRkEsRUFBQXBCLEVBQUlvQixJQUFBdEMsR0FBQSxXQUFBc0IsbUJBQUFILFVBQUFtQixFQUFBLEdBQW9PLE1BQXpLcEIsR0FBQUssTUFBQXZCLEVBQUEsa0hBQTRIa0IsRUFBQU0sS0FBQSxzQkFBNkJOLEVBQUFPLFlBQUEsRUFBZ0JQLEVBQ2hPLFFBQUF1SixHQUFBeEosRUFBQUMsR0FBaUIsT0FBQUQsRUFBQUMsT0FHdkwsUUFBQXdKLEdBQUF6SixFQUFBQyxHQUFpQixHQUFBeUosR0FBQTlILGVBQUE1QixJQUFBLEVBQUFBLEVBQUFHLFNBQUEsTUFBQUgsRUFBQSxVQUFBQSxFQUFBLFlBQUFBLEVBQUEsVUFBQUEsRUFBQSxZQUFpRyxXQUFBQyxFQUFBLFFBQXFCLGNBQUFBLElBQWlCLG9CQUFBeUosSUFBQTlILGVBQUE1QixNQUFBLEdBQUFDLEVBQUEwSixFQUFBM0osTUFBQUMsRUFBQTJKLGlCQUFBM0osRUFBQTRKLHVCQUFBNUosRUFBQTZKLDJCQUFBOUosSUFBQStKLGNBQUFDLE1BQUEsS0FBQWhLLEVBQUEsVUFBQUEsR0FBQSxVQUFBQSxJQUFnTSxnRUFBb0UsbUJBQWtCLFFBQUEySixHQUFBM0osR0FBZSxNQUFBaUssSUFBQXJJLGVBQUE1QixHQUFBaUssR0FBQWpLLEdBQUEsS0FJNVgsUUFBQWtLLEdBQUFsSyxHQUFlLE1BQUFBLEdBQUEsR0FBQW1LLGNBSXlLLFFBQUFDLEdBQUFwSyxFQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUFqQixFQUFBeUIsRUFBQVAsRUFBQVMsRUFBQVIsR0FBK0JnQyxHQUFBOEcsaUJBQUEsRUFBcUI5RyxHQUFBK0csYUFBQSxJQUFvQixJQUFBNUYsR0FBQTFDLE1BQUFrRCxVQUFBOEUsTUFBQW5MLEtBQUFxQixVQUFBLEVBQThDLEtBQUlELEVBQUFzSyxNQUFBeEwsRUFBQTJGLEdBQWEsTUFBQWhCLEdBQVNILEdBQUErRyxhQUFBNUcsRUFBQUgsR0FBQThHLGlCQUFBLEdBQ3pZLFFBQUFHLEtBQWMsR0FBQWpILEdBQUFrSCxpQkFBQSxDQUF1QixHQUFBekssR0FBQXVELEdBQUFtSCxhQUFpRSxNQUEzQ25ILElBQUFtSCxjQUFBLEtBQXFCbkgsR0FBQWtILGtCQUFBLEVBQXNCekssR0FDdEcsUUFBQTJLLEtBQWMsR0FBQUMsR0FBQSxPQUFBNUssS0FBQTZLLElBQUEsQ0FBdUIsR0FBQTVLLEdBQUE0SyxHQUFBN0ssR0FBQWpCLEVBQUE2TCxHQUFBRSxRQUFBOUssRUFBa0QsS0FBdEIsRUFBQWpCLEVBQUEsT0FBQW9DLEVBQUEsS0FBQW5CLElBQXNCK0ssR0FBQWhNLEdBQUEsQ0FBV2tCLEVBQUErSyxjQUFBLE9BQUE3SixFQUFBLEtBQUFuQixHQUFpQytLLEdBQUFoTSxHQUFBa0IsRUFBUWxCLEVBQUFrQixFQUFBZ0wsVUFBZSxRQUFBNUosS0FBQXRDLEdBQUEsQ0FBZ0IsR0FBQXFCLEdBQUEsT0FBYXlCLEVBQUE5QyxFQUFBc0MsR0FBQUMsRUFBQXJCLEVBQUE4QixFQUFBVixDQUFtQjZKLElBQUF0SixlQUFBRyxHQUFBWixFQUFBLEtBQUFZLEdBQUEsT0FBc0NtSixHQUFBbkosR0FBQUYsQ0FBUSxJQUFBTixHQUFBTSxFQUFBc0osdUJBQWdDLElBQUE1SixFQUFBLENBQU0sSUFBQW5CLElBQUFtQixLQUFBSyxlQUFBeEIsSUFBQWdMLEVBQUE3SixFQUFBbkIsR0FBQWtCLEVBQUFTLEVBQTZDM0IsSUFBQSxNQUFLeUIsR0FBQXdKLGtCQUFBRCxFQUFBdkosRUFBQXdKLGlCQUFBL0osRUFBQVMsR0FBQTNCLEdBQUEsR0FBQUEsR0FBQSxDQUErREEsR0FBQSxPQUFBZSxFQUFBLEtBQUFFLEVBQUFyQixNQUMvWSxRQUFBb0wsR0FBQXBMLEVBQUFDLEVBQUFsQixHQUFtQnVNLEdBQUF0TCxHQUFBbUIsRUFBQSxNQUFBbkIsR0FBQSxPQUF3QnNMLEdBQUF0TCxHQUFBQyxFQUFRc0wsR0FBQXZMLEdBQUFDLEVBQUFnTCxXQUFBbE0sR0FBQXlNLGFBQStELFFBQUFDLEdBQUF6TCxHQUFlNEssR0FBQXpKLEVBQUEsY0FBbUJ5SixHQUFBNUksTUFBQWtELFVBQUE4RSxNQUFBbkwsS0FBQW1CLEdBQWlDMkssSUFBSyxRQUFBZSxHQUFBMUwsR0FBZSxHQUFBakIsR0FBQWtCLEdBQUEsQ0FBVyxLQUFBbEIsSUFBQWlCLEdBQUEsR0FBQUEsRUFBQTRCLGVBQUE3QyxHQUFBLENBQW1DLEdBQUFzQyxHQUFBckIsRUFBQWpCLEVBQVc4TCxJQUFBakosZUFBQTdDLElBQUE4TCxHQUFBOUwsS0FBQXNDLElBQUF3SixHQUFBOUwsR0FBQW9DLEVBQUEsTUFBQXBDLEdBQUEsT0FBQThMLEdBQUE5TCxHQUFBc0MsRUFBQXBCLEdBQUEsR0FBd0VBLEdBQUEwSyxJQUNuRyxRQUFBZ0IsR0FBQTNMLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBcUJwQixFQUFBRCxFQUFBcUMsTUFBQSxnQkFBMEJyQyxFQUFBNEwsY0FBQUMsR0FBQXhLLEdBQXNCa0MsR0FBQXVJLHdDQUFBN0wsRUFBQWxCLEVBQUEsT0FBQWlCLEdBQXdEQSxFQUFBNEwsY0FBQSxLQUNwVyxRQUFBRyxHQUFBL0wsRUFBQUMsR0FBd0MsTUFBdkIsT0FBQUEsRUFBQWtCLEVBQUEsYUFBdUIsTUFBQW5CLEVBQUFDLEVBQW9CK0IsTUFBQTRCLFFBQUE1RCxHQUFxQmdDLE1BQUE0QixRQUFBM0QsSUFBQUQsRUFBQXNELEtBQUFpSCxNQUFBdkssRUFBQUMsR0FBQUQsSUFBK0NBLEVBQUFzRCxLQUFBckQsR0FBVUQsR0FBU2dDLE1BQUE0QixRQUFBM0QsSUFBQUQsR0FBQWdNLE9BQUEvTCxJQUFBRCxFQUFBQyxHQUE0QyxRQUFBZ00sR0FBQWpNLEVBQUFDLEVBQUFsQixHQUFtQmlELE1BQUE0QixRQUFBNUQsS0FBQWdHLFFBQUEvRixFQUFBbEIsR0FBQWlCLEdBQUFDLEVBQUFwQixLQUFBRSxFQUFBaUIsR0FDbE4sUUFBQWtNLEdBQUFsTSxFQUFBQyxHQUFpQixHQUFBRCxFQUFBLENBQU0sR0FBQWpCLEdBQUFpQixFQUFBbU0sbUJBQUE5SyxFQUFBckIsRUFBQW9NLGtCQUFrRCxJQUFBcEssTUFBQTRCLFFBQUE3RSxHQUFBLE9BQUFxQixHQUFBLEVBQWdDQSxFQUFBckIsRUFBQW9CLFNBQUFILEVBQUFxTSx1QkFBc0NqTSxJQUFBdUwsRUFBQTNMLEVBQUFDLEVBQUFsQixFQUFBcUIsR0FBQWlCLEVBQUFqQixRQUFzQnJCLElBQUE0TSxFQUFBM0wsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFvQnJCLEdBQUFtTSxtQkFBQSxLQUEwQm5NLEVBQUFvTSxtQkFBQSxLQUEwQnBNLEVBQUFzTSxnQkFBQXRNLEVBQUF1RixZQUFBZ0gsUUFBQXZNLElBQTRDLFFBQUF3TSxHQUFBeE0sR0FBZSxNQUFBa00sR0FBQWxNLEdBQUEsR0FBZ0IsUUFBQXlNLEdBQUF6TSxHQUFlLE1BQUFrTSxHQUFBbE0sR0FBQSxHQUN2VSxRQUFBME0sR0FBQTFNLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBaUIsRUFBQTJNLFNBQWtCLEtBQUE1TixFQUFBLFdBQWtCLElBQUFzQyxHQUFBdUwsR0FBQTdOLEVBQVksS0FBQXNDLEVBQUEsV0FBa0J0QyxHQUFBc0MsRUFBQXBCLEVBQU9ELEdBQUEsT0FBQUMsR0FBWSxnTkFBQW9CLEtBQUF3TCxZQUFBN00sSUFBQXFDLEtBQUFoQixJQUFBLFdBQUFyQixHQUFBLFVBQUFBLEdBQUEsV0FBQUEsR0FBQSxhQUFBQSxJQUFrVEEsR0FBQXFCLENBQUssTUFBQXJCLEVBQVEsU0FBQUEsR0FBQSxFQUFhLE1BQUFBLEdBQUEsTUFBaUJqQixHQUFBLGtCQUFBQSxHQUFBb0MsRUFBQSxNQUFBbEIsUUFBQWxCLElBQUEsT0FDbmNBLEdBQVMsUUFBQStOLEdBQUE5TSxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQXFCLE9BQUFqQixHQUFBeUIsRUFBQSxFQUFjQSxFQUFBa0osR0FBQTVLLE9BQVkwQixJQUFBLENBQUssR0FBQVAsR0FBQXlKLEdBQUFsSixFQUFZUCxTQUFBMEosY0FBQWhMLEVBQUFDLEVBQUFsQixFQUFBc0MsTUFBQWpCLEVBQUEyTCxFQUFBM0wsRUFBQWtCLElBQTZDLE1BQUFsQixHQUFTLFFBQUEyTSxHQUFBL00sR0FBZUEsSUFBQWdOLEdBQUFqQixFQUFBaUIsR0FBQWhOLElBQWlCLFFBQUFpTixHQUFBak4sR0FBZSxHQUFBQyxHQUFBK00sRUFBU0EsSUFBQSxLQUFRL00sSUFBQUQsRUFBQWlNLEVBQUFoTSxFQUFBdU0sR0FBQVAsRUFBQWhNLEVBQUF3TSxHQUFBTyxHQUFBN0wsRUFBQSxhQUFBb0MsR0FBQTJKLHNCQUMvTCxRQUFBQyxHQUFBbk4sR0FBZSxHQUFBQSxFQUFBMkQsSUFBQSxNQUFBM0QsR0FBQTJELEdBQW9CLFFBQUExRCxPQUFhRCxFQUFBMkQsS0FBTSxJQUFBMUQsRUFBQXFELEtBQUF0RCxNQUFBb04sV0FBMEMsV0FBMUNwTixLQUFBb04sV0FBMkQsR0FBQXJPLEdBQUEsT0FBQXNDLEVBQUFyQixFQUFBMkQsR0FBb0IsUUFBQXRDLEVBQUFnTSxLQUFBLElBQUFoTSxFQUFBZ00sSUFBQSxNQUFBaE0sRUFBaUMsTUFBS3JCLElBQUFxQixFQUFBckIsRUFBQTJELEtBQVkzRCxFQUFBQyxFQUFBK0MsTUFBQWpFLEVBQUFzQyxDQUFjLE9BQUF0QyxHQUFTLFFBQUF1TyxHQUFBdE4sR0FBZSxXQUFBQSxFQUFBcU4sS0FBQSxJQUFBck4sRUFBQXFOLElBQUFyTixFQUFBMk0sY0FBMkN4TCxHQUFBLE1BQVEsUUFBQW9NLEdBQUF2TixHQUFlLE1BQUFBLEdBQUF3TixLQUFBLEtBQ3BCLFFBQUFDLEdBQUF6TixHQUFlLEVBQUFBLEtBQUEsYUFBaUJBLEdBQUEsSUFBQUEsRUFBQXFOLElBQW9CLE9BQUFyTixLQUFBLEtBQWdCLFFBQUEwTixHQUFBMU4sRUFBQUMsRUFBQWxCLEdBQW1CLE9BQUFzQyxNQUFhckIsR0FBRXFCLEVBQUFpQyxLQUFBdEQsS0FBQXlOLEVBQUF6TixFQUFtQixLQUFBQSxFQUFBcUIsRUFBQWxCLE9BQWUsRUFBQUgsS0FBTUMsRUFBQW9CLEVBQUFyQixHQUFBLFdBQUFqQixFQUFzQixLQUFBaUIsRUFBQSxFQUFRQSxFQUFBcUIsRUFBQWxCLE9BQVdILElBQUFDLEVBQUFvQixFQUFBckIsR0FBQSxVQUFBakIsR0FDbGMsUUFBQTRPLEdBQUEzTixFQUFBQyxFQUFBbEIsSUFBbUJrQixFQUFBeU0sRUFBQTFNLEVBQUFqQixFQUFBNk8sZUFBQXpDLHdCQUFBbEwsT0FBQWxCLEVBQUFvTixtQkFBQUosRUFBQWhOLEVBQUFvTixtQkFBQWxNLEdBQUFsQixFQUFBcU4sbUJBQUFMLEVBQUFoTixFQUFBcU4sbUJBQUFwTSxJQUF1SixRQUFBNk4sR0FBQTdOLEdBQWVBLEtBQUE0TixlQUFBekMseUJBQUF1QyxFQUFBMU4sRUFBQThOLFlBQUFILEVBQUEzTixHQUFvRSxRQUFBK04sR0FBQS9OLEdBQWUsR0FBQUEsS0FBQTROLGVBQUF6Qyx3QkFBQSxDQUFnRCxHQUFBbEwsR0FBQUQsRUFBQThOLFdBQW9CN04sS0FBQXdOLEVBQUF4TixHQUFBLEtBQWV5TixFQUFBek4sRUFBQTBOLEVBQUEzTixJQUMvVixRQUFBZ08sR0FBQWhPLEVBQUFDLEVBQUFsQixHQUFtQmlCLEdBQUFqQixLQUFBNk8sZUFBQXZDLG1CQUFBcEwsRUFBQXlNLEVBQUExTSxFQUFBakIsRUFBQTZPLGVBQUF2QyxxQkFBQXRNLEVBQUFvTixtQkFBQUosRUFBQWhOLEVBQUFvTixtQkFBQWxNLEdBQUFsQixFQUFBcU4sbUJBQUFMLEVBQUFoTixFQUFBcU4sbUJBQUFwTSxJQUF3TCxRQUFBaU8sR0FBQWpPLEdBQWVBLEtBQUE0TixlQUFBdkMsa0JBQUEyQyxFQUFBaE8sRUFBQThOLFlBQUEsS0FBQTlOLEdBQStELFFBQUFrTyxHQUFBbE8sR0FBZWlNLEVBQUFqTSxFQUFBNk4sR0FDeFMsUUFBQU0sR0FBQW5PLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBcUIsR0FBQXRDLEdBQUFzQyxFQUFBckIsRUFBQSxDQUFtQixPQUFSSSxHQUFBckIsRUFBUThDLEVBQUFSLEVBQUFDLEVBQUEsRUFBQVMsRUFBQTNCLEVBQW9CMkIsRUFBRUEsRUFBQTBMLEVBQUExTCxHQUFBVCxHQUFZUyxHQUFBLENBQUksUUFBQVIsR0FBQU0sRUFBWU4sRUFBRUEsRUFBQWtNLEVBQUFsTSxHQUFBUSxHQUFZLE1BQUssRUFBQVQsRUFBQVMsR0FBTTNCLEVBQUFxTixFQUFBck4sR0FBQWtCLEdBQWEsTUFBSyxFQUFBUyxFQUFBVCxHQUFNTyxFQUFBNEwsRUFBQTVMLEdBQUFFLEdBQWEsTUFBS1QsS0FBSSxDQUFFLEdBQUFsQixJQUFBeUIsR0FBQXpCLElBQUF5QixFQUFBdU0sVUFBQSxLQUFBcE8sRUFBa0NJLEdBQUFxTixFQUFBck4sR0FBUXlCLEVBQUE0TCxFQUFBNUwsR0FBUXpCLEVBQUEsU0FBT0EsR0FBQSxJQUFnQixLQUFKeUIsRUFBQXpCLEVBQUlBLEtBQVNyQixPQUFBOEMsSUFBV1AsRUFBQXZDLEVBQUFxUCxVQUFjLE9BQUE5TSxPQUFBTyxJQUF5QnpCLEVBQUFrRCxLQUFBdkUsR0FBVUEsRUFBQTBPLEVBQUExTyxFQUFRLEtBQUFBLEtBQVNzQyxPQUFBUSxJQUFXUCxFQUFBRCxFQUFBK00sVUFBYyxPQUFBOU0sT0FBQU8sSUFBeUI5QyxFQUFBdUUsS0FBQWpDLEdBQVVBLEVBQUFvTSxFQUFBcE0sRUFBUSxLQUFBQSxFQUFBLEVBQVFBLEVBQUFqQixFQUFBRCxPQUFXa0IsSUFBQTJNLEVBQUE1TixFQUFBaUIsR0FBQSxVQUFBckIsRUFBeUIsS0FBQUEsRUFBQWpCLEVBQUFvQixPQUFlLEVBQUFILEtBQU1nTyxFQUFBalAsRUFBQWlCLEdBQUEsV0FBQUMsR0FDdlAsUUFBQW9PLEtBQXdHLE9BQTFGQyxJQUFBck0sR0FBQXNNLFlBQUFELEdBQUEsZUFBQXpPLFVBQUEyTyxnQkFBQSwyQkFBMEZGLEdBQ3hULFFBQUFHLEtBQWMsR0FBQW5LLEdBQUFvSyxjQUFBLE1BQUFwSyxJQUFBb0ssYUFBMEMsSUFBQTFPLEdBQUFxQixFQUFBcEIsRUFBQXFFLEdBQUFxSyxXQUFBNVAsRUFBQWtCLEVBQUFFLE9BQUFDLEVBQUF3TyxJQUFBL00sRUFBQXpCLEVBQUFELE1BQW9ELEtBQUFILEVBQUEsRUFBUUEsRUFBQWpCLEdBQUFrQixFQUFBRCxLQUFBSSxFQUFBSixHQUFpQkEsS0FBSyxHQUFBc0IsR0FBQXZDLEVBQUFpQixDQUFVLEtBQUFxQixFQUFBLEVBQVFBLEdBQUFDLEdBQUFyQixFQUFBbEIsRUFBQXNDLEtBQUFqQixFQUFBeUIsRUFBQVIsR0FBc0JBLEtBQStDLE1BQTFDaUQsSUFBQW9LLGNBQUF0TyxFQUFBNEosTUFBQWhLLEVBQUEsRUFBQXFCLEVBQUEsRUFBQUEsRUFBQSxRQUEwQ2lELEdBQUFvSyxjQUF1QixRQUFBRSxLQUFjLGVBQUF0SyxJQUFBdUssTUFBQXZLLEdBQUF1SyxNQUFBN0ssTUFBQU0sR0FBQXVLLE1BQUFSLEtBRXRRLFFBQUE5SixHQUFBdkUsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFvQlgsS0FBQWtOLGVBQUE1TixFQUFzQlUsS0FBQW9OLFlBQUE3TixFQUFtQlMsS0FBQW9PLFlBQUEvUCxFQUFtQmlCLEVBQUFVLEtBQUE2RSxZQUFBd0osU0FBNkIsUUFBQTNPLEtBQUFKLEtBQUE0QixlQUFBeEIsTUFBQUgsRUFBQUQsRUFBQUksSUFBQU0sS0FBQU4sR0FBQUgsRUFBQWxCLEdBQUEsV0FBQXFCLEVBQUFNLEtBQUE0SCxPQUFBakgsRUFBQVgsS0FBQU4sR0FBQXJCLEVBQUFxQixHQUErUSxPQUEzS00sTUFBQXNPLG9CQUFBLE1BQUFqUSxFQUFBa1EsaUJBQUFsUSxFQUFBa1Esa0JBQUEsSUFBQWxRLEVBQUFtUSxhQUFBaE8sR0FBQWdJLGdCQUFBaEksR0FBQStILGlCQUE4SHZJLEtBQUEyTCxxQkFBQW5MLEdBQUErSCxpQkFBNkN2SSxLQUVwQixRQUFBeU8sR0FBQW5QLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBcUIsR0FBQVgsS0FBQTBPLFVBQUFqUCxPQUFBLENBQTBCLEdBQUFDLEdBQUFNLEtBQUEwTyxVQUFBcE0sS0FBZ0QsT0FBckJ0QyxNQUFBN0IsS0FBQXVCLEVBQUFKLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBcUJqQixFQUFTLFVBQUFNLE1BQUFWLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FDaGQsUUFBQWdPLEdBQUFyUCxHQUFlQSxZQUFBVSxNQUFBLE9BQUFTLEVBQUEsT0FBa0NuQixFQUFBc1AsYUFBZSxHQUFBNU8sS0FBQTBPLFVBQUFqUCxRQUFBTyxLQUFBME8sVUFBQTlMLEtBQUF0RCxHQUFpRCxRQUFBdVAsR0FBQXZQLEdBQWVBLEVBQUFvUCxhQUFlcFAsRUFBQXdQLFVBQUFMLEVBQWVuUCxFQUFBdU0sUUFBQThDLEVBQWEsUUFBQUksR0FBQXpQLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBcUIsTUFBQWtELEdBQUExRixLQUFBNkIsS0FBQVYsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUEyRCxRQUFBcU8sR0FBQTFQLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBcUIsTUFBQWtELEdBQUExRixLQUFBNkIsS0FBQVYsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUloUixRQUFBc08sR0FBQTNQLEVBQUFDLEdBQWlCLE9BQUFELEdBQVUsMEJBQUE0UCxHQUFBOUUsUUFBQTdLLEVBQUE0UCxRQUFpRCwrQkFBQTVQLEVBQUE0UCxPQUF5Qyw0REFBK0QsbUJBQWtCLFFBQUFDLEdBQUE5UCxHQUEwQixNQUFYQSxLQUFBK1AsT0FBVyxnQkFBQS9QLElBQUEsUUFBQUEsS0FBQWdRLEtBQUEsS0FBNEQsUUFBQUMsR0FBQWpRLEVBQUFDLEdBQWlCLE9BQUFELEdBQVUsOEJBQUE4UCxHQUFBN1AsRUFBc0MsK0JBQUFBLEVBQUFpUSxNQUFBLE1BQStDQyxJQUFBLEVBQU1DLEdBQVUsMEJBQUFwUSxHQUFBQyxFQUFBK1AsS0FBQWhRLElBQUFvUSxJQUFBRCxHQUFBLEtBQUFuUSxDQUFzRCxzQkFDbGQsUUFBQXFRLEdBQUFyUSxFQUFBQyxHQUFpQixHQUFBcVEsR0FBQSw0QkFBQXRRLElBQUF1USxJQUFBWixFQUFBM1AsRUFBQUMsSUFBQUQsRUFBQXlPLElBQUFuSyxHQUFBdUssTUFBQSxLQUFBdkssR0FBQXFLLFdBQUEsS0FBQXJLLEdBQUFvSyxjQUFBLEtBQUE0QixJQUFBLEVBQUF0USxHQUFBLElBQTRILFFBQUFBLEdBQVUsMEJBQTRCLHdCQUFBQyxFQUFBdVEsU0FBQXZRLEVBQUF3USxRQUFBeFEsRUFBQXlRLFVBQUF6USxFQUFBdVEsU0FBQXZRLEVBQUF3USxPQUFBLENBQThFLEdBQUF4USxFQUFBMFEsTUFBQSxFQUFBMVEsRUFBQTBRLEtBQUF4USxPQUFBLE1BQUFGLEdBQUEwUSxJQUF5QyxJQUFBMVEsRUFBQWlRLE1BQUEsTUFBQXpJLFFBQUFJLGFBQUE1SCxFQUFBaVEsT0FBK0MsV0FBWSwrQkFBQVUsSUFBQSxLQUFBM1EsRUFBQStQLElBQStDLHNCQUV2TyxRQUFBYSxHQUFBN1EsR0FBZSxHQUFBQSxFQUFBOFEsR0FBQTlRLEdBQUEsQ0FBWStRLElBQUEsa0JBQUFBLElBQUFDLHVCQUFBLE9BQUE3UCxFQUFBLE1BQWtFLElBQUFsQixHQUFBMk0sR0FBQTVNLEVBQUEyTSxVQUFzQm9FLElBQUFDLHVCQUFBaFIsRUFBQTJNLFVBQUEzTSxFQUFBcUMsS0FBQXBDLElBQStHLFFBQUFnUixHQUFBalIsR0FBZWtSLEdBQUFDLE1BQUE3TixLQUFBdEQsR0FBQW1SLElBQUFuUixHQUFBa1IsR0FBQWxSLEVBQzlaLFFBQUFvUixLQUFjLEdBQUFGLEdBQUEsQ0FBTyxHQUFBbFIsR0FBQWtSLEdBQUFqUixFQUFBa1IsRUFBK0IsSUFBakJBLEdBQUFELEdBQUEsS0FBV0wsRUFBQTdRLEdBQU1DLEVBQUEsSUFBQUQsRUFBQSxFQUFhQSxFQUFBQyxFQUFBRSxPQUFXSCxJQUFBNlEsRUFBQTVRLEVBQUFELEtBQWtHLFFBQUFxUixHQUFBclIsRUFBQUMsR0FBaUIsTUFBQUQsR0FBQUMsR0FBc0IsUUFBQXFSLEdBQUF0UixFQUFBQyxHQUFpQixHQUFBc1IsR0FBQSxNQUFBRixHQUFBclIsRUFBQUMsRUFBcUJzUixLQUFBLENBQU0sS0FBSSxNQUFBRixHQUFBclIsRUFBQUMsR0FBZSxRQUFRc1IsSUFBQSxFQUFBSCxLQUM1UixRQUFBSSxJQUFBeFIsR0FBZSxHQUFBQyxHQUFBRCxLQUFBeVIsVUFBQXpSLEVBQUF5UixTQUFBMUgsYUFBOEMsaUJBQUE5SixJQUFBeVIsR0FBQTFSLEVBQUFxQyxNQUFBLGFBQUFwQyxFQUFvRCxRQUFBMFIsSUFBQTNSLEdBQXlHLE1BQTFGQSxLQUFBc0ksUUFBQXRJLEVBQUE0UixZQUFBQyxPQUFpQzdSLEVBQUE4UiwwQkFBQTlSLElBQUE4Uix5QkFBeUQsSUFBQTlSLEVBQUErUixTQUFBL1IsRUFBQW9OLFdBQUFwTixFQUMxTixRQUFBZ1MsSUFBQWhTLEVBQUFDLEdBQWlCLElBQUFnQyxHQUFBc00sV0FBQXRPLEtBQUEsb0JBQUFKLFdBQUEsUUFBOERJLEdBQUEsS0FBQUQsQ0FBUyxJQUFBakIsR0FBQWtCLElBQUFKLFNBQWtNLE9BQTlLZCxPQUFBYyxTQUFBRCxjQUFBLE9BQUFiLEVBQUFrVCxhQUFBaFMsRUFBQSxXQUE2RGxCLEVBQUEsa0JBQUFBLEdBQUFrQixLQUErQmxCLEdBQUFtVCxJQUFBLFVBQUFsUyxJQUFBakIsRUFBQWMsU0FBQXNTLGVBQUFDLFdBQUEsdUJBQWtGclQsRUFBUyxRQUFBc1QsSUFBQXJTLEdBQWUsR0FBQUMsR0FBQUQsRUFBQXFDLElBQWEsUUFBQXJDLElBQUF5UixXQUFBLFVBQUF6UixFQUFBK0osZ0JBQUEsYUFBQTlKLEdBQUEsVUFBQUEsR0FDL1QsUUFBQXFTLElBQUF0UyxHQUFlLEdBQUFDLEdBQUFvUyxHQUFBclMsR0FBQSxrQkFBQWpCLEVBQUFrRixPQUFBc08seUJBQUF2UyxFQUFBdUYsWUFBQUwsVUFBQWpGLEdBQUFvQixFQUFBLEdBQUFyQixFQUFBQyxFQUFxRyxLQUFBRCxFQUFBNEIsZUFBQTNCLElBQUEsa0JBQUFsQixHQUFBeVQsS0FBQSxrQkFBQXpULEdBQUEwVCxJQUFBLE1BQUF4TyxRQUFBeU8sZUFBQTFTLEVBQUFDLEdBQWdIMFMsV0FBQTVULEVBQUE0VCxXQUFBQyxjQUFBLEVBQUFKLElBQUEsV0FBdUQsTUFBQXpULEdBQUF5VCxJQUFBM1QsS0FBQTZCLE9BQXdCK1IsSUFBQSxTQUFBelMsR0FBaUJxQixFQUFBLEdBQUFyQixFQUFPakIsRUFBQTBULElBQUE1VCxLQUFBNkIsS0FBQVYsT0FBdUI2UyxTQUFBLFdBQW9CLE1BQUF4UixJQUFTeVIsU0FBQSxTQUFBOVMsR0FBc0JxQixFQUFBLEdBQUFyQixHQUFPK1MsYUFBQSxXQUF5Qi9TLEVBQUFnVCxjQUFBLFdBQXFCaFQsR0FBQUMsS0FDMWMsUUFBQWdULElBQUFqVCxHQUFlQSxFQUFBZ1QsZ0JBQUFoVCxFQUFBZ1QsY0FBQVYsR0FBQXRTLElBQXlDLFFBQUFrVCxJQUFBbFQsR0FBZSxJQUFBQSxFQUFBLFFBQWUsSUFBQUMsR0FBQUQsRUFBQWdULGFBQXNCLEtBQUEvUyxFQUFBLFFBQWUsSUFBQWxCLEdBQUFrQixFQUFBNFMsV0FBbUJ4UixFQUFBLEVBQTJELE9BQWxEckIsS0FBQXFCLEVBQUFnUixHQUFBclMsS0FBQW1ULFFBQUEsZUFBQW5ULEVBQUFnRSxPQUE4Q2hFLEVBQUFxQixFQUFJckIsSUFBQWpCLElBQUFrQixFQUFBNlMsU0FBQTlTLElBQUEsR0FDek0sUUFBQW9ULElBQUFwVCxFQUFBQyxFQUFBbEIsR0FBOEUsTUFBM0RpQixHQUFBdUUsRUFBQWlMLFVBQUE2RCxHQUFBQyxPQUFBdFQsRUFBQUMsRUFBQWxCLEdBQStCaUIsRUFBQXFDLEtBQUEsU0FBZ0I0TyxFQUFBbFMsR0FBTW1QLEVBQUFsTyxHQUFNQSxFQUE2QixRQUFBdVQsSUFBQXZULEdBQWUrTSxFQUFBL00sR0FBTWlOLEdBQUEsR0FBTyxRQUFBdUcsSUFBQXhULEdBQWUsR0FBQUMsR0FBQXFOLEVBQUF0TixFQUFZLElBQUFrVCxHQUFBalQsR0FBQSxNQUFBRCxHQUFrQixRQUFBeVQsSUFBQXpULEVBQUFDLEdBQWlCLGlCQUFBRCxFQUFBLE1BQUFDLEdBQXVILFFBQUF5VCxNQUFjQyxRQUFBQyxZQUFBLG1CQUFBQyxJQUFBQyxHQUFBSCxHQUFBLE1BQXVELFFBQUFFLElBQUE3VCxHQUFlLFVBQUFBLEVBQUErVCxjQUFBUCxHQUFBTSxNQUFBOVQsRUFBQW9ULEdBQUFVLEdBQUE5VCxFQUFBMlIsR0FBQTNSLElBQUFzUixFQUFBaUMsR0FBQXZULElBQ2haLFFBQUFnVSxJQUFBaFUsRUFBQUMsRUFBQWxCLEdBQW1CLGFBQUFpQixHQUFBMFQsS0FBQUMsR0FBQTFULEVBQUE2VCxHQUFBL1UsRUFBQTRVLEdBQUFNLFlBQUEsbUJBQUFKLEtBQUEsWUFBQTdULEdBQUEwVCxLQUEwRixRQUFBUSxJQUFBbFUsR0FBZSwwQkFBQUEsR0FBQSxhQUFBQSxHQUFBLGVBQUFBLEVBQUEsTUFBQXdULElBQUFNLElBQTRFLFFBQUFLLElBQUFuVSxFQUFBQyxHQUFpQixnQkFBQUQsRUFBQSxNQUFBd1QsSUFBQXZULEdBQStCLFFBQUFtVSxJQUFBcFUsRUFBQUMsR0FBaUIsZ0JBQUFELEdBQUEsY0FBQUEsRUFBQSxNQUFBd1QsSUFBQXZULEdBRXpPLFFBQUFvVSxJQUFBclUsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQStJLFFBQUFpVCxJQUFBdFUsR0FBZSxHQUFBQyxHQUFBUyxLQUFBb08sV0FBdUIsT0FBQTdPLEdBQUFzVSxpQkFBQXRVLEVBQUFzVSxpQkFBQXZVLFFBQUF3VSxHQUFBeFUsT0FBQUMsRUFBQUQsR0FBb0UsUUFBQXlVLE1BQWMsTUFBQUgsSUFBVSxRQUFBSSxJQUFBMVUsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBR2xCLFFBQUFzVCxJQUFBM1UsR0FBd0IsTUFBVEEsS0FBQXFDLEtBQVMsZ0JBQUFyQyxLQUFBLGtCQUFBQSxLQUFBNFUsYUFBQTVVLEVBQUFPLEtBQUEsS0FDalcsUUFBQXNVLElBQUE3VSxHQUFlLEdBQUFDLEdBQUFELENBQVEsSUFBQUEsRUFBQW9PLFVBQUEsS0FBb0JuTyxFQUFBLFFBQVlBLElBQUEsV0FBZSxDQUFLLFVBQUFBLEVBQUE2VSxXQUFBLFFBQWdDLE1BQUs3VSxFQUFBLFFBQVksR0FBQUEsSUFBQSxjQUFBQSxFQUFBNlUsV0FBQSxTQUErQyxXQUFBN1UsRUFBQW9OLElBQUEsSUFBcUIsUUFBQTBILElBQUEvVSxHQUFlLFNBQUFBLElBQUFnVixzQkFBQSxJQUFBSCxHQUFBN1UsR0FBNkMsUUFBQWlWLElBQUFqVixHQUFlLElBQUE2VSxHQUFBN1UsR0FBQW1CLEVBQUEsY0FDM1EsUUFBQStULElBQUFsVixHQUFlLEdBQUFDLEdBQUFELEVBQUFvTyxTQUFrQixLQUFBbk8sRUFBQSxNQUFBQSxHQUFBNFUsR0FBQTdVLEdBQUEsSUFBQUMsRUFBQWtCLEVBQUEsa0JBQUFsQixFQUFBLEtBQUFELENBQXdELFFBQUFqQixHQUFBaUIsRUFBQXFCLEVBQUFwQixJQUFpQixDQUFFLEdBQUFHLEdBQUFyQixFQUFBLE9BQUE4QyxFQUFBekIsSUFBQWdPLFVBQUEsSUFBdUMsS0FBQWhPLElBQUF5QixFQUFBLEtBQWdCLElBQUF6QixFQUFBK1UsUUFBQXRULEVBQUFzVCxNQUFBLENBQXNCLE9BQUE3VCxHQUFBbEIsRUFBQStVLE1BQWtCN1QsR0FBRSxDQUFFLEdBQUFBLElBQUF2QyxFQUFBLE1BQUFrVyxJQUFBN1UsR0FBQUosQ0FBd0IsSUFBQXNCLElBQUFELEVBQUEsTUFBQTRULElBQUE3VSxHQUFBSCxDQUF3QnFCLEtBQUE4VCxRQUFZalUsRUFBQSxPQUFTLEdBQUFwQyxFQUFBLFNBQUFzQyxFQUFBLE9BQUF0QyxFQUFBcUIsRUFBQWlCLEVBQUFRLE1BQXFDLENBQUtQLEdBQUEsQ0FBSyxRQUFBUyxHQUFBM0IsRUFBQStVLE1BQWtCcFQsR0FBRSxDQUFFLEdBQUFBLElBQUFoRCxFQUFBLENBQVV1QyxHQUFBLEVBQUt2QyxFQUFBcUIsRUFBSWlCLEVBQUFRLENBQUksT0FBTSxHQUFBRSxJQUFBVixFQUFBLENBQVVDLEdBQUEsRUFBS0QsRUFBQWpCLEVBQUlyQixFQUFBOEMsQ0FBSSxPQUFNRSxJQUFBcVQsUUFBWSxJQUFBOVQsRUFBQSxDQUFPLElBQUFTLEVBQUFGLEVBQUFzVCxNQUFjcFQsR0FBRSxDQUFFLEdBQUFBLElBQUFoRCxFQUFBLENBQVV1QyxHQUFBLEVBQUt2QyxFQUFBOEMsRUFBSVIsRUFBQWpCLENBQUksT0FBTSxHQUFBMkIsSUFBQVYsRUFBQSxDQUFVQyxHQUFBLEVBQUtELEVBQUFRLEVBQUk5QyxFQUFBcUIsQ0FBSSxPQUFNMkIsSUFBQXFULFFBQVk5VCxFQUM5ZixPQUFBSCxFQUFBLFFBQWlCcEMsRUFBQXFQLFlBQUEvTSxFQUFBRixFQUFBLGNBQTBELE1BQTFCLEtBQUFwQyxFQUFBc08sSUFBQWxNLEVBQUEsY0FBMEJwQyxFQUFBNE4sVUFBQW5LLFVBQUF6RCxFQUFBaUIsRUFBQUMsRUFBbUMsUUFBQW9WLElBQUFyVixHQUF1QixHQUFSQSxFQUFBa1YsR0FBQWxWLElBQVFBLEVBQUEsV0FBa0IsUUFBQUMsR0FBQUQsSUFBYSxDQUFFLE9BQUFDLEVBQUFvTixLQUFBLElBQUFwTixFQUFBb04sSUFBQSxNQUFBcE4sRUFBaUMsSUFBQUEsRUFBQWtWLE1BQUFsVixFQUFBa1YsTUFBQSxPQUFBbFYsTUFBQWtWLFVBQXlDLENBQUssR0FBQWxWLElBQUFELEVBQUEsS0FBZSxPQUFLQyxFQUFBbVYsU0FBVyxDQUFFLElBQUFuVixFQUFBLFFBQUFBLEVBQUEsU0FBQUQsRUFBQSxXQUE2Q0MsS0FBQSxPQUFjQSxFQUFBbVYsUUFBQSxPQUFBblYsRUFBQSxPQUFnQ0EsSUFBQW1WLFNBQWEsWUFDOVgsUUFBQUUsSUFBQXRWLEdBQXVCLEdBQVJBLEVBQUFrVixHQUFBbFYsSUFBUUEsRUFBQSxXQUFrQixRQUFBQyxHQUFBRCxJQUFhLENBQUUsT0FBQUMsRUFBQW9OLEtBQUEsSUFBQXBOLEVBQUFvTixJQUFBLE1BQUFwTixFQUFpQyxJQUFBQSxFQUFBa1YsT0FBQSxJQUFBbFYsRUFBQW9OLElBQUFwTixFQUFBa1YsTUFBQSxPQUFBbFYsTUFBQWtWLFVBQW9ELENBQUssR0FBQWxWLElBQUFELEVBQUEsS0FBZSxPQUFLQyxFQUFBbVYsU0FBVyxDQUFFLElBQUFuVixFQUFBLFFBQUFBLEVBQUEsU0FBQUQsRUFBQSxXQUE2Q0MsS0FBQSxPQUFjQSxFQUFBbVYsUUFBQSxPQUFBblYsRUFBQSxPQUFnQ0EsSUFBQW1WLFNBQWEsWUFDM1IsUUFBQUcsSUFBQXZWLEdBQWUsR0FBQUMsR0FBQUQsRUFBQXdWLFVBQW1CLElBQUcsSUFBQXZWLEVBQUEsQ0FBT0QsRUFBQXlWLFVBQUFuUyxLQUFBckQsRUFBb0IsT0FBTSxHQUFBbEIsRUFBTSxLQUFBQSxFQUFBa0IsRUFBUWxCLEVBQUEsUUFBWUEsSUFBQSxNQUEwRCxJQUEzQ0EsRUFBQSxJQUFBQSxFQUFBc08sSUFBQSxLQUFBdE8sRUFBQTROLFVBQUErSSxlQUEyQzNXLEVBQUEsS0FBWWlCLEdBQUF5VixVQUFBblMsS0FBQXJELEdBQW9CQSxFQUFBa04sRUFBQXBPLFNBQVFrQixFQUFTLEtBQUFsQixFQUFBLEVBQVFBLEVBQUFpQixFQUFBeVYsVUFBQXRWLE9BQXFCcEIsSUFBQWtCLEVBQUFELEVBQUF5VixVQUFBMVcsR0FBQTRXLEdBQUEzVixFQUFBNFYsYUFBQTNWLEVBQUFELEVBQUE4TyxZQUFBNkMsR0FBQTNSLEVBQUE4TyxjQUE4RixRQUFBK0csSUFBQTdWLEdBQWU4VixLQUFBOVYsRUFBTyxRQUFBNkYsSUFBQTdGLEVBQUFDLEVBQUFsQixHQUFrQixNQUFBQSxHQUFBZ1gsR0FBQUMsT0FBQWpYLEVBQUFrQixFQUFBZ1csR0FBQXZQLEtBQUEsS0FBQTFHLElBQUEsS0FBNkMsUUFBQWtXLElBQUFsVyxFQUFBQyxFQUFBbEIsR0FBbUIsTUFBQUEsR0FBQWdYLEdBQUFJLFFBQUFwWCxFQUFBa0IsRUFBQWdXLEdBQUF2UCxLQUFBLEtBQUExRyxJQUFBLEtBQzlhLFFBQUFpVyxJQUFBalcsRUFBQUMsR0FBaUIsR0FBQTZWLEdBQUEsQ0FBTyxHQUFBL1csR0FBQTRTLEdBQUExUixFQUEyRSxJQUEvRGxCLEVBQUFvTyxFQUFBcE8sR0FBUSxPQUFBQSxHQUFBLGdCQUFBQSxHQUFBc08sS0FBQSxJQUFBd0gsR0FBQTlWLE9BQUEsTUFBdURxWCxHQUFBalcsT0FBQSxDQUFjLEdBQUFrQixHQUFBK1UsR0FBQXBULEtBQWUzQixHQUFBdVUsYUFBQTVWLEVBQWlCcUIsRUFBQXlOLFlBQUE3TyxFQUFnQm9CLEVBQUFtVSxXQUFBelcsRUFBZWlCLEVBQUFxQixNQUFJckIsSUFBUTRWLGFBQUE1VixFQUFBOE8sWUFBQTdPLEVBQUF1VixXQUFBelcsRUFBQTBXLGFBQXdELEtBQUluRSxFQUFBaUUsR0FBQXZWLEdBQVMsUUFBUUEsRUFBQTRWLGFBQUEsS0FBQTVWLEVBQUE4TyxZQUFBLEtBQUE5TyxFQUFBd1YsV0FBQSxLQUFBeFYsRUFBQXlWLFVBQUF0VixPQUFBLEtBQUFpVyxHQUFBalcsUUFBQWlXLEdBQUE5UyxLQUFBdEQsS0FDM0MsUUFBQXFXLElBQUFyVyxFQUFBQyxHQUFpQixHQUFBbEIsS0FBc0ksT0FBN0hBLEdBQUFpQixFQUFBK0osZUFBQTlKLEVBQUE4SixjQUFtQ2hMLEVBQUEsU0FBQWlCLEdBQUEsU0FBQUMsRUFBeUJsQixFQUFBLE1BQUFpQixHQUFBLE1BQUFDLEVBQW1CbEIsRUFBQSxLQUFBaUIsR0FBQSxLQUFBQyxFQUFpQmxCLEVBQUEsSUFBQWlCLEdBQUEsSUFBQUMsRUFBQThKLGNBQTZCaEwsRUFFclgsUUFBQXVYLElBQUF0VyxHQUFlLEdBQUF1VyxHQUFBdlcsR0FBQSxNQUFBdVcsSUFBQXZXLEVBQXNCLEtBQUF3VyxHQUFBeFcsR0FBQSxNQUFBQSxFQUFtQixJQUFBakIsR0FBQWtCLEVBQUF1VyxHQUFBeFcsRUFBYyxLQUFBakIsSUFBQWtCLEdBQUEsR0FBQUEsRUFBQTJCLGVBQUE3QyxRQUFBMFgsSUFBQSxNQUFBRixJQUFBdlcsR0FBQUMsRUFBQWxCLEVBQTZELFVBSWtGLFFBQUEyWCxJQUFBMVcsR0FBcUYsTUFBdEVpRSxRQUFBaUIsVUFBQXRELGVBQUEvQyxLQUFBbUIsRUFBQTJXLE1BQUEzVyxFQUFBMlcsSUFBQUMsS0FBQUMsR0FBQTdXLEVBQUEyVyxTQUFzRUUsR0FBQTdXLEVBQUEyVyxLQUFpQixRQUFBRyxJQUFBOVcsR0FBZSxLQUFLQSxLQUFBK1csWUFBZ0IvVyxJQUFBK1csVUFBZ0IsT0FBQS9XLEdBQy9XLFFBQUFnWCxJQUFBaFgsRUFBQUMsR0FBaUIsR0FBQWxCLEdBQUErWCxHQUFBOVcsRUFBWUEsR0FBQSxDQUFJLFFBQUFxQixHQUFVdEMsR0FBRSxDQUFFLE9BQUFBLEVBQUFnVCxTQUFBLENBQTRDLEdBQXpCMVEsRUFBQXJCLEVBQUFqQixFQUFBa1ksWUFBQTlXLE9BQXlCSCxHQUFBQyxHQUFBb0IsR0FBQXBCLEVBQUEsT0FBcUJpWCxLQUFBblksRUFBQW9ZLE9BQUFsWCxFQUFBRCxFQUFtQkEsR0FBQXFCLEVBQUlyQixFQUFBLENBQUcsS0FBS2pCLEdBQUUsQ0FBRSxHQUFBQSxFQUFBcVksWUFBQSxDQUFrQnJZLElBQUFxWSxXQUFnQixNQUFBcFgsR0FBUWpCLElBQUFxTyxXQUFlck8sRUFBQSxPQUFTQSxFQUFBK1gsR0FBQS9YLElBQVMsUUFBQXNZLElBQUFyWCxHQUFlLEdBQUFDLEdBQUFELEtBQUF5UixVQUFBelIsRUFBQXlSLFNBQUExSCxhQUE4QyxPQUFBOUosS0FBQSxVQUFBQSxHQUFBLFNBQUFELEVBQUFxQyxNQUFBLGFBQUFwQyxHQUFBLFNBQUFELEVBQUFzWCxpQkFFM1IsUUFBQUMsSUFBQXZYLEVBQUFDLEdBQWlCLEdBQUF1WCxJQUFBLE1BQUFDLFNBQUFDLEtBQUEsV0FBdUMsSUFBQTNZLEdBQUEwWSxFQUFrUCxPQUF6TyxrQkFBQTFZLElBQUFzWSxHQUFBdFksTUFBK0I0WSxNQUFBNVksRUFBQTZZLGVBQUFDLElBQUE5WSxFQUFBK1ksY0FBMENqRyxPQUFBa0csY0FBQWhaLEVBQUE4UyxPQUFBa0csZUFBQWhaLEdBQWlEaVosV0FBQWpaLEVBQUFpWixXQUFBQyxhQUFBbFosRUFBQWtaLGFBQUFDLFVBQUFuWixFQUFBbVosVUFBQUMsWUFBQXBaLEVBQUFvWixjQUFvR3BaLEVBQUEsT0FBV3FaLElBQUFDLEdBQUFELEdBQUFyWixHQUFBLE1BQUFxWixHQUFBclosRUFBQWlCLEVBQUF1RSxFQUFBaUwsVUFBQThJLEdBQUFDLE9BQUFDLEdBQUF4WSxFQUFBQyxHQUFBRCxFQUFBcUMsS0FBQSxTQUFBckMsRUFBQXNJLE9BQUFtUCxHQUFBdkosRUFBQWxPLE1BRTNPLFFBQUF5WSxJQUFBelksRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQXdHLFFBQUFxWCxJQUFBMVksRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQTJJLFFBQUFzWCxJQUFBM1ksRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQ2pYLFFBQUF1WCxJQUFBNVksR0FBZSxHQUFBQyxHQUFBRCxFQUFBNlAsT0FBd0UsT0FBeEQsWUFBQTdQLFFBQUE2WSxTQUFBLElBQUE3WSxHQUFBLEtBQUFDLElBQUFELEVBQUEsS0FBQUEsRUFBQUMsRUFBd0QsSUFBQUQsR0FBQSxLQUFBQSxJQUFBLEVBRStCLFFBQUE4WSxJQUFBOVksRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBRTFFLFFBQUEwWCxJQUFBL1ksRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQW9FLFFBQUEyWCxJQUFBaFosRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQThLLFFBQUE0WCxJQUFBalosRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQ2xYLFFBQUE2WCxJQUFBbFosRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixNQUFBa0QsR0FBQTFGLEtBQUE2QixLQUFBVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBS21PLFFBQUEyRixJQUFBaEgsR0FBYyxFQUFBbVosS0FBQW5aLEVBQUF3QyxRQUFBNFcsR0FBQUQsSUFBQUMsR0FBQUQsSUFBQSxLQUFBQSxNQUEwQyxRQUFBalMsSUFBQWxILEVBQUFDLEdBQWdCa1osS0FBS0MsR0FBQUQsSUFBQW5aLEVBQUF3QyxRQUFpQnhDLEVBQUF3QyxRQUFBdkMsRUFBMkQsUUFBQW9aLElBQUFyWixHQUFlLE1BQUFzWixJQUFBdFosR0FBQXVaLEdBQUFDLEdBQUFoWCxRQUNoYSxRQUFBaVgsSUFBQXpaLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBaUIsRUFBQXFDLEtBQUFxWCxZQUEwQixLQUFBM2EsRUFBQSxNQUFBdUcsR0FBZSxJQUFBakUsR0FBQXJCLEVBQUEyTSxTQUFrQixJQUFBdEwsS0FBQXNZLDhDQUFBMVosRUFBQSxNQUFBb0IsR0FBQXVZLHlDQUEyRyxJQUFRL1gsR0FBUnpCLElBQVcsS0FBQXlCLElBQUE5QyxHQUFBcUIsRUFBQXlCLEdBQUE1QixFQUFBNEIsRUFBc0ksT0FBakhSLEtBQUFyQixJQUFBMk0sVUFBQTNNLEVBQUEyWiw0Q0FBQTFaLEVBQUFELEVBQUE0WiwwQ0FBQXhaLEdBQWlIQSxFQUFTLFFBQUFrWixJQUFBdFosR0FBZSxXQUFBQSxFQUFBcU4sS0FBQSxNQUFBck4sRUFBQXFDLEtBQUF3WCxrQkFBaUQsUUFBQUMsSUFBQTlaLEdBQWVzWixHQUFBdFosS0FBQWdILEdBQUErUyxHQUFBL1osR0FBQWdILEdBQUF3UyxHQUFBeFosSUFDaGEsUUFBQWdhLElBQUFoYSxFQUFBQyxFQUFBbEIsR0FBbUIsTUFBQXlhLEdBQUFTLE9BQUE5WSxFQUFBLGNBQWdDK0YsR0FBQXNTLEdBQUF2WixFQUFBRCxHQUFVa0gsR0FBQTZTLEdBQUFoYixFQUFBaUIsR0FBUyxRQUFBa2EsSUFBQWxhLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBaUIsRUFBQTJNLFVBQUF0TCxFQUFBckIsRUFBQXFDLEtBQUF3WCxpQkFBNkMsc0JBQUE5YSxHQUFBb2IsZ0JBQUEsTUFBQWxhLEVBQWtEbEIsS0FBQW9iLGlCQUFzQixRQUFBL1osS0FBQXJCLEdBQUFxQixJQUFBaUIsR0FBQSxPQUFBRixFQUFBLE1BQUF3VCxHQUFBM1UsSUFBQSxVQUFBSSxFQUF5RCxPQUFBYSxPQUFXaEIsRUFBQWxCLEdBQU0sUUFBQXFiLElBQUFwYSxHQUFlLElBQUFzWixHQUFBdFosR0FBQSxRQUFtQixJQUFBQyxHQUFBRCxFQUFBMk0sU0FBK0csT0FBN0YxTSxRQUFBb2EsMkNBQUEvVSxHQUFvRGlVLEdBQUFDLEdBQUFoWCxRQUFjMEUsR0FBQXNTLEdBQUF2WixFQUFBRCxHQUFVa0gsR0FBQTZTLE1BQUF2WCxRQUFBeEMsSUFBaUIsRUFDdmEsUUFBQXNhLElBQUF0YSxFQUFBQyxHQUFpQixHQUFBbEIsR0FBQWlCLEVBQUEyTSxTQUFvQyxJQUFsQjVOLEVBQUEsT0FBQW9DLEVBQUEsT0FBa0JsQixFQUFBLENBQU0sR0FBQW9CLEdBQUE2WSxHQUFBbGEsRUFBQXVaLEdBQWV4YSxHQUFBc2IsMENBQUFoWixFQUE4QzJGLEdBQUErUyxHQUFBL1osR0FBT2dILEdBQUF3UyxHQUFBeFosR0FBUWtILEdBQUFzUyxHQUFBblksRUFBQXJCLE9BQVVnSCxJQUFBK1MsR0FBQS9aLEVBQVlrSCxJQUFBNlMsR0FBQTlaLEVBQUFELEdBQzdKLFFBQUF1YSxJQUFBdmEsRUFBQUMsRUFBQWxCLEdBQWtCMkIsS0FBQTJNLElBQUFyTixFQUFXVSxLQUFBZSxJQUFBeEIsRUFBV1MsS0FBQWlNLFVBQUFqTSxLQUFBMkIsS0FBQSxLQUE4QjNCLEtBQUEwVSxRQUFBMVUsS0FBQXlVLE1BQUF6VSxLQUFBLFlBQTRDQSxLQUFBOFosTUFBQSxFQUFhOVosS0FBQStaLGNBQUEvWixLQUFBZ2EsWUFBQWhhLEtBQUFpYSxjQUFBamEsS0FBQWthLGFBQUFsYSxLQUFBYyxJQUFBLEtBQXVGZCxLQUFBbWEsbUJBQUE5YixFQUEwQjJCLEtBQUFvVSxVQUFBLEVBQWlCcFUsS0FBQW9hLFdBQUFwYSxLQUFBcWEsWUFBQXJhLEtBQUFzYSxXQUFBLEtBQXNEdGEsS0FBQXVhLGVBQUEsRUFBc0J2YSxLQUFBME4sVUFBQSxLQUM3VSxRQUFBOE0sSUFBQWxiLEVBQUFDLEVBQUFsQixHQUFtQixHQUFBc0MsR0FBQXJCLEVBQUFvTyxTQUFnWixPQUE5WCxRQUFBL00sS0FBQSxHQUFBa1osSUFBQXZhLEVBQUFxTixJQUFBck4sRUFBQXlCLElBQUF6QixFQUFBNmEsb0JBQUF4WixFQUFBZ0IsS0FBQXJDLEVBQUFxQyxLQUFBaEIsRUFBQXNMLFVBQUEzTSxFQUFBMk0sVUFBQXRMLEVBQUErTSxVQUFBcE8sSUFBQW9PLFVBQUEvTSxNQUFBeVQsVUFBQSxFQUFBelQsRUFBQTJaLFdBQUEsS0FBQTNaLEVBQUEwWixZQUFBLEtBQUExWixFQUFBeVosV0FBQSxNQUE4THpaLEVBQUE0WixlQUFBbGMsRUFBbUJzQyxFQUFBdVosYUFBQTNhLEVBQWlCb0IsRUFBQThULE1BQUFuVixFQUFBbVYsTUFBZ0I5VCxFQUFBc1osY0FBQTNhLEVBQUEyYSxjQUFnQ3RaLEVBQUFvWixjQUFBemEsRUFBQXlhLGNBQWdDcFosRUFBQXFaLFlBQUExYSxFQUFBMGEsWUFBNEJyWixFQUFBK1QsUUFBQXBWLEVBQUFvVixRQUFvQi9ULEVBQUFtWixNQUFBeGEsRUFBQXdhLE1BQWdCblosRUFBQUcsSUFBQXhCLEVBQUF3QixJQUFZSCxFQUNuYSxRQUFBOFosSUFBQW5iLEVBQUFDLEVBQUFsQixHQUFtQixHQUFBc0MsR0FBQSxPQUFBakIsRUFBQUosRUFBQXFDLEtBQUFSLEVBQUE3QixFQUFBeUIsR0FBdVcsT0FBelUsa0JBQUFyQixJQUFBaUIsRUFBQWpCLEVBQUE4RSxXQUFBOUUsRUFBQThFLFVBQUFDLGlCQUFBLEdBQUFvVixJQUFBLEVBQUExWSxFQUFBNUIsR0FBQSxHQUFBc2EsSUFBQSxFQUFBMVksRUFBQTVCLEdBQUFvQixFQUFBZ0IsS0FBQWpDLEVBQUFpQixFQUFBdVosYUFBQTVhLEVBQUFXLE9BQUEsZ0JBQUFQLElBQUFpQixFQUFBLEdBQUFrWixJQUFBLEVBQUExWSxFQUFBNUIsR0FBQW9CLEVBQUFnQixLQUFBakMsRUFBQWlCLEVBQUF1WixhQUFBNWEsRUFBQVcsT0FBQSxnQkFBQVAsSUFBQSxPQUFBQSxHQUFBLGdCQUFBQSxHQUFBaU4sS0FBQWhNLEVBQUFqQixFQUFBaUIsRUFBQXVaLGFBQUE1YSxFQUFBVyxPQUFBUSxFQUFBLFlBQUFmLGFBQUEsSUFBc1RpQixFQUFBNFosZUFBQWxjLEVBQW1Cc0MsRUFBUyxRQUFBK1osSUFBQXBiLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBeUUsTUFBcERwQixHQUFBLEdBQUFzYSxJQUFBLEdBQUFsWixFQUFBcEIsR0FBZ0JBLEVBQUEyYSxhQUFBNWEsRUFBaUJDLEVBQUFnYixlQUFBbGMsRUFBbUJrQixFQUM1YyxRQUFBb2IsSUFBQXJiLEVBQUFDLEVBQUFsQixHQUF5RSxNQUF0RGtCLEdBQUEsR0FBQXNhLElBQUEsT0FBQXRhLEdBQWtCQSxFQUFBMmEsYUFBQTVhLEVBQWlCQyxFQUFBZ2IsZUFBQWxjLEVBQW1Ca0IsRUFBUyxRQUFBcWIsSUFBQXRiLEVBQUFDLEVBQUFsQixHQUEyRixNQUF4RWtCLEdBQUEsR0FBQXNhLElBQUEsRUFBQXZhLEVBQUF5QixJQUFBeEIsR0FBbUJBLEVBQUFvQyxLQUFBckMsRUFBQXViLFFBQWlCdGIsRUFBQTJhLGFBQUE1YSxFQUFpQkMsRUFBQWdiLGVBQUFsYyxFQUFtQmtCLEVBQVMsUUFBQXViLElBQUF4YixFQUFBQyxFQUFBbEIsR0FBd0QsTUFBckNpQixHQUFBLEdBQUF1YSxJQUFBLE9BQUF0YSxHQUFrQkQsRUFBQWliLGVBQUFsYyxFQUFtQmlCLEVBQVMsUUFBQXliLElBQUF6YixFQUFBQyxFQUFBbEIsR0FBd0wsTUFBcktrQixHQUFBLEdBQUFzYSxJQUFBLEVBQUF2YSxFQUFBeUIsSUFBQXhCLEdBQW1CQSxFQUFBMmEsYUFBQTVhLEVBQUE4QixhQUE4QjdCLEVBQUFnYixlQUFBbGMsRUFBbUJrQixFQUFBME0sV0FBYStJLGNBQUExVixFQUFBMFYsY0FBQWdHLGdCQUFBLEtBQUF2SixlQUFBblMsRUFBQW1TLGdCQUFvRmxTLEVBQy9hLFFBQUEwYixJQUFBM2IsR0FBZSxnQkFBQUMsR0FBbUIsSUFBSSxNQUFBRCxHQUFBQyxHQUFZLE1BQUFsQixNQUFZLFFBQUE2YyxJQUFBNWIsR0FBZSxzQkFBQXFKLGdDQUFBLFFBQWdFLElBQUFwSixHQUFBb0osOEJBQXFDLElBQUFwSixFQUFBNGIsYUFBQTViLEVBQUE2YixjQUFBLFFBQTJDLEtBQUksR0FBQS9jLEdBQUFrQixFQUFBOGIsT0FBQS9iLEVBQWtCZ2MsSUFBQUwsR0FBQSxTQUFBM2IsR0FBa0IsTUFBQUMsR0FBQWdjLGtCQUFBbGQsRUFBQWlCLEtBQWtDa2MsR0FBQVAsR0FBQSxTQUFBM2IsR0FBa0IsTUFBQUMsR0FBQWtjLHFCQUFBcGQsRUFBQWlCLEtBQXFDLE1BQUFxQixJQUFVLFNBQVMsUUFBQSthLElBQUFwYyxHQUFlLGtCQUFBZ2MsUUFBQWhjLEdBQThCLFFBQUFxYyxJQUFBcmMsR0FBZSxrQkFBQWtjLFFBQUFsYyxHQUM3YSxRQUFBc2MsSUFBQXRjLEdBQWUsT0FBT3VjLFVBQUF2YyxFQUFBaWIsZUFBQSxFQUFBdUIsTUFBQSxLQUFBQyxLQUFBLEtBQUFDLGFBQUEsS0FBQUMsZ0JBQUEsRUFBQUMsZUFBQSxHQUF3RyxRQUFBQyxJQUFBN2MsRUFBQUMsR0FBaUIsT0FBQUQsRUFBQXljLEtBQUF6YyxFQUFBd2MsTUFBQXhjLEVBQUF5YyxLQUFBeGMsR0FBQUQsRUFBQXljLEtBQUEzWSxLQUFBN0QsRUFBQUQsRUFBQXljLEtBQUF4YyxJQUF3RCxJQUFBRCxFQUFBaWIsZ0JBQUFqYixFQUFBaWIsZUFBQWhiLEVBQUFnYixrQkFBQWpiLEVBQUFpYixlQUFBaGIsRUFBQWdiLGdCQUN2TSxRQUFBNkIsSUFBQTljLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBaUIsRUFBQW9PLFVBQUEvTSxFQUFBckIsRUFBQTBhLFdBQWtDLFFBQUFyWixNQUFBckIsRUFBQTBhLFlBQUE0QixHQUFBLE9BQXFDLE9BQUF2ZCxHQUFBaUIsRUFBQWpCLEVBQUEyYixZQUFBLE9BQUExYSxNQUFBakIsRUFBQTJiLFlBQUE0QixHQUFBLFFBQUF0YyxFQUFBLEtBQXVFQSxNQUFBcUIsRUFBQXJCLEVBQUEsS0FBZSxPQUFBQSxFQUFBNmMsR0FBQXhiLEVBQUFwQixHQUFBLE9BQUFvQixFQUFBb2IsTUFBQSxPQUFBemMsRUFBQXljLE1BQUFJLEdBQUF4YixFQUFBcEIsR0FBQTRjLEdBQUE3YyxFQUFBQyxLQUFBNGMsR0FBQXhiLEVBQUFwQixHQUFBRCxFQUFBeWMsS0FBQXhjLEdBQW1GLFFBQUE4YyxJQUFBL2MsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFzQyxNQUFqQnJCLEtBQUFnZCxhQUFpQixrQkFBQWhkLEtBQUFuQixLQUFBb0IsRUFBQWxCLEVBQUFzQyxHQUFBckIsRUFDdlMsUUFBQWlkLElBQUFqZCxFQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUFqQixFQUFBeUIsR0FBeUIsT0FBQTdCLEtBQUEwYSxjQUFBM2IsTUFBQWtCLEVBQUF5YSxhQUErQzZCLFVBQUF4ZCxFQUFBd2QsVUFBQXRCLGVBQUFsYyxFQUFBa2MsZUFBQXVCLE1BQUF6ZCxFQUFBeWQsTUFBQUMsS0FBQTFkLEVBQUEwZCxLQUFBRyxjQUFBN2QsRUFBQTZkLGNBQUFGLGFBQUEsS0FBQUMsZ0JBQUEsSUFBb0o1ZCxFQUFBa2MsZUFBQSxFQUFtQmxjLEVBQUE2ZCxjQUFBNWMsRUFBQWpCLEVBQUF3ZCxXQUFBdmMsRUFBQWpCLEVBQUF3ZCxVQUFBdGMsRUFBQXdhLGNBQUExYixFQUFBNmQsZUFBQSxFQUFpRixRQUFBdGIsSUFBQSxFQUFBUyxFQUFBaEQsRUFBQXlkLE1BQUFqYixHQUFBLEVBQTRCLE9BQUFRLEdBQVMsQ0FBRSxHQUFBMkMsR0FBQTNDLEVBQUFrWixjQUF1QixJQUFBdlcsRUFBQTdDLEVBQUEsQ0FBUSxHQUFBNkIsR0FBQTNFLEVBQUFrYyxnQkFBdUIsSUFBQXZYLEtBQUFnQixLQUFBM0YsRUFBQWtjLGVBQUF2VyxHQUFpQ25ELE9BQUEsRUFBQXhDLEVBQUF3ZCxVQUFBdmMsT0FBNkJ1QixLQUFBeEMsRUFBQXlkLE1BQUF6YSxFQUFBK0IsS0FBQSxPQUMzZC9FLEVBQUF5ZCxRQUFBemQsRUFBQTBkLEtBQUEsT0FBd0IxYSxFQUFBbWIsV0FBQWxkLEVBQUErYyxHQUFBaGIsRUFBQVYsRUFBQXJCLEVBQUFJLEdBQUFrQixHQUFBLElBQWtDb0QsRUFBQXFZLEdBQUFoYixFQUFBVixFQUFBckIsRUFBQUksTUFBQUosRUFBQXNCLEVBQUFMLE1BQThCakIsRUFBQTBFLEdBQUF6RCxHQUFBakIsRUFBQTBFLEdBQUFwRCxHQUFBLEdBQWtCUyxFQUFBb2IsV0FBQXBlLEVBQUE0ZCxnQkFBQSxHQUFrQyxPQUFBNWEsRUFBQXFiLFdBQUExWSxFQUFBM0YsRUFBQTJkLGFBQUEsT0FBQWhZLE1BQUEzRixFQUFBMmQsaUJBQUFoWSxFQUFBcEIsS0FBQXZCLEdBQWdGQSxLQUFBK0IsS0FBeUgsTUFBaEgsUUFBQS9FLEVBQUEyZCxhQUFBemMsRUFBQTZVLFdBQUEsVUFBQS9WLEVBQUF5ZCxPQUFBemQsRUFBQTRkLGlCQUFBMWMsRUFBQXlhLFlBQUEsTUFBNkZuWixJQUFBeEMsRUFBQXdkLFVBQUF2YyxHQUFtQkEsRUFDclYsUUFBQXFkLElBQUFyZCxFQUFBQyxHQUFpQixHQUFBbEIsR0FBQWlCLEVBQUEwYyxZQUFxQixXQUFBM2QsRUFBQSxJQUFBaUIsRUFBQTBjLGFBQUEsS0FBQTFjLEVBQUEsRUFBd0NBLEVBQUFqQixFQUFBb0IsT0FBV0gsSUFBQSxDQUFLLEdBQUFxQixHQUFBdEMsRUFBQWlCLEdBQUFJLEVBQUFpQixFQUFBK2IsUUFBd0IvYixHQUFBK2IsU0FBQSxLQUFnQixrQkFBQWhkLEdBQUFlLEVBQUEsTUFBQWYsR0FBQSxPQUF3Q0EsRUFBQXZCLEtBQUFvQixJQUM5SyxRQUFBcWQsSUFBQXRkLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBcUIsUUFBQWpCLEdBQUFKLEVBQUFDLEdBQWdCQSxFQUFBYyxRQUFBYyxFQUFZN0IsRUFBQTJNLFVBQUExTSxFQUFjQSxFQUFBK1Usb0JBQUFoVixFQUF3QixHQUFBNkIsSUFBT2lELFVBQUFpUSxHQUFBOVAsZ0JBQUEsU0FBQWxHLEVBQUFzQyxFQUFBakIsR0FBNkNyQixJQUFBaVcsb0JBQXdCNVUsRUFBQSxTQUFBQSxFQUFBLEtBQUFBLENBQW9CLElBQUFrQixHQUFBckIsRUFBQWxCLEVBQVcrZCxJQUFBL2QsR0FBTWtjLGVBQUEzWixFQUFBMGIsYUFBQTNiLEVBQUErYixTQUFBaGQsRUFBQThjLFdBQUEsRUFBQUMsVUFBQSxFQUFBSSxhQUFBLEtBQUF6WixLQUFBLE9BQWtHOUQsRUFBQWpCLEVBQUF1QyxJQUFPMEQsb0JBQUEsU0FBQWpHLEVBQUFzQyxFQUFBakIsR0FBcUNyQixJQUFBaVcsb0JBQXdCNVUsRUFBQSxTQUFBQSxFQUFBLEtBQUFBLENBQW9CLElBQUFrQixHQUFBckIsRUFBQWxCLEVBQVcrZCxJQUFBL2QsR0FBTWtjLGVBQUEzWixFQUFBMGIsYUFBQTNiLEVBQUErYixTQUFBaGQsRUFBQThjLFdBQUEsRUFBQUMsVUFBQSxFQUFBSSxhQUFBLEtBQUF6WixLQUFBLE9BQ25aOUQsRUFBQWpCLEVBQUF1QyxJQUFPeUQsbUJBQUEsU0FBQWhHLEVBQUFzQyxHQUFrQ3RDLElBQUFpVyxvQkFBd0IzVCxFQUFBLFNBQUFBLEVBQUEsS0FBQUEsQ0FBb0IsSUFBQWpCLEdBQUFILEVBQUFsQixFQUFXK2QsSUFBQS9kLEdBQU1rYyxlQUFBN2EsRUFBQTRjLGFBQUEsS0FBQUksU0FBQS9iLEVBQUE2YixXQUFBLEVBQUFDLFVBQUEsRUFBQUksYUFBQSxLQUFBelosS0FBQSxPQUFxRzlELEVBQUFqQixFQUFBcUIsSUFBUyxRQUFPb2QsbUJBQUFwZCxFQUFBcWQsdUJBQUEsU0FBQXpkLEVBQUFDLEdBQTBELEdBQUFsQixHQUFBaUIsRUFBQXFDLEtBQUFoQixFQUFBZ1ksR0FBQXJaLEdBQUE2QixFQUFBLElBQUE3QixFQUFBcU4sS0FBQSxNQUFBck4sRUFBQXFDLEtBQUFxWCxhQUFBcFksRUFBQU8sRUFBQTRYLEdBQUF6WixFQUFBcUIsR0FBQWlFLEVBQStNLE9BQXJJckYsR0FBQSxHQUFBbEIsR0FBQWtCLEVBQUFxQixHQUFhbEIsRUFBQUosRUFBQUMsR0FBTzRCLElBQUE3QixJQUFBMk0sVUFBQTNNLEVBQUEyWiw0Q0FBQXRZLEVBQUFyQixFQUFBNFosMENBQUF0WSxHQUFpSHJCLEdBQVN5ZCxtQkFBQSxTQUFBMWQsRUFDN2VDLEdBQUcsR0FBQWxCLEdBQUFpQixFQUFBb08sVUFBQS9NLEVBQUFyQixFQUFBMk0sVUFBQXZNLEVBQUFpQixFQUFBc2MsT0FBQSxLQUFBcmMsRUFBQXRCLEVBQUE0YSxZQUFpRXRaLEdBQUEsT0FBQUgsRUFBQSxNQUFrQixJQUFBWSxHQUFBc1gsR0FBQXJaLEVBQVlxQixHQUFBVixNQUFBVyxFQUFVRCxFQUFBc2MsTUFBQTNkLEVBQUF5YSxjQUFBcmEsRUFBMEJpQixFQUFBUixLQUFBeUUsR0FBU2pFLEVBQUFULFFBQUE2WSxHQUFBelosRUFBQStCLEdBQWtCLE1BQUEvQixFQUFBcUMsTUFBQSxNQUFBckMsRUFBQXFDLEtBQUE2QyxZQUFBLElBQUFsRixFQUFBcUMsS0FBQTZDLFVBQUFRLGlDQUFBMUYsRUFBQTZhLG9CQUFBLEdBQXNILGtCQUFBeFosR0FBQXVjLHFCQUFBeGQsRUFBQWlCLEVBQUFzYyxNQUFBdGMsRUFBQXVjLHFCQUFBeGQsSUFBQWlCLEVBQUFzYyxPQUFBOWIsRUFBQW1ELG9CQUFBM0QsSUFBQXNjLE1BQUEsTUFBQXZkLEVBQUFKLEVBQUEwYSxZQUFBLE9BQUF0YSxJQUFBaUIsRUFBQXNjLE1BQUFWLEdBQUFsZSxFQUFBaUIsRUFBQUksRUFBQWlCLEVBQUFDLEVBQUFyQixLQUFvTCxrQkFBQW9CLEdBQUF3YyxvQkFBQTdkLEVBQUE4VSxXQUMzYyxJQUFHZ0osb0JBQUEsU0FBQTlkLEVBQUFDLEVBQUFHLEdBQXFDLEdBQUFrQixHQUFBckIsRUFBQTBNLFNBQWtCckwsR0FBQVgsTUFBQVYsRUFBQTBhLGNBQXdCclosRUFBQXFjLE1BQUExZCxFQUFBd2EsYUFBd0IsSUFBQTFZLEdBQUE5QixFQUFBMGEsY0FBQXBaLEVBQUF0QixFQUFBMmEsWUFBdUNyWixPQUFBUSxFQUFBLE1BQUFSLEVBQUFKLEVBQUEsY0FBaUMsSUFBQXNDLEdBQUFuQyxFQUFBVixRQUFBSSxFQUFBcVksR0FBQXBaLEVBQXdRLElBQWhQZSxFQUFBeVksR0FBQXhaLEVBQUFlLEdBQVUsa0JBQUFNLEdBQUF5YywyQkFBQWhjLElBQUFSLEdBQUFrQyxJQUFBekMsSUFBQXlDLEVBQUFuQyxFQUFBcWMsTUFBQXJjLEVBQUF5YywwQkFBQXhjLEVBQUFQLEdBQUFNLEVBQUFxYyxRQUFBbGEsR0FBQTVCLEVBQUFtRCxvQkFBQTFELElBQUFxYyxNQUFBLE9BQStKbGEsRUFBQXhELEVBQUF3YSxjQUFrQnJhLEVBQUEsT0FBQUgsRUFBQXlhLFlBQUF1QyxHQUFBamQsRUFBQUMsSUFBQXlhLFlBQUFwWixFQUFBQyxFQUFBbkIsR0FBQXFELElBQXFEMUIsSUFBQVIsR0FBQWtDLElBQUFyRCxHQUFBMlosR0FBQXZYLFNBQUEsT0FBQXZDLEVBQUF5YSxhQUFBemEsRUFBQXlhLFlBQUFpQyxnQkFBQSx3QkFDMWJyYixHQUFBMGMsb0JBQUFqYyxJQUFBL0IsRUFBQTJhLGVBQUFsWCxJQUFBekQsRUFBQXlhLGdCQUFBeGEsRUFBQTZVLFdBQUEsS0FBMkYsSUFBQXZTLEdBQUFoQixDQUFRLFdBQUFRLEdBQUEsT0FBQTlCLEVBQUF5YSxhQUFBemEsRUFBQXlhLFlBQUFpQyxlQUFBcGEsR0FBQSxNQUFxRSxDQUFLLEdBQUFaLEdBQUExQixFQUFBME0sVUFBQWxJLEVBQUF4RSxFQUFBb0MsSUFBMkJFLEdBQUEsa0JBQUFaLEdBQUFzYyxzQkFBQXRjLEVBQUFzYyxzQkFBQTFiLEVBQUFuQyxFQUFBWSxJQUFBeUQsRUFBQVMsWUFBQVQsRUFBQVMsVUFBQU0sd0JBQUE2UyxHQUFBdFcsRUFBQVEsS0FBQThWLEdBQUE1VSxFQUFBckQsSUFDOUYsTUFEK09tQyxJQUFBLGtCQUFBakIsR0FBQTRjLHFCQUFBNWMsRUFBQTRjLG9CQUFBM2MsRUFBQW5CLEVBQUFZLEdBQUEsa0JBQUFNLEdBQUEwYyxxQkFBQS9kLEVBQUE2VSxXQUFBLHVCQUFBeFQsR0FBQTBjLG9CQUN6VmpjLElBQUEvQixFQUFBMmEsZUFBQWxYLElBQUF6RCxFQUFBeWEsZ0JBQUF4YSxFQUFBNlUsV0FBQSxHQUFBL1YsRUFBQWtCLEVBQUFzQixHQUFBRixFQUFBcEIsRUFBQUcsSUFBMEVrQixFQUFBWCxNQUFBWSxFQUFVRCxFQUFBcWMsTUFBQXZkLEVBQVVrQixFQUFBVixRQUFBSSxFQUFZdUIsSUFDMUcsUUFBQTRiLElBQUFuZSxHQUFlLGNBQUFBLEdBQUEsbUJBQUFBLEdBQUEsTUFBZ0RBLEVBQUFvZSxJQUFBcGUsRUFBQW9lLEtBQUFwZSxFQUFBLGNBQTZCLGtCQUFBQSxLQUFBLE1BQzVGLFFBQUFxZSxJQUFBcmUsRUFBQUMsR0FBaUIsR0FBQWxCLEdBQUFrQixFQUFBdUIsR0FBWSxXQUFBekMsR0FBQSxrQkFBQUEsR0FBQSxDQUFvQyxHQUFBa0IsRUFBQXFDLE9BQUEsQ0FBYXJDLElBQUFxQyxNQUFXLElBQUFqQixHQUFBLE1BQWFwQixLQUFBLElBQUFBLEVBQUFvTixJQUFBbE0sRUFBQSxjQUFBRSxFQUFBcEIsRUFBQTBNLFdBQTZDdEwsRUFBQSxPQUFBRixFQUFBLE1BQUFwQyxFQUFvQixJQUFBcUIsR0FBQSxHQUFBckIsQ0FBVyxlQUFBaUIsR0FBQSxPQUFBQSxFQUFBd0IsS0FBQXhCLEVBQUF3QixJQUFBOGMsYUFBQWxlLEVBQUFKLEVBQUF3QixLQUE2RHhCLEVBQUEsU0FBQUEsR0FBYyxHQUFBQyxHQUFBb0IsRUFBQVIsT0FBQXlFLEdBQUFqRSxFQUFBUixRQUEwQlEsRUFBQVIsSUFBUSxRQUFBYixRQUFBQyxHQUFBRyxHQUFBSCxFQUFBRyxHQUFBSixHQUE2QkEsRUFBQXNlLFdBQUFsZSxFQUFlSixHQUFTLGdCQUFBakIsR0FBQW9DLEVBQUEsY0FBb0NsQixFQUFBcUMsT0FBQSxPQUFBbkIsRUFBQSxNQUFBcEMsR0FBMkIsTUFBQUEsR0FDblosUUFBQXdmLElBQUF2ZSxFQUFBQyxHQUFpQixhQUFBRCxFQUFBcUMsTUFBQWxCLEVBQUEseUJBQUE4QyxPQUFBaUIsVUFBQWQsU0FBQXZGLEtBQUFvQixHQUFBLHFCQUFxR2dFLE9BQUFDLEtBQUFqRSxHQUFBa0UsS0FBQSxVQUE4QmxFLEVBQUEsSUFDcEosUUFBQXVlLElBQUF4ZSxHQUFlLFFBQUFDLEtBQUFsQixHQUFnQixHQUFBaUIsRUFBQSxDQUFNLEdBQUFxQixHQUFBcEIsRUFBQTZhLFVBQW1CLFFBQUF6WixLQUFBMlosV0FBQWpjLEVBQUFrQixFQUFBNmEsV0FBQS9iLEdBQUFrQixFQUFBOGEsWUFBQTlhLEVBQUE2YSxXQUFBL2IsRUFBc0VBLEVBQUFpYyxXQUFBLEtBQWtCamMsRUFBQStWLFVBQUEsR0FBZSxRQUFBL1YsS0FBQXNDLEdBQWdCLElBQUFyQixFQUFBLFdBQWtCLE1BQUssT0FBQXFCLEdBQVNwQixFQUFBbEIsRUFBQXNDLE9BQUErVCxPQUFvQixhQUFZLFFBQUEvVCxHQUFBckIsRUFBQUMsR0FBZ0IsSUFBQUQsRUFBQSxHQUFBeWUsS0FBYyxPQUFBeGUsR0FBUyxPQUFBQSxFQUFBd0IsSUFBQXpCLEVBQUF5UyxJQUFBeFMsRUFBQXdCLElBQUF4QixHQUFBRCxFQUFBeVMsSUFBQXhTLEVBQUF1YSxNQUFBdmEsT0FBQW1WLE9BQTBELE9BQUFwVixHQUFTLFFBQUFJLEdBQUFKLEVBQUFDLEVBQUFsQixHQUF1RCxNQUFyQ2lCLEdBQUFrYixHQUFBbGIsRUFBQUMsRUFBQWxCLEdBQVlpQixFQUFBd2EsTUFBQSxFQUFVeGEsRUFBQW9WLFFBQUEsS0FBZXBWLEVBQVMsUUFBQTZCLEdBQUE1QixFQUFBbEIsRUFBQXNDLEdBQTRCLE1BQVZwQixHQUFBdWEsTUFBQW5aLEVBQVVyQixHQUFlcUIsRUFBQXBCLEVBQUFtTyxVQUFjLE9BQUEvTSxPQUFBbVosTUFBQW5aLEVBQUF0QyxHQUFBa0IsRUFBQTZVLFVBQ2xkLEVBQUEvVixHQUFBc0MsSUFBT3BCLEVBQUE2VSxVQUFBLEVBQWMvVixJQURnYUEsRUFDdlosUUFBQXVDLEdBQUFyQixHQUFxRCxNQUF2Q0QsSUFBQSxPQUFBQyxFQUFBbU8sWUFBQW5PLEVBQUE2VSxVQUFBLEdBQXVDN1UsRUFBUyxRQUFBOEIsR0FBQS9CLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBb0IsY0FBQXBCLEdBQUEsSUFBQUEsRUFBQW9OLEtBQUFwTixFQUFBb2IsR0FBQXRjLEVBQUFpQixFQUFBNmEsbUJBQUF4WixHQUFBcEIsRUFBQSxPQUFBRCxFQUFBQyxJQUE2RUEsRUFBQUcsRUFBQUgsRUFBQWxCLEVBQUFzQyxHQUFXcEIsRUFBQSxPQUFBRCxFQUFjQyxHQUFTLFFBQUFzQixHQUFBdkIsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFvQixjQUFBcEIsS0FBQW9DLE9BQUF0RCxFQUFBc0QsTUFBQWhCLEVBQUFqQixFQUFBSCxFQUFBbEIsRUFBQTRCLE1BQUFVLEtBQUFHLElBQUE2YyxHQUFBcGUsRUFBQWxCLEdBQUFzQyxFQUFBLE9BQUFyQixFQUFBcUIsSUFBbUZBLEVBQUE4WixHQUFBcGMsRUFBQWlCLEVBQUE2YSxtQkFBQXhaLEdBQStCQSxFQUFBRyxJQUFBNmMsR0FBQXBlLEVBQUFsQixHQUFjc0MsRUFBQSxPQUFBckIsRUFBY3FCLEdBQVMsUUFBQXFELEdBQUExRSxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQW9CLGNBQUFwQixHQUFBLElBQUFBLEVBQUFvTixLQUFBcE4sRUFBQXFiLEdBQUF2YyxFQUFBaUIsRUFBQTZhLG1CQUFBeFosR0FBQXBCLEVBQUEsT0FBQUQsRUFBQUMsSUFBNkVBLEVBQUFHLEVBQUFILEVBQUFsQixFQUFBc0MsR0FDM2VwQixFQUFBLE9BQUFELEVBQWNDLEdBQVMsUUFBQXlELEdBQUExRCxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQW9CLGNBQUFwQixHQUFBLElBQUFBLEVBQUFvTixLQUFBcE4sRUFBQXViLEdBQUF6YyxFQUFBaUIsRUFBQTZhLG1CQUFBeFosR0FBQXBCLEVBQUFvQyxLQUFBdEQsRUFBQWlGLE1BQUEvRCxFQUFBLE9BQUFELEVBQUFDLElBQTRGQSxFQUFBRyxFQUFBSCxFQUFBLEtBQUFvQixHQUFjcEIsRUFBQW9DLEtBQUF0RCxFQUFBaUYsTUFBZS9ELEVBQUEsT0FBQUQsRUFBY0MsR0FBUyxRQUFBRixHQUFBQyxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQW9CLGNBQUFwQixHQUFBLElBQUFBLEVBQUFvTixLQUFBcE4sRUFBQTBNLFVBQUErSSxnQkFBQTNXLEVBQUEyVyxlQUFBelYsRUFBQTBNLFVBQUF3RixpQkFBQXBULEVBQUFvVCxnQkFBQWxTLEVBQUF3YixHQUFBMWMsRUFBQWlCLEVBQUE2YSxtQkFBQXhaLEdBQUFwQixFQUFBLE9BQUFELEVBQUFDLElBQXlLQSxFQUFBRyxFQUFBSCxFQUFBbEIsRUFBQStDLGFBQUFULEdBQXdCcEIsRUFBQSxPQUFBRCxFQUFjQyxHQUFTLFFBQUF3RCxHQUFBekQsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFBUSxHQUFzQixjQUFBNUIsR0FBQSxLQUFBQSxFQUFBb04sS0FBQXBOLEVBQUFtYixHQUFBcmMsRUFBQWlCLEVBQUE2YSxtQkFDN2J4WixFQUFBUSxHQUFBNUIsRUFBQSxPQUFBRCxFQUFBQyxJQUFxQkEsRUFBQUcsRUFBQUgsRUFBQWxCLEVBQUFzQyxHQUFXcEIsRUFBQSxPQUFBRCxFQUFjQyxHQUFTLFFBQUFlLEdBQUFoQixFQUFBQyxFQUFBbEIsR0FBa0IsbUJBQUFrQixJQUFBLGdCQUFBQSxHQUFBLE1BQUFBLEdBQUFvYixHQUFBLEdBQUFwYixFQUFBRCxFQUFBNmEsbUJBQUE5YixHQUFBa0IsRUFBQSxPQUFBRCxFQUFBQyxDQUFxRyxvQkFBQUEsSUFBQSxPQUFBQSxFQUFBLENBQWtDLE9BQUFBLEVBQUFrQyxVQUFtQixJQUFBdWMsSUFBQSxNQUFBemUsR0FBQW9DLE9BQUFzYyxJQUFBMWUsRUFBQW1iLEdBQUFuYixFQUFBVSxNQUFBbUIsU0FBQTlCLEVBQUE2YSxtQkFBQTliLEVBQUFrQixFQUFBd0IsS0FBQXhCLEVBQUEsT0FBQUQsRUFBQUMsSUFBa0dsQixFQUFBb2MsR0FBQWxiLEVBQUFELEVBQUE2YSxtQkFBQTliLEdBQStCQSxFQUFBeUMsSUFBQTZjLEdBQUEsS0FBQXBlLEdBQWlCbEIsRUFBQSxPQUFBaUIsRUFBY2pCLEVBQVMsS0FBQTZmLElBQUEsTUFBQTNlLEdBQUFxYixHQUFBcmIsRUFBQUQsRUFBQTZhLG1CQUFBOWIsR0FBQWtCLEVBQUEsT0FBQUQsRUFBQUMsQ0FBOEQsS0FBQTRlLElBQUEsTUFBQTlmLEdBQUF5YyxHQUFBdmIsRUFBQUQsRUFBQTZhLG1CQUMxYzliLEtBQUFzRCxLQUFBcEMsRUFBQStELE1BQUFqRixFQUFBLE9BQUFpQixFQUFBakIsQ0FBa0MsS0FBQStmLElBQUEsTUFBQTdlLEdBQUF3YixHQUFBeGIsRUFBQUQsRUFBQTZhLG1CQUFBOWIsR0FBQWtCLEVBQUEsT0FBQUQsRUFBQUMsRUFBOEQsR0FBQThlLEdBQUE5ZSxJQUFBa2UsR0FBQWxlLEdBQUEsTUFBQUEsR0FBQW1iLEdBQUFuYixFQUFBRCxFQUFBNmEsbUJBQUE5YixFQUFBLE1BQUFrQixFQUFBLE9BQUFELEVBQUFDLENBQTJFc2UsSUFBQXZlLEVBQUFDLEdBQVEsWUFBWSxRQUFBc0MsR0FBQXZDLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBb0IsR0FBQWpCLEdBQUEsT0FBQUgsSUFBQXdCLElBQUEsSUFBMEIsb0JBQUExQyxJQUFBLGdCQUFBQSxHQUFBLGNBQUFxQixFQUFBLEtBQUEyQixFQUFBL0IsRUFBQUMsRUFBQSxHQUFBbEIsRUFBQXNDLEVBQStFLG9CQUFBdEMsSUFBQSxPQUFBQSxFQUFBLENBQWtDLE9BQUFBLEVBQUFvRCxVQUFtQixJQUFBdWMsSUFBQSxNQUFBM2YsR0FBQTBDLE1BQUFyQixFQUFBckIsRUFBQXNELE9BQUFzYyxHQUFBbGIsRUFBQXpELEVBQUFDLEVBQUFsQixFQUFBNEIsTUFBQW1CLFNBQUFULEVBQUFqQixHQUFBbUIsRUFBQXZCLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBQSxJQUFpRixLQUFBdWQsSUFBQSxNQUFBN2YsR0FBQTBDLE1BQUFyQixFQUFBc0UsRUFBQTFFLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBQSxJQUF5QyxLQUFBd2QsSUFBQSxjQUMzZXplLEVBQUFzRCxFQUFBMUQsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFBLElBQWtCLEtBQUF5ZCxJQUFBLE1BQUEvZixHQUFBMEMsTUFBQXJCLEVBQUFMLEVBQUFDLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBQSxLQUF5QyxHQUFBMGQsR0FBQWhnQixJQUFBb2YsR0FBQXBmLEdBQUEsY0FBQXFCLEVBQUEsS0FBQXFELEVBQUF6RCxFQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUEsS0FBcURrZCxJQUFBdmUsRUFBQWpCLEdBQVEsWUFBWSxRQUFBNEMsR0FBQTNCLEVBQUFDLEVBQUFsQixFQUFBc0MsRUFBQWpCLEdBQXNCLG1CQUFBaUIsSUFBQSxnQkFBQUEsR0FBQSxNQUFBckIsS0FBQXdTLElBQUF6VCxJQUFBLEtBQUFnRCxFQUFBOUIsRUFBQUQsRUFBQSxHQUFBcUIsRUFBQWpCLEVBQWtGLG9CQUFBaUIsSUFBQSxPQUFBQSxFQUFBLENBQWtDLE9BQUFBLEVBQUFjLFVBQW1CLElBQUF1YyxJQUFBLE1BQUExZSxLQUFBd1MsSUFBQSxPQUFBblIsRUFBQUksSUFBQTFDLEVBQUFzQyxFQUFBSSxNQUFBLEtBQUFKLEVBQUFnQixPQUFBc2MsR0FBQWxiLEVBQUF4RCxFQUFBRCxFQUFBcUIsRUFBQVYsTUFBQW1CLFNBQUExQixFQUFBaUIsRUFBQUksS0FBQUYsRUFBQXRCLEVBQUFELEVBQUFxQixFQUFBakIsRUFBMEcsS0FBQXdlLElBQUEsTUFBQTVlLEtBQUF3UyxJQUFBLE9BQUFuUixFQUFBSSxJQUFBMUMsRUFBQXNDLEVBQUFJLE1BQUEsS0FBQWlELEVBQUF6RSxFQUFBRCxFQUFBcUIsRUFBQWpCLEVBQThELEtBQUF5ZSxJQUFBLE1BQUE3ZSxLQUFBd1MsSUFBQXpULElBQUEsS0FBQTJFLEVBQUF6RCxFQUFBRCxFQUFBcUIsRUFBQWpCLEVBQTJDLEtBQUEwZSxJQUFBLE1BQUE5ZSxHQUNwZkEsRUFBQXdTLElBQUEsT0FBQW5SLEVBQUFJLElBQUExQyxFQUFBc0MsRUFBQUksTUFBQSxLQUFBMUIsRUFBQUUsRUFBQUQsRUFBQXFCLEVBQUFqQixHQUE2QyxHQUFBMmUsR0FBQTFkLElBQUE4YyxHQUFBOWMsR0FBQSxNQUFBckIsS0FBQXdTLElBQUF6VCxJQUFBLEtBQUEwRSxFQUFBeEQsRUFBQUQsRUFBQXFCLEVBQUFqQixFQUFBLEtBQXdEbWUsSUFBQXRlLEVBQUFvQixHQUFRLFlBQVksUUFBQW9ELEdBQUFyRSxFQUFBa0IsRUFBQXhDLEVBQUEyQixHQUFvQixPQUFBc0IsR0FBQSxLQUFBSyxFQUFBLEtBQUF0QixFQUFBUSxFQUFBc0QsRUFBQXRELEVBQUEsRUFBQUMsRUFBQSxLQUF1QyxPQUFBVCxHQUFBOEQsRUFBQTlGLEVBQUFxQixPQUFxQnlFLElBQUEsQ0FBSzlELEVBQUEwWixNQUFBNVYsR0FBQXJELEVBQUFULElBQUEsTUFBQVMsRUFBQVQsRUFBQXNVLE9BQW1DLElBQUF2UixHQUFBdEIsRUFBQW5DLEVBQUFVLEVBQUFoQyxFQUFBOEYsR0FBQW5FLEVBQW9CLFdBQUFvRCxFQUFBLENBQWEsT0FBQS9DLE1BQUFTLEVBQWdCLE9BQU12QixHQUFBYyxHQUFBLE9BQUErQyxFQUFBdUssV0FBQW5PLEVBQUFHLEVBQUFVLEdBQWlDUSxFQUFBTyxFQUFBZ0MsRUFBQXZDLEVBQUFzRCxHQUFXLE9BQUF4QyxFQUFBTCxFQUFBOEIsRUFBQXpCLEVBQUFnVCxRQUFBdlIsRUFBeUJ6QixFQUFBeUIsRUFBSS9DLEVBQUFTLEVBQUksR0FBQXFELElBQUE5RixFQUFBcUIsT0FBQSxNQUFBcEIsR0FBQXFCLEVBQUFVLEdBQUFpQixDQUFnQyxXQUFBakIsRUFBQSxDQUFhLEtBQUs4RCxFQUFBOUYsRUFBQXFCLE9BQVd5RSxLQUFBOUQsRUFBQUUsRUFBQVosRUFBQXRCLEVBQUE4RixHQUFBbkUsTUFBQWEsRUFBQU8sRUFBQWYsRUFBQVEsRUFBQXNELEdBQUEsT0FBQXhDLEVBQUFMLEVBQUFqQixFQUFBc0IsRUFBQWdULFFBQUF0VSxFQUFBc0IsRUFBQXRCLEVBQTZELE9BQUFpQixHQUFTLElBQUFqQixFQUN4Zk8sRUFBQWpCLEVBQUFVLEdBQU84RCxFQUFBOUYsRUFBQXFCLE9BQVd5RSxLQUFBckQsRUFBQUksRUFBQWIsRUFBQVYsRUFBQXdFLEVBQUE5RixFQUFBOEYsR0FBQW5FLE1BQTBCVCxHQUFBLE9BQUF1QixFQUFBNk0sV0FBQXROLEVBQUEsY0FBQVMsRUFBQUUsSUFBQW1ELEVBQUFyRCxFQUFBRSxLQUEyREgsRUFBQU8sRUFBQU4sRUFBQUQsRUFBQXNELEdBQVcsT0FBQXhDLEVBQUFMLEVBQUFSLEVBQUFhLEVBQUFnVCxRQUFBN1QsRUFBeUJhLEVBQUFiLEVBQTZDLE9BQXpDdkIsSUFBQWMsRUFBQWtGLFFBQUEsU0FBQWhHLEdBQXlCLE1BQUFDLEdBQUFHLEVBQUFKLEtBQWdCK0IsRUFBUyxRQUFBZSxHQUFBMUMsRUFBQWtCLEVBQUF4QyxFQUFBMkIsR0FBb0IsR0FBQXNCLEdBQUFvYyxHQUFBcmYsRUFBWSxtQkFBQWlELEdBQUFaLEVBQUEsY0FBc0NyQyxFQUFBaUQsRUFBQWxELEtBQUFDLEdBQVksTUFBQUEsRUFBQXFDLEVBQUEsYUFBd0IsUUFBQWlCLEdBQUFMLEVBQUEsS0FBQWpCLEVBQUFRLEVBQUFzRCxFQUFBdEQsRUFBQSxFQUFBQyxFQUFBLEtBQUFzQyxFQUFBL0UsRUFBQWdGLE9BQTZDLE9BQUFoRCxJQUFBK0MsRUFBQUUsS0FBa0JhLElBQUFmLEVBQUEvRSxFQUFBZ0YsT0FBQSxDQUFnQmhELEVBQUEwWixNQUFBNVYsR0FBQXJELEVBQUFULElBQUEsTUFBQVMsRUFBQVQsRUFBQXNVLE9BQW1DLElBQUFoVSxHQUFBbUIsRUFBQW5DLEVBQUFVLEVBQUErQyxFQUFBRyxNQUFBdkQsRUFBdUIsV0FBQVcsRUFBQSxDQUFhTixNQUFBUyxFQUFTLE9BQU12QixHQUFBYyxHQUFBLE9BQUFNLEVBQUFnTixXQUFBbk8sRUFBQUcsRUFBQVUsR0FBaUNRLEVBQUFPLEVBQUFULEVBQ2pmRSxFQUFBc0QsR0FBSyxPQUFBeEMsRUFBQUwsRUFBQVgsRUFBQWdCLEVBQUFnVCxRQUFBaFUsRUFBeUJnQixFQUFBaEIsRUFBSU4sRUFBQVMsRUFBSSxHQUFBc0MsRUFBQUUsS0FBQSxNQUFBaEYsR0FBQXFCLEVBQUFVLEdBQUFpQixDQUEwQixXQUFBakIsRUFBQSxDQUFhLE1BQUsrQyxFQUFBRSxLQUFRYSxJQUFBZixFQUFBL0UsRUFBQWdGLE9BQUFELEVBQUE3QyxFQUFBWixFQUFBeUQsRUFBQUcsTUFBQXZELEdBQUEsT0FBQW9ELElBQUF2QyxFQUFBTyxFQUFBZ0MsRUFBQXZDLEVBQUFzRCxHQUFBLE9BQUF4QyxFQUFBTCxFQUFBOEIsRUFBQXpCLEVBQUFnVCxRQUFBdlIsRUFBQXpCLEVBQUF5QixFQUFvRixPQUFBOUIsR0FBUyxJQUFBakIsRUFBQU8sRUFBQWpCLEVBQUFVLElBQWErQyxFQUFBRSxLQUFRYSxJQUFBZixFQUFBL0UsRUFBQWdGLE9BQUFELEVBQUFsQyxFQUFBYixFQUFBVixFQUFBd0UsRUFBQWYsRUFBQUcsTUFBQXZELEdBQUEsT0FBQW9ELElBQWlEN0QsR0FBQSxPQUFBNkQsRUFBQXVLLFdBQUF0TixFQUFBLGNBQUErQyxFQUFBcEMsSUFBQW1ELEVBQUFmLEVBQUFwQyxLQUEyREgsRUFBQU8sRUFBQWdDLEVBQUF2QyxFQUFBc0QsR0FBVyxPQUFBeEMsRUFBQUwsRUFBQThCLEVBQUF6QixFQUFBZ1QsUUFBQXZSLEVBQXlCekIsRUFBQXlCLEVBQTZDLE9BQXpDN0QsSUFBQWMsRUFBQWtGLFFBQUEsU0FBQWhHLEdBQXlCLE1BQUFDLEdBQUFHLEVBQUFKLEtBQWdCK0IsRUFBUyxnQkFBQS9CLEVBQUFxQixFQUFBUSxFQUFBRSxHQUF5QixnQkFBQUYsSUFBQSxPQUFBQSxLQUFBUSxPQUFBc2MsSUFBQSxPQUFBOWMsRUFBQUosTUFBQUksSUFBQWxCLE1BQUFtQixTQUMzYSxJQUFBaEQsR0FBQSxnQkFBQStDLElBQUEsT0FBQUEsQ0FBb0MsSUFBQS9DLEVBQUEsT0FBQStDLEVBQUFNLFVBQXdCLElBQUF1YyxJQUFBMWUsRUFBQSxDQUFXLEdBQUFvQyxHQUFBUCxFQUFBSixHQUFZLEtBQUEzQyxFQUFBdUMsRUFBUSxPQUFBdkMsR0FBUyxDQUFFLEdBQUFBLEVBQUEyQyxNQUFBVyxFQUFBLFNBQUF0RCxFQUFBdU8sSUFBQXhMLEVBQUFRLE9BQUFzYyxHQUFBN2YsRUFBQXVELE9BQUFSLEVBQUFRLEtBQUEsQ0FBd0R0RCxFQUFBaUIsRUFBQWxCLEVBQUFzVyxTQUFlL1QsRUFBQWpCLEVBQUF0QixFQUFBK0MsRUFBQVEsT0FBQXNjLEdBQUE5YyxFQUFBbEIsTUFBQW1CLFNBQUFELEVBQUFsQixNQUFBb0IsR0FBOENWLEVBQUFHLElBQUE2YyxHQUFBdmYsRUFBQStDLEdBQWNSLEVBQUEsT0FBQXJCLEVBQWNBLEVBQUFxQixDQUFJLE1BQUFyQixHQUFhakIsRUFBQWlCLEVBQUFsQixFQUFPLE9BQU1tQixFQUFBRCxFQUFBbEIsR0FBWUEsSUFBQXNXLFFBQVl2VCxFQUFBUSxPQUFBc2MsSUFBQXRkLEVBQUErWixHQUFBdlosRUFBQWxCLE1BQUFtQixTQUFBOUIsRUFBQTZhLG1CQUFBOVksRUFBQUYsRUFBQUosS0FBQUosRUFBQSxPQUFBckIsSUFBQXFCLElBQUFVLEVBQUFvWixHQUFBdFosRUFBQTdCLEVBQUE2YSxtQkFBQTlZLEtBQUFQLElBQUE2YyxHQUFBaGQsRUFBQVEsR0FBQUUsRUFBQSxPQUFBL0IsSUFBQStCLEdBQXFKLE1BQUFULEdBQUF0QixFQUFZLEtBQUE0ZSxJQUFBNWUsRUFBQSxDQUFXLElBQUFsQixFQUFBK0MsRUFBQUosSUFBWSxPQUFBSixHQUFTLENBQUUsR0FBQUEsRUFBQUksTUFDaGYzQyxFQUFBLFFBQUF1QyxFQUFBZ00sSUFBQSxDQUFnQnRPLEVBQUFpQixFQUFBcUIsRUFBQStULFNBQWUvVCxFQUFBakIsRUFBQWlCLEVBQUFRLEVBQUFFLEdBQVdWLEVBQUEsT0FBQXJCLEVBQWNBLEVBQUFxQixDQUFJLE1BQUFyQixHQUFhakIsRUFBQWlCLEVBQUFxQixFQUFPLE9BQU1wQixFQUFBRCxFQUFBcUIsR0FBWUEsSUFBQStULFFBQVkvVCxFQUFBaWEsR0FBQXpaLEVBQUE3QixFQUFBNmEsbUJBQUE5WSxHQUErQlYsRUFBQSxPQUFBckIsRUFBY0EsRUFBQXFCLEVBQUksTUFBQUMsR0FBQXRCLEVBQVksS0FBQTZlLElBQUE3ZSxFQUFBLENBQVcsVUFBQXFCLEVBQUEsUUFBQUEsRUFBQWdNLElBQUEsQ0FBMEJ0TyxFQUFBaUIsRUFBQXFCLEVBQUErVCxTQUFlL1QsRUFBQWpCLEVBQUFpQixFQUFBLEtBQUFVLEdBQWNWLEVBQUFnQixLQUFBUixFQUFBbUMsTUFBZTNDLEVBQUEsT0FBQXJCLEVBQWNBLEVBQUFxQixDQUFJLE1BQUFyQixHQUFRakIsRUFBQWlCLEVBQUFxQixHQUFZQSxFQUFBbWEsR0FBQTNaLEVBQUE3QixFQUFBNmEsbUJBQUE5WSxHQUErQlYsRUFBQWdCLEtBQUFSLEVBQUFtQyxNQUFlM0MsRUFBQSxPQUFBckIsRUFBY0EsRUFBQXFCLEVBQUksTUFBQUMsR0FBQXRCLEVBQVksS0FBQThlLElBQUE5ZSxFQUFBLENBQVcsSUFBQWxCLEVBQUErQyxFQUFBSixJQUFZLE9BQUFKLEdBQVMsQ0FBRSxHQUFBQSxFQUFBSSxNQUFBM0MsRUFBQSxRQUFBdUMsRUFBQWdNLEtBQUFoTSxFQUFBc0wsVUFBQStJLGdCQUFBN1QsRUFBQTZULGVBQUFyVSxFQUFBc0wsVUFBQXdGLGlCQUNoWnRRLEVBQUFzUSxlQUFBLENBQWtCcFQsRUFBQWlCLEVBQUFxQixFQUFBK1QsU0FBZS9ULEVBQUFqQixFQUFBaUIsRUFBQVEsRUFBQUMsYUFBQUMsR0FBd0JWLEVBQUEsT0FBQXJCLEVBQWNBLEVBQUFxQixDQUFJLE1BQUFyQixHQUFhakIsRUFBQWlCLEVBQUFxQixFQUFPLE9BQU1wQixFQUFBRCxFQUFBcUIsR0FBWUEsSUFBQStULFFBQVkvVCxFQUFBb2EsR0FBQTVaLEVBQUE3QixFQUFBNmEsbUJBQUE5WSxHQUErQlYsRUFBQSxPQUFBckIsRUFBY0EsRUFBQXFCLEVBQUksTUFBQUMsR0FBQXRCLEdBQVksbUJBQUE2QixJQUFBLGdCQUFBQSxHQUFBLE1BQUFBLEdBQUEsR0FBQUEsRUFBQSxPQUFBUixHQUFBLElBQUFBLEVBQUFnTSxLQUFBdE8sRUFBQWlCLEVBQUFxQixFQUFBK1QsU0FBQS9ULEVBQUFqQixFQUFBaUIsRUFBQVEsRUFBQUUsS0FBQWhELEVBQUFpQixFQUFBcUIsS0FBQWdhLEdBQUF4WixFQUFBN0IsRUFBQTZhLG1CQUFBOVksSUFBQVYsRUFBQSxPQUFBckIsSUFBQXFCLEVBQUFDLEVBQUF0QixFQUF5SyxJQUFBK2UsR0FBQWxkLEdBQUEsTUFBQTRDLEdBQUF6RSxFQUFBcUIsRUFBQVEsRUFBQUUsRUFBMkIsSUFBQW9jLEdBQUF0YyxHQUFBLE1BQUFpQixHQUFBOUMsRUFBQXFCLEVBQUFRLEVBQUFFLEVBQXNDLElBQVhqRCxHQUFBeWYsR0FBQXZlLEVBQUE2QixHQUFXLG1CQUFBQSxHQUFBLE9BQUE3QixFQUFBcU4sS0FBd0MsY0FBQXRMLEVBQUEvQixFQUFBcUMsS0FBQWxCLEVBQUEsTUFBQVksRUFBQTZTLGFBQzVjN1MsRUFBQXhCLE1BQUEsYUFBcUIsTUFBQXhCLEdBQUFpQixFQUFBcUIsSUFDckIsUUFBQTJkLElBQUFoZixFQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUFqQixHQUF1QixRQUFBeUIsR0FBQTdCLEVBQUFDLEVBQUFsQixHQUFrQixHQUFBc0MsR0FBQXBCLEVBQUFnYixjQUF1QmhiLEdBQUFrVixNQUFBLE9BQUFuVixFQUFBaWYsR0FBQWhmLEVBQUEsS0FBQWxCLEVBQUFzQyxHQUFBNmQsR0FBQWpmLEVBQUFELEVBQUFtVixNQUFBcFcsRUFBQXNDLEdBQWtELFFBQUFDLEdBQUF0QixFQUFBQyxHQUFnQixHQUFBbEIsR0FBQWtCLEVBQUF1QixHQUFZLFFBQUF6QyxHQUFBaUIsS0FBQXdCLE1BQUF6QyxJQUFBa0IsRUFBQTZVLFdBQUEsS0FBMkMsUUFBQS9TLEdBQUEvQixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQTJCLEdBQVBDLEVBQUF0QixFQUFBQyxJQUFPbEIsRUFBQSxNQUFBc0MsSUFBQWlaLEdBQUFyYSxHQUFBLEdBQUF5RSxFQUFBMUUsRUFBQUMsRUFBZ0NsQixHQUFBa0IsRUFBQTBNLFVBQWNoTyxHQUFBNkQsUUFBQXZDLENBQWEsSUFBQUcsR0FBQXJCLEVBQUFZLFFBQXFHLE9BQXBGTSxHQUFBNlUsV0FBQSxFQUFlalQsRUFBQTdCLEVBQUFDLEVBQUFHLEdBQVNILEVBQUF3YSxjQUFBMWIsRUFBQTRlLE1BQXdCMWQsRUFBQTBhLGNBQUE1YixFQUFBNEIsTUFBd0JVLEdBQUFpWixHQUFBcmEsR0FBQSxHQUFZQSxFQUFBa1YsTUFBZSxRQUFBNVQsR0FBQXZCLEdBQWMsR0FBQUMsR0FBQUQsRUFBQTJNLFNBQWtCMU0sR0FBQWtmLGVBQUFuRixHQUFBaGEsRUFBQUMsRUFBQWtmLGVBQUFsZixFQUFBa2YsaUJBQUFsZixFQUFBVyxTQUFBWCxFQUFBVyxTQUFBb1osR0FBQWhhLEVBQ25hQyxFQUFBVyxTQUFBLEdBQWNlLEVBQUEzQixFQUFBQyxFQUFBeVYsZUFBcUIsUUFBQWhSLEdBQUExRSxFQUFBQyxHQUE0RCxHQUE1QyxPQUFBRCxHQUFBQyxFQUFBa1YsUUFBQW5WLEVBQUFtVixNQUFBaFUsRUFBQSxjQUE0QyxPQUFBbEIsRUFBQWtWLE1BQUEsQ0FBbUJuVixFQUFBQyxFQUFBa1YsS0FBVSxJQUFBcFcsR0FBQW1jLEdBQUFsYixJQUFBNGEsYUFBQTVhLEVBQUFpYixlQUFzRCxLQUFWaGIsRUFBQWtWLE1BQUFwVyxFQUFVQSxFQUFBLE9BQUFrQixFQUFrQixPQUFBRCxFQUFBb1YsU0FBaUJwVixJQUFBb1YsUUFBQXJXLElBQUFxVyxRQUFBOEYsR0FBQWxiLElBQUE0YSxhQUFBNWEsRUFBQWliLGdCQUFBbGMsRUFBQSxPQUFBa0IsQ0FBNkVsQixHQUFBcVcsUUFBQSxLQUFlLE1BQUFuVixHQUFBa1YsTUFBZSxRQUFBelIsR0FBQTFELEVBQUFDLEdBQWdCLE9BQUFBLEVBQUFvTixLQUFjLE9BQUE5TCxFQUFBdEIsRUFBWSxNQUFNLFFBQUFtYSxHQUFBbmEsRUFBYSxNQUFNLFFBQUEwQixFQUFBMUIsSUFBQTBNLFVBQUErSSxlQUFzQyxZQUFZLEdBQUEzVixHQUFBQyxFQUFBb2YscUJBQUEzYixFQUFBekQsRUFBQXFmLGtCQUFBcmUsRUFBQWhCLEVBQUFzZiwwQkFDcmIvYyxFQUFBdEMsRUFBQXNmLGdCQUFBNWQsRUFBQTFCLEVBQUF1ZixrQkFBQS9hLEVBQUExRixFQUFBMGdCLG9CQUFBM2MsRUFBQS9ELEVBQUEyZ0Isb0JBQUF0ZSxFQUFBckMsRUFBQTRnQixnQ0FBK0gzZixHQUFBc2QsR0FBQWpjLEVBQUFqQixFQUFBLFNBQUFKLEVBQUFDLEdBQXVCRCxFQUFBMmEsY0FBQTFhLEdBQWtCLFNBQUFELEVBQUFDLEdBQWVELEVBQUF5YSxjQUFBeGEsR0FBb0IsSUFBQTJFLEdBQUE1RSxFQUFBd2QsbUJBQUExZSxFQUFBa0IsRUFBQXlkLHVCQUFBaGQsRUFBQVQsRUFBQTBkLG1CQUFBa0MsRUFBQTVmLEVBQUE4ZCxtQkFBc0csUUFBTytCLFVBQUEsU0FBQTdmLEVBQUFDLEVBQUFsQixHQUEwQixPQUFBa0IsRUFBQWdiLGdCQUFBaGIsRUFBQWdiLGVBQUFsYyxFQUFBLE1BQUEyRSxHQUFBMUQsRUFBQUMsRUFBMEQsUUFBQUEsRUFBQW9OLEtBQWMsY0FBQXJOLEVBQUFtQixFQUFBLGFBQWdDLElBQUFFLEdBQUFwQixFQUFBb0MsS0FBQWpDLEVBQUFILEVBQUEyYSxhQUFBeFksRUFBQWlYLEdBQUFwWixFQUMvUixPQURxVW1DLEdBQUFxWCxHQUFBeFosRUFBQW1DLEdBQVVmLElBQUFqQixFQUFBZ0MsR0FBU25DLEVBQUE2VSxXQUNuZixFQUFFLGdCQUFBelQsSUFBQSxPQUFBQSxHQUFBLGtCQUFBQSxHQUFBMUIsUUFBQU0sRUFBQW9OLElBQUEsRUFBQWpOLEVBQUFnYSxHQUFBbmEsR0FBQTJFLEVBQUEzRSxFQUFBb0IsR0FBQVosRUFBQVIsRUFBQWxCLEdBQUFrQixFQUFBOEIsRUFBQS9CLEVBQUFDLEdBQUEsRUFBQUcsS0FBQUgsRUFBQW9OLElBQUEsRUFBQXhMLEVBQUE3QixFQUFBQyxFQUFBb0IsR0FBQXBCLEVBQUEwYSxjQUFBdmEsRUFBQUgsSUFBQWtWLE9BQXlKbFYsQ0FBUyxRQUFBRCxFQUFBLENBQXNELEdBQTVDSSxFQUFBSCxFQUFBb0MsS0FBU3RELEVBQUFrQixFQUFBMmEsYUFBaUJ2WixFQUFBcEIsRUFBQTBhLGNBQWtCWixHQUFBdlgsUUFBQSxPQUFBekQsTUFBQXNDLE9BQTZCLFdBQUF0QyxHQUFBc0MsSUFBQXRDLEVBQUEsQ0FBeUJrQixFQUFBeUUsRUFBQTFFLEVBQUFDLEVBQVMsTUFBQUQsR0FBUXFCLEVBQUFnWSxHQUFBcFosR0FBUW9CLEVBQUFvWSxHQUFBeFosRUFBQW9CLEdBQVVqQixJQUFBckIsRUFBQXNDLEdBQVNwQixFQUFBNlUsV0FBQSxFQUFlalQsRUFBQTdCLEVBQUFDLEVBQUFHLEdBQVNILEVBQUEwYSxjQUFBNWIsRUFBa0JrQixJQUFBa1YsTUFBVSxNQUFBbFYsRUFBUyxjQUFBRyxHQUFBZ2EsR0FBQW5hLEdBQUFvQixFQUFBLGNBQUFyQixFQUFBQyxFQUFBME0sVUFBQXhMLEVBQUEsUUFBQXJDLEVBQUFtQixJQUFBMmEsY0FBQW5hLEVBQUFSLEVBQUFsQixHQUFBc0MsR0FBQSxHQUFBQSxFQUFBdWUsRUFBQTVmLEVBQUFDLEVBQUFsQixHQUFBZ0QsRUFBQS9CLEVBQUFDLEVBQUFvQixFQUFBakIsRUFBc0gsY0FBQW1CLEdBQUF0QixHQUMvZUcsRUFBQUgsRUFBQXlhLFlBQUEsT0FBQXRhLEdBQUFpQixFQUFBcEIsRUFBQXdhLGNBQUFyYSxFQUFBNmMsR0FBQWpkLEVBQUFDLEVBQUFHLEVBQUEsVUFBQXJCLEdBQUFzQyxJQUFBakIsR0FBQTBDLElBQUE3QyxFQUFBeUUsRUFBQTFFLEVBQUFDLEtBQUFvQixFQUFBakIsRUFBQTBmLFFBQUExZCxFQUFBbkMsRUFBQTBNLFdBQUEsT0FBQTNNLEdBQUEsT0FBQUEsRUFBQW1WLFFBQUEvUyxFQUFBMmQsU0FBQXRiLEVBQUF4RSxNQUFBNlUsV0FBQSxFQUFBN1UsRUFBQWtWLE1BQUE4SixHQUFBaGYsRUFBQSxLQUFBb0IsRUFBQXRDLEtBQUErRCxJQUFBakIsRUFBQTdCLEVBQUFDLEVBQUFvQixJQUFBcEIsRUFBQXdhLGNBQUFyYSxFQUFBSCxJQUFBa1YsU0FBQXJTLElBQUE3QyxFQUFBeUUsRUFBQTFFLEVBQUFDLEtBQXNRLFFBQUFzQyxFQUFBdEMsR0FBWSxPQUFBRCxHQUFBb0IsRUFBQW5CLEdBQWVHLEVBQUFILEVBQUFvQyxJQUFTLElBQUF2QixHQUFBYixFQUFBMGEsYUFDekwsT0FEK010WixHQUFBcEIsRUFBQTJhLGFBQWlCLE9BQUF2WixNQUFBUCxFQUFBLE9BQUFPLEVBQUFGLEVBQUEsZUFBeUNpQixFQUFBLE9BQUFwQyxJQUFBMmEsY0FBQSxLQUFnQ1osR0FBQXZYLFNBQUEsT0FBQW5CLEdBQUFQLElBQUFPLEdBQUFQLEVBQUFPLEVBQUFTLFNBQUEvQixFQUFBSyxFQUFBaUIsR0FBQVAsRUFBQSxLQUFBc0IsR0FBQXJDLEVBQUFLLEVBQUFnQyxLQUFBbkMsRUFBQTZVLFdBQUEsSUFBQXhULEVBQUF0QixFQUFBQyxHQUMxWixhQUFBbEIsSUFBQTBFLEdBQUF6QyxFQUFBWixFQUFBaUIsSUFBQXBCLEVBQUFnYixlQUFBLFdBQUFoYixFQUFBLE9BQUE0QixFQUFBN0IsRUFBQUMsRUFBQWEsR0FBQWIsRUFBQTBhLGNBQUF0WixFQUFBcEIsSUFBQWtWLFFBQUFsVixFQUFBeUUsRUFBQTFFLEVBQUFDLEdBQWlIQSxDQUFTLHNCQUFBRCxHQUFBb0IsRUFBQW5CLEdBQUFELEVBQUFDLEVBQUEyYSxhQUFBLE9BQUE1YSxNQUFBQyxFQUFBMGEsZUFBQTFhLEVBQUEwYSxjQUFBM2EsRUFBQSxJQUFtRyxRQUFBQyxFQUFBb04sSUFBQSxDQUFlLFFBQXVQLE1BQXZQak4sR0FBQUgsRUFBQTJhLGFBQXdCYixHQUFBdlgsUUFBQSxPQUFBcEMsTUFBQUosS0FBQTJhLGNBQUEsT0FBQXZhLEVBQUFlLEVBQUEsZUFBdUUsT0FBQWYsR0FBQUgsRUFBQTBhLGdCQUFBdmEsTUFBQUgsRUFBQTBhLGVBQXdEdFosRUFBQWpCLEVBQUEwQixTQUFhN0IsRUFBQTBNLFVBQUEsT0FBQTNNLEVBQUFpZixHQUFBaGYsSUFBQTBNLFVBQUF0TCxFQUFBdEMsR0FBQW1nQixHQUFBamYsSUFBQTBNLFVBQUF0TCxFQUFBdEMsR0FBaUVrQixFQUFBMGEsY0FBQXZhLEVBQWtCSCxFQUFBME0sU0FDbmUsbUJBQW1CLFFBQUEzTSxFQUFBLENBQTBELEdBQWhEMkIsRUFBQTFCLElBQUEwTSxVQUFBK0ksZUFBK0J0VixFQUFBSCxFQUFBMmEsYUFBaUJiLEdBQUF2WCxRQUFBLE9BQUFwQyxNQUFBSixLQUFBMmEsY0FBQSxNQUFBdmEsRUFBQWUsRUFBQSxtQkFBc0UsV0FBQWYsR0FBQUgsRUFBQTBhLGdCQUFBdmEsRUFBQSxDQUF1Q0gsRUFBQXlFLEVBQUExRSxFQUFBQyxFQUFTLE1BQUFELEdBQVEsT0FBQUEsRUFBQUMsRUFBQWtWLE1BQUErSixHQUFBamYsRUFBQSxLQUFBRyxFQUFBckIsR0FBQThDLEVBQUE3QixFQUFBQyxFQUFBRyxHQUF5Q0gsRUFBQTBhLGNBQUF2YSxFQUFrQkgsSUFBQWtWLE1BQVUsTUFBQWxWLEVBQVMsU0FBQUQsRUFBQSxDQUE0QixHQUFqQmpCLEVBQUFrQixFQUFBMmEsYUFBaUJiLEdBQUF2WCxRQUFBLE9BQUF6RCxNQUFBa0IsRUFBQTBhLG1CQUEyQyxXQUFBNWIsR0FBQWtCLEVBQUEwYSxnQkFBQTViLEVBQUEsQ0FBdUNrQixFQUFBeUUsRUFBQTFFLEVBQUFDLEVBQVMsTUFBQUQsR0FBUTZCLEVBQUE3QixFQUFBQyxFQUFBbEIsR0FBU2tCLEVBQUEwYSxjQUFBNWIsRUFBa0JrQixJQUFBa1YsTUFBVSxNQUFBbFYsRUFBUyxTQUFBa0IsRUFBQSxTQUFrQjZlLGdCQUFBLFNBQUFoZ0IsRUFBQUMsRUFDeGRsQixHQUFHLE9BQUFrQixFQUFBb04sS0FBYyxPQUFBK00sR0FBQW5hLEVBQWEsTUFBTSxRQUFBc0IsRUFBQXRCLEVBQVksTUFBTSxTQUFBa0IsRUFBQSxPQUE0RixNQUEzRWxCLEdBQUE2VSxXQUFBLEdBQWdCLE9BQUE5VSxFQUFBQyxFQUFBa1YsTUFBQSxLQUFBbFYsRUFBQWtWLFFBQUFuVixFQUFBbVYsUUFBQWxWLEVBQUFrVixNQUFBblYsRUFBQW1WLE9BQTJELElBQUFsVixFQUFBZ2IsZ0JBQUFoYixFQUFBZ2IsZUFBQWxjLEVBQUEyRSxFQUFBMUQsRUFBQUMsSUFBMERBLEVBQUE4YSxZQUFBLEtBQW1COWEsRUFBQTZhLFdBQUEsS0FBa0I3YSxFQUFBa1YsTUFBQSxPQUFBblYsRUFBQWlmLEdBQUFoZixFQUFBLFVBQUFsQixHQUFBbWdCLEdBQUFqZixFQUFBRCxFQUFBbVYsTUFBQSxLQUFBcFc7QUFBd0QsSUFBQWtCLEVBQUFvTixNQUFBck4sRUFBQUMsRUFBQTBNLFVBQUExTSxFQUFBMGEsY0FBQTNhLEVBQUFXLE1BQUFWLEVBQUF3YSxjQUFBemEsRUFBQTJkLE9BQTJFMWQsRUFBQWtWLFNBQ3BYLFFBQUE4SyxJQUFBamdCLEVBQUFDLEVBQUFsQixHQUFtQixRQUFBc0MsR0FBQXJCLEdBQWNBLEVBQUE4VSxXQUFBLEVBQWUsR0FBQTFVLEdBQUFKLEVBQUFrZ0IsZUFBQXJlLEVBQUE3QixFQUFBbWdCLG1CQUFBN2UsRUFBQXRCLEVBQUFvZ0IsbUJBQUFyZSxFQUFBL0IsRUFBQXFnQix3QkFBQTllLEVBQUF2QixFQUFBc2dCLGNBQUE1YixFQUFBMUUsRUFBQXVnQixZQUFBN2MsRUFBQXpELEVBQUF1Z0IscUJBQUF6Z0IsRUFBQUUsRUFBQXdnQixlQUFBaGQsRUFBQXhELEVBQUF5Z0IsZUFBQTFmLEVBQUFmLEVBQUEwZ0IsaUJBQUFwZSxFQUFBeEQsRUFBQTZoQiw2QkFBQWpmLEVBQUE1QyxFQUFBOGhCLGlDQUFBcGMsRUFBQTFGLEVBQUEraEIsa0JBQUFoZSxFQUFBLE9BQUExQixFQUFBLE9BQUF3RCxFQUFBLE1BQ2hELE9BRDhYNUUsR0FBQStnQixVQUFBamUsRUFBQSxhQUEwQjFCLEVBQUEsU0FBQXBCLEVBQUFDLEVBQUFsQixJQUFtQmtCLEVBQUF5YSxZQUFBM2IsSUFBQXNDLEVBQUFwQixJQUF3QjJFLEVBQUEsU0FBQTVFLEVBQUFDLEVBQUFsQixFQUFBcUIsR0FBcUJyQixJQUFBcUIsR0FBQWlCLEVBQUFwQixLQUFZa0IsRUFBQXVELEVBQUEsY0FDN2RzYyxhQUFBLFNBQUFoaEIsRUFBQUMsRUFBQWxCLEdBQTZCLEdBQUFELEdBQUFtQixFQUFBMmEsWUFBNkgsUUFBeEcsT0FBQTliLElBQUFtQixFQUFBMGEsY0FBOEIsYUFBQTFhLEVBQUFnYixnQkFBQSxhQUFBbGMsSUFBQWtCLEVBQUEyYSxhQUFBLE1BQTBFM2EsRUFBQW9OLEtBQWMsa0JBQW1CLGNBQUF5TSxJQUFBN1osR0FBQSxJQUF5QixRQUFvSyxNQUFwS2UsR0FBQWYsR0FBWStHLEdBQUErUyxHQUFBOVosR0FBTytHLEdBQUF3UyxHQUFBdlosR0FBUW5CLEVBQUFtQixFQUFBME0sVUFBYzdOLEVBQUFxZ0IsaUJBQUFyZ0IsRUFBQThCLFFBQUE5QixFQUFBcWdCLGVBQUFyZ0IsRUFBQXFnQixlQUFBLE1BQXFFLE9BQUFuZixHQUFBLE9BQUFBLEVBQUFtVixRQUFBMVEsRUFBQXhFLEtBQUE2VSxZQUFBLEdBQWlEaFMsRUFBQTdDLEdBQUssSUFBWSxRQUFBRixFQUFBRSxHQUFZbEIsRUFBQTJFLEdBQU0sSUFBQWpELEdBQUFSLEVBQUFvQyxJQUFhLFdBQUFyQyxHQUFBLE1BQUFDLEVBQUEwTSxVQUFBLENBQWdDLEdBQUEzTixHQUFBZ0IsRUFBQTJhLGNBQUFqVyxFQUFBekUsRUFBQTBNLFVBQUE5SSxFQUFBSixHQUEwQ2lCLEdBQ3BmbkQsRUFBQW1ELEVBQUFqRSxFQUFBekIsRUFBQUYsRUFBQUMsRUFBQThFLEdBQWV6QyxFQUFBcEIsRUFBQUMsRUFBQXlFLEVBQUFqRSxFQUFBekIsRUFBQUYsRUFBQUMsR0FBaUJpQixFQUFBd0IsTUFBQXZCLEVBQUF1QixNQUFBdkIsRUFBQTZVLFdBQUEsU0FBa0MsQ0FBSyxJQUFBaFcsRUFBQSxjQUFBbUIsRUFBQTBNLFVBQUF4TCxFQUFBLGtCQUEyRCxJQUFObkIsRUFBQXlELElBQU1nQixFQUFBeEUsR0FBQXNDLEVBQUF0QyxFQUFBbEIsRUFBQWlCLElBQUFxQixFQUFBcEIsT0FBdUIsQ0FBS0QsRUFBQUksRUFBQUssRUFBQTNCLEVBQUFDLEVBQUFpQixFQUFBQyxFQUFlRCxHQUFBLElBQUFoQixFQUFBaUIsRUFBQWtWLE1BQWdCLE9BQUFuVyxHQUFTLENBQUUsT0FBQUEsRUFBQXFPLEtBQUEsSUFBQXJPLEVBQUFxTyxJQUFBL0wsRUFBQXRCLEVBQUFoQixFQUFBMk4sZUFBeUMsUUFBQTNOLEVBQUFxTyxLQUFBLE9BQUFyTyxFQUFBbVcsTUFBQSxDQUFtQ25XLEVBQUFtVyxNQUFBLE9BQUFuVyxFQUFvQkEsSUFBQW1XLEtBQVUsVUFBUyxHQUFBblcsSUFBQWlCLEVBQUEsS0FBZSxNQUFLLE9BQUFqQixFQUFBb1csU0FBaUIsQ0FBRSxVQUFBcFcsRUFBQSxRQUFBQSxFQUFBLFNBQUFpQixFQUFBLEtBQUFELEVBQStDaEIsS0FBQSxPQUFjQSxFQUFBb1csUUFBQSxPQUFBcFcsRUFBQSxPQUFnQ0EsSUFBQW9XLFFBQVlyVCxFQUFBL0IsRUFBQVMsRUFBQTNCLEVBQUFDLElBQUFzQyxFQUFBcEIsR0FBaUJBLEVBQUEwTSxVQUFBM00sRUFBYyxPQUFBQyxFQUFBdUIsTUFDMWV2QixFQUFBNlUsV0FBQSxLQUFtQixXQUFZLFdBQUE5VSxHQUFBLE1BQUFDLEVBQUEwTSxVQUFBL0gsRUFBQTVFLEVBQUFDLEVBQUFELEVBQUEyYSxjQUFBN2IsT0FBd0QsQ0FBSyxtQkFBQUEsR0FBQSxjQUFBbUIsRUFBQTBNLFVBQUF4TCxFQUFBLGtCQUFzRW5CLEdBQUEwRCxJQUFNM0UsRUFBQTBFLElBQU1nQixFQUFBeEUsR0FBQTBCLEVBQUExQixJQUFBb0IsRUFBQXBCLEtBQUEwTSxVQUFBOUssRUFBQS9DLEVBQUFrQixFQUFBakIsRUFBQWtCLEdBQXVDLFdBQVksU0FBQW5CLEVBQUFtQixFQUFBMGEsZUFBQSxPQUFBeFosRUFBQSxPQUEyQ2xCLEVBQUFvTixJQUFBLEVBQVE1TSxJQUFLVCxHQUFBLEtBQUFoQixFQUFBaUIsRUFBQTBNLGFBQUEzTixFQUFBLE9BQUFpQixHQUF1QyxPQUFBakIsR0FBUyxDQUFFLE9BQUFBLEVBQUFxTyxLQUFBLElBQUFyTyxFQUFBcU8sS0FBQSxJQUFBck8sRUFBQXFPLElBQUFsTSxFQUFBLFdBQTRDLFFBQUFuQyxFQUFBcU8sSUFBQTVNLEVBQUE2QyxLQUFBdEUsRUFBQXFELFVBQWlDLFdBQUFyRCxFQUFBbVcsTUFBQSxDQUF3Qm5XLEVBQUFtVyxNQUFBLE9BQUFuVyxFQUFvQkEsSUFBQW1XLEtBQVUsVUFBUyxLQUFLLE9BQUFuVyxFQUFBb1csU0FBaUIsQ0FBRSxVQUMvZXBXLEVBQUEsUUFBQUEsRUFBQSxTQUFBaUIsRUFBQSxLQUFBRCxFQUFxQ2hCLEtBQUEsT0FBY0EsRUFBQW9XLFFBQUEsT0FBQXBXLEVBQUEsT0FBZ0NBLElBQUFvVyxRQUErRSxNQUFuRXBXLEdBQUFGLEVBQUF5YyxRQUFZemMsRUFBQUUsRUFBQUYsRUFBQTZCLE1BQUFGLEdBQWVSLEVBQUFrVixNQUFBK0osR0FBQWpmLEVBQUEsT0FBQUQsSUFBQW1WLE1BQUEsS0FBQXJXLEVBQUFDLEdBQXdDa0IsRUFBQWtWLEtBQWUsY0FBQWxWLEdBQUFvTixJQUFBLE1BQTJCLG1CQUFtQixvQkFBb0IsY0FBQXJNLEdBQUFmLEdBQUE2QyxFQUFBN0MsR0FBQSxJQUE2QixRQUFBa0IsRUFBQSxNQUFnQixTQUFBQSxFQUFBLFVBQ2hTLFFBQUE4ZixJQUFBamhCLEVBQUFDLEdBQWlCLFFBQUFsQixHQUFBaUIsR0FBYyxHQUFBakIsR0FBQWlCLEVBQUF3QixHQUFZLFdBQUF6QyxFQUFBLElBQWdCQSxFQUFBLE1BQVEsTUFBQTBCLEdBQVNSLEVBQUFELEVBQUFTLElBQVEsUUFBQVksR0FBQXJCLEdBQTRDLE9BQTlCLGtCQUFBcWMsUUFBQXJjLEdBQThCQSxFQUFBcU4sS0FBYyxPQUFBdE8sRUFBQWlCLEVBQVksSUFBQXFCLEdBQUFyQixFQUFBMk0sU0FBa0Isc0JBQUF0TCxHQUFBNmYscUJBQUEsSUFBa0Q3ZixFQUFBVixNQUFBWCxFQUFBMmEsY0FBQXRaLEVBQUFzYyxNQUFBM2QsRUFBQXlhLGNBQUFwWixFQUFBNmYsdUJBQXlFLE1BQUF6Z0IsR0FBU1IsRUFBQUQsRUFBQVMsR0FBTyxLQUFNLFFBQUExQixFQUFBaUIsRUFBWSxNQUFNLFFBQUFJLEVBQUFKLEVBQUEyTSxVQUFzQixNQUFNLFFBQUFwTCxHQUFBRCxFQUFBdEIsSUFBZ0IsUUFBQUksR0FBQUosR0FBYyxPQUFBQyxHQUFBRCxJQUFhLEdBQUFxQixFQUFBcEIsR0FBQSxPQUFBQSxFQUFBa1YsT0FBQTVULEdBQUEsSUFBQXRCLEVBQUFvTixJQUFBLENBQXVDLEdBQUFwTixJQUFBRCxFQUFBLEtBQWUsTUFBSyxPQUFBQyxFQUFBbVYsU0FBaUIsQ0FBRSxVQUFBblYsRUFBQSxRQUNwZUEsRUFBQSxTQUFBRCxFQUFBLE1BQXVCQyxLQUFBLE9BQWNBLEVBQUFtVixRQUFBLE9BQUFuVixFQUFBLE9BQWdDQSxJQUFBbVYsWUFBWW5WLEdBQUFrVixNQUFBLE9BQUFsVixNQUFBa1YsTUFBbUMsUUFBQXRULEdBQUE3QixHQUFjLFdBQUFBLEVBQUFxTixLQUFBLElBQUFyTixFQUFBcU4sS0FBQSxJQUFBck4sRUFBQXFOLElBQXVDLFFBQUEvTCxHQUFBdEIsR0FBYyxPQUFBQyxHQUFBRCxFQUFBakIsR0FBQSxFQUFBOEMsRUFBQSxPQUFBUCxFQUFBLFNBQW9DLENBQUUsSUFBQXZDLEVBQUEsQ0FBT0EsRUFBQWtCLEVBQUEsTUFBY0QsR0FBQSxPQUFRLENBQTJCLE9BQXpCLE9BQUFqQixFQUFBb0MsRUFBQSxjQUF5QnBDLEVBQUFzTyxLQUFjLE9BQUF4TCxFQUFBOUMsRUFBQTROLFVBQXFCckwsR0FBQSxDQUFLLE1BQUF0QixFQUFRLFFBQUE2QixFQUFBOUMsRUFBQTROLFVBQUErSSxjQUFtQ3BVLEdBQUEsQ0FBSyxNQUFBdEIsRUFBUSxRQUFBNkIsRUFBQTlDLEVBQUE0TixVQUFBK0ksY0FBbUNwVSxHQUFBLENBQUssTUFBQXRCLEdBQVFqQixJQUFBLE9BQWNBLEdBQUEsRUFBSyxPQUFBa0IsRUFBQW9OLEtBQUEsSUFBQXBOLEVBQUFvTixJQUFBak4sRUFBQUgsR0FBQXFCLEVBQUFGLEVBQUFTLEVBQUE1QixFQUFBME0sV0FBQTdKLEVBQUFqQixFQUFBNUIsRUFBQTBNLGVBQ3hiLFFBQUExTSxFQUFBb04sSUFBQXhMLEVBQUE1QixFQUFBME0sVUFBQStJLGNBQUFyVSxFQUFBcEIsR0FBQSxPQUFBQSxFQUFBa1YsTUFBQSxDQUFtRWxWLEVBQUFrVixNQUFBLE9BQUFsVixFQUFvQkEsSUFBQWtWLEtBQVUsVUFBUyxHQUFBbFYsSUFBQUQsRUFBQSxLQUFlLE1BQUssT0FBQUMsRUFBQW1WLFNBQWlCLENBQUUsVUFBQW5WLEVBQUEsUUFBQUEsRUFBQSxTQUFBRCxFQUFBLE1BQThDQyxLQUFBLE9BQWMsSUFBQUEsRUFBQW9OLE1BQUF0TyxHQUFBLEdBQWtCa0IsRUFBQW1WLFFBQUEsT0FBQW5WLEVBQUEsT0FBZ0NBLElBQUFtVixTQUFhLEdBQUFyVCxHQUFBL0IsRUFBQW1oQixrQkFBQTVmLEVBQUF2QixFQUFBK2dCLFFBQXVDL2dCLEtBQUF1Z0IsWUFBZ0JoZixHQUFBSixFQUFBbkIsRUFBQSxZQUF5QixJQUFBMEUsR0FBQW5ELEVBQUE2ZixZQUFBMWQsRUFBQW5DLEVBQUE4ZixhQUFBdGhCLEVBQUF3QixFQUFBK2YsaUJBQUE3ZCxFQUFBbEMsRUFBQWdnQixpQkFBQXZnQixFQUFBTyxFQUFBaWdCLFlBQUFqZixFQUFBaEIsRUFBQWtnQix1QkFBQTlmLEVBQUFKLEVBQUFtZ0IsYUFBQWpkLEVBQUFsRCxFQUFBb2dCLHdCQUM1VjdlLEVBQUF2QixFQUFBcWdCLFlBQUF4Z0IsRUFBQUcsRUFBQXNnQix3QkFBNkMsUUFBT0MsdUJBQUEsU0FBQTloQixHQUFtQ0QsRUFBQUMsRUFBQTJNLFlBQWVvVixnQkFBQSxTQUFBL2hCLEdBQTZCQSxFQUFBLENBQUcsT0FBQUMsR0FBQUQsRUFBQSxPQUFzQixPQUFBQyxHQUFTLENBQUUsR0FBQTRCLEVBQUE1QixHQUFBLENBQVMsR0FBQWxCLEdBQUFrQixDQUFRLE1BQUFELEdBQVFDLElBQUEsT0FBY2tCLEVBQUEsT0FBU3BDLEVBQUEsT0FBUyxHQUFBc0MsR0FBQXBCLEVBQUEsTUFBZSxRQUFBbEIsRUFBQXNPLEtBQWMsT0FBQXBOLEVBQUFsQixFQUFBNE4sVUFBcUJ0TCxHQUFBLENBQUssTUFBTSxRQUFBcEIsRUFBQWxCLEVBQUE0TixVQUFBK0ksY0FBbUNyVSxHQUFBLENBQUssTUFBTSxRQUFBcEIsRUFBQWxCLEVBQUE0TixVQUFBK0ksY0FBbUNyVSxHQUFBLENBQUssTUFBTSxTQUFBRixFQUFBLE9BQWlCLEdBQUFwQyxFQUFBK1YsWUFBQS9VLEVBQUFFLEdBQUFsQixFQUFBK1YsWUFBQSxHQUF3QzlVLEdBQUFDLEVBQUEsSUFBQWxCLEVBQUFpQixJQUFhLENBQUUsS0FBSyxPQUFBakIsRUFBQXFXLFNBQWlCLENBQUUsVUFBQXJXLEVBQUEsUUFBQThDLEVBQUE5QyxFQUFBLFNBQXVDQSxFQUNoZ0IsSUFBSyxNQUFBaUIsR0FBUWpCLElBQUEsT0FBOEMsSUFBaENBLEVBQUFxVyxRQUFBLE9BQUFyVyxFQUFBLE9BQWdDQSxJQUFBcVcsUUFBZ0IsSUFBQXJXLEVBQUFzTyxLQUFBLElBQUF0TyxFQUFBc08sS0FBcUIsQ0FBRSxLQUFBdE8sRUFBQStWLFVBQUEsUUFBQTdVLEVBQTRCLFdBQUFsQixFQUFBb1csT0FBQSxJQUFBcFcsRUFBQXNPLElBQUEsUUFBQXBOLEVBQXdDbEIsR0FBQW9XLE1BQUEsT0FBQXBXLE1BQUFvVyxNQUFtQyxPQUFBcFcsRUFBQStWLFdBQUEsQ0FBcUIvVixJQUFBNE4sU0FBYyxNQUFBM00sSUFBUyxPQUFBSSxHQUFBSixJQUFhLENBQUUsT0FBQUksRUFBQWlOLEtBQUEsSUFBQWpOLEVBQUFpTixJQUFBdE8sRUFBQXNDLEVBQUFvRCxFQUFBeEUsRUFBQUcsRUFBQXVNLFVBQUE1TixHQUFBNEMsRUFBQTFCLEVBQUFHLEVBQUF1TSxVQUFBNU4sR0FBQXNDLEVBQUFrQixFQUFBdEMsRUFBQUcsRUFBQXVNLFdBQUEzTCxFQUFBZixFQUFBRyxFQUFBdU0sZUFBc0csUUFBQXZNLEVBQUFpTixLQUFBLE9BQUFqTixFQUFBK1UsTUFBQSxDQUFtQy9VLEVBQUErVSxNQUFBLE9BQUEvVSxFQUFvQkEsSUFBQStVLEtBQVUsVUFBUyxHQUFBL1UsSUFBQUosRUFBQSxLQUFlLE1BQUssT0FBQUksRUFBQWdWLFNBQWlCLENBQUUsVUFBQWhWLEVBQUEsUUFBQUEsRUFBQSxTQUMzZEosRUFBQSxNQUFTSSxLQUFBLE9BQWNBLEVBQUFnVixRQUFBLE9BQUFoVixFQUFBLE9BQWdDQSxJQUFBZ1YsVUFBYTRNLGVBQUEsU0FBQWhpQixHQUE0QnNCLEVBQUF0QixHQUFLQSxFQUFBLFlBQWlCQSxFQUFBbVYsTUFBQSxLQUFhblYsRUFBQW9PLFlBQUFwTyxFQUFBb08sVUFBQStHLE1BQUEsS0FBQW5WLEVBQUFvTyxVQUFBLGNBQWlFNlQsV0FBQSxTQUFBamlCLEVBQUFDLEdBQTBCLE9BQUFBLEVBQUFvTixLQUFjLFlBQWEsV0FBQXRPLEdBQUFrQixFQUFBME0sU0FBeUIsVUFBQTVOLEVBQUEsQ0FBWSxHQUFBc0MsR0FBQXBCLEVBQUEwYSxhQUFzQjNhLEdBQUEsT0FBQUEsSUFBQTJhLGNBQUF0WixDQUE2QixJQUFBakIsR0FBQUgsRUFBQW9DLEtBQUFSLEVBQUE1QixFQUFBeWEsV0FBNkJ6YSxHQUFBeWEsWUFBQSxLQUFtQixPQUFBN1ksR0FBQTZCLEVBQUEzRSxFQUFBOEMsRUFBQXpCLEVBQUFKLEVBQUFxQixFQUFBcEIsR0FBeUIsS0FBTSxlQUFBQSxFQUFBME0sVUFBQXhMLEVBQUEsY0FBMENwQyxFQUFBa0IsRUFBQTBhLGNBQWtCbFgsRUFBQXhELEVBQUEwTSxVQUFBLE9BQUEzTSxJQUFBMmEsY0FDNWQ1YixJQUFLLE1BQU0sYUFBYSxTQUFBb0MsRUFBQSxTQUFrQitnQixpQkFBQSxTQUFBbGlCLEVBQUFDLEdBQWdDLE9BQUFBLEVBQUFvTixLQUFjLFVBQUF0TyxHQUFBa0IsRUFBQTBNLFNBQXlCLE1BQUExTSxFQUFBNlUsVUFBQSxVQUFBOVUsRUFBQWpCLEVBQUE0QixNQUFBVixFQUFBMGEsY0FBQTViLEVBQUE0ZSxNQUFBMWQsRUFBQXdhLGNBQUExYixFQUFBOGUsd0JBQW1HLENBQUssR0FBQXhjLEdBQUFyQixFQUFBMmEsYUFBc0IzYSxLQUFBeWEsY0FBa0IxYixFQUFBNEIsTUFBQVYsRUFBQTBhLGNBQXdCNWIsRUFBQTRlLE1BQUExZCxFQUFBd2EsY0FBd0IxYixFQUFBaWYsbUJBQUEzYyxFQUFBckIsR0FBMEJDLElBQUF5YSxZQUFnQixPQUFBemEsR0FBQW9kLEdBQUFwZCxFQUFBbEIsRUFBa0IsTUFBTSxRQUFBQSxFQUFBa0IsRUFBQXlhLFlBQXVCLE9BQUEzYixHQUFBc2UsR0FBQXRlLEVBQUEsT0FBQWtCLEVBQUFrVixNQUFBbFYsRUFBQWtWLE1BQUF4SSxVQUFBLEtBQXNELE1BQU0sUUFBQTVOLEVBQUFrQixFQUFBME0sVUFBcUIsT0FBQTNNLEdBQUEsRUFBQUMsRUFBQTZVLFdBQUFwUSxFQUFBM0YsRUFDM2RrQixFQUFBb0MsS0FBQXBDLEVBQUEwYSxjQUFBMWEsRUFBMEIsTUFBTSxhQUFhLGFBQWEsU0FBQWtCLEVBQUEsU0FBa0JnaEIsZ0JBQUEsU0FBQW5pQixHQUE2QixHQUFBQyxHQUFBRCxFQUFBd0IsR0FBWSxXQUFBdkIsRUFBQSxDQUFhLEdBQUFsQixHQUFBaUIsRUFBQTJNLFNBQWtCLFFBQUEzTSxFQUFBcU4sS0FBYyxPQUFBcE4sRUFBQThCLEVBQUFoRCxHQUFlLE1BQU0sU0FBQWtCLEVBQUFsQixNQUFlcWpCLGdCQUFBLFNBQUFwaUIsR0FBNkJBLElBQUF3QixJQUFRLE9BQUF4QixLQUFBLFFBQzNPLFFBQUFxaUIsSUFBQXJpQixHQUFlLFFBQUFDLEdBQUFELEdBQXFDLE1BQXZCQSxLQUFBc2lCLEdBQUFuaEIsRUFBQSxjQUF1Qm5CLEVBQVMsR0FBQWpCLEdBQUFpQixFQUFBdWlCLG9CQUFBbGhCLEVBQUFyQixFQUFBd2lCLG1CQUFBcGlCLEdBQXNEb0MsUUFBQThmLElBQVd6Z0IsR0FBSVcsUUFBQThmLElBQVdoaEIsR0FBSWtCLFFBQUE4ZixHQUFZLFFBQU81QixlQUFBLFdBQTBCLE1BQUF6Z0IsR0FBQUcsRUFBQW9DLFVBQW9CZ2UscUJBQUEsV0FBaUMsTUFBQXZnQixHQUFBcUIsRUFBQWtCLFVBQW9CbWUsaUJBQUEsU0FBQTNnQixHQUE4QmdILEdBQUE1RyxFQUFBSixHQUFPZ0gsR0FBQW5GLEVBQUE3QixHQUFPZ0gsR0FBQTFGLEVBQUF0QixJQUFPeWdCLGVBQUEsU0FBQXpnQixHQUE0QjZCLEVBQUFXLFVBQUF4QyxJQUFBZ0gsR0FBQTVHLEVBQUFKLEdBQUFnSCxHQUFBbkYsRUFBQTdCLEtBQStCd2Ysa0JBQUEsU0FBQXhmLEVBQUFDLEdBQWlDaUgsR0FBQTVGLEVBQUFyQixFQUFBRCxHQUFTQyxFQUFBb0IsRUFBQXBCLEdBQU9pSCxHQUFBckYsRUFBQTdCLEtBQVNrSCxHQUFBOUcsRUFBQUgsRUFBQUQsSUFBU3VmLGdCQUFBLFNBQUF2ZixHQUE2QixHQUFBcUIsR0FBQXBCLEVBQUFxQixFQUFBa0IsU0FBQVQsRUFBQTlCLEVBQUFHLEVBQUFvQyxRQUNyZG5CLEdBQUF0QyxFQUFBZ0QsRUFBQS9CLEVBQUFxQyxLQUFBaEIsR0FBZ0JVLElBQUFWLElBQUE2RixHQUFBckYsRUFBQTdCLEtBQUFrSCxHQUFBOUcsRUFBQWlCLEVBQUFyQixLQUEyQnlpQixtQkFBQSxXQUErQnJpQixFQUFBb0MsUUFBQThmLEdBQWFoaEIsRUFBQWtCLFFBQUE4ZixLQUN2RixRQUFBSSxJQUFBMWlCLEdBQWUsUUFBQUMsR0FBQUQsRUFBQUMsR0FBZ0IsR0FBQWxCLEdBQUEsR0FBQXdiLElBQUEsU0FBc0J4YixHQUFBc0QsS0FBQSxVQUFpQnRELEVBQUE0TixVQUFBMU0sRUFBY2xCLEVBQUEsT0FBQWlCLEVBQWNqQixFQUFBK1YsVUFBQSxFQUFjLE9BQUE5VSxFQUFBOGEsWUFBQTlhLEVBQUE4YSxXQUFBRSxXQUFBamMsRUFBQWlCLEVBQUE4YSxXQUFBL2IsR0FBQWlCLEVBQUErYSxZQUFBL2EsRUFBQThhLFdBQUEvYixFQUE0RixRQUFBQSxHQUFBaUIsRUFBQUMsR0FBZ0IsT0FBQUQsRUFBQXFOLEtBQWMsYUFBQXBOLEdBQUE0QixFQUFBNUIsRUFBQUQsRUFBQXFDLEtBQUFyQyxFQUFBNGEsY0FBQSxPQUFBM2EsSUFBQUQsRUFBQTJNLFVBQUExTSxHQUFBLEVBQTBFLGNBQUFBLEdBQUFxQixFQUFBckIsRUFBQUQsRUFBQTRhLGNBQUEsT0FBQTNhLElBQUFELEVBQUEyTSxVQUFBMU0sR0FBQSxFQUFtRSxtQkFBa0IsUUFBQW9CLEdBQUFyQixHQUFjLElBQUFBLElBQUEsT0FBa0IsT0FBQUEsR0FBQSxJQUFBQSxFQUFBcU4sS0FBQSxJQUFBck4sRUFBQXFOLEtBQStCck4sSUFBQSxNQUFlRCxHQUFBQyxFQUFJLEdBQUFJLEdBQUFKLEVBQUFvZixvQkFDN2MsSUFBZHBmLElBQUEyaUIsV0FBYzNpQixFQUFBLE9BQWF5ZixvQkFBQSxXQUErQixVQUFTQyxvQkFBQSxhQUFpQ0MsaUNBQUEsYUFBOENpQiw2QkFBQSxXQUF5Q3pmLEVBQUEsUUFBUzBmLGlDQUFBLFdBQTZDMWYsRUFBQSxRQUFTMmYsa0JBQUEsV0FBOEIsVUFBVyxJQUFBamYsR0FBQTdCLEVBQUE0aUIsbUJBQUF0aEIsRUFBQXRCLEVBQUE2aUIsdUJBQUE5Z0IsRUFBQS9CLEVBQUE4aUIseUJBQUF2aEIsRUFBQXZCLEVBQUEraUIsd0JBQUFyZSxFQUFBMUUsRUFBQWdqQixnQkFBQXRmLEVBQUExRCxFQUFBaWpCLG9CQUFBbGpCLEVBQUEsS0FBQTBELEVBQUEsS0FBQXpDLEdBQUEsQ0FBOEssUUFBT3llLG9CQUFBLFNBQUF6ZixHQUN2YixNQUR1ZHlELEdBQ3hmbEMsRUFBQXZCLEVBQUEyTSxVQUFBK0ksZUFBNkIzVixFQUFBQyxFQUFJZ0IsR0FBQSxHQUFZMGUsb0JBQUEsV0FBZ0NqYyxFQUFBMUQsRUFBQSxLQUFTaUIsR0FBQSxHQUFLMmUsaUNBQUEsU0FBQTNmLEdBQThDLEdBQUFnQixFQUFBLENBQU0sR0FBQUssR0FBQW9DLENBQVEsSUFBQXBDLEVBQUEsQ0FBTSxJQUFBdEMsRUFBQWlCLEVBQUFxQixHQUFBLENBQW1CLEdBQVBBLEVBQUFVLEVBQUFWLElBQU9BLElBQUF0QyxFQUFBaUIsRUFBQXFCLEdBQXdDLE1BQXhCckIsR0FBQThVLFdBQUEsRUFBZTlULEdBQUEsT0FBS2pCLEVBQUFDLEVBQVdDLEdBQUFGLEVBQUEwRCxHQUFPMUQsRUFBQUMsRUFBSXlELEVBQUFsQyxFQUFBRixPQUFPckIsR0FBQThVLFdBQUEsRUFBQTlULEdBQUEsRUFBQWpCLEVBQUFDLElBQThCNGdCLDZCQUFBLFNBQUE1Z0IsRUFBQUMsRUFBQWxCLEdBQTRHLE1BQTlEa0IsR0FBQXlFLEVBQUExRSxFQUFBMk0sVUFBQTNNLEVBQUFxQyxLQUFBckMsRUFBQTJhLGNBQUExYSxFQUFBbEIsRUFBQWlCLEdBQThDQSxFQUFBMGEsWUFBQXphLEVBQWdCLE9BQUFBLEdBQXNCNGdCLGlDQUFBLFNBQUE3Z0IsR0FBOEMsTUFBQTBELEdBQUExRCxFQUFBMk0sVUFBQTNNLEVBQUEyYSxjQUFBM2EsSUFBd0M4Z0Isa0JBQUEsU0FBQTlnQixHQUErQixHQUFBQSxJQUN0Z0JELEVBQUEsUUFBVyxLQUFBaUIsRUFBQSxNQUFBSyxHQUFBckIsR0FBQWdCLEdBQUEsSUFBMEIsSUFBQWpDLEdBQUFpQixFQUFBcUMsSUFBYSxRQUFBckMsRUFBQXFOLEtBQUEsU0FBQXRPLEdBQUEsU0FBQUEsSUFBQXFCLEVBQUFyQixFQUFBaUIsRUFBQTJhLGVBQUEsSUFBQTViLEVBQUEwRSxFQUFvRTFFLEdBQUVrQixFQUFBRCxFQUFBakIsS0FBQWdELEVBQUFoRCxFQUE0QyxPQUE3QnNDLEdBQUFyQixHQUFLeUQsRUFBQTFELEVBQUFnQyxFQUFBL0IsRUFBQTJNLFdBQUEsTUFBd0IsSUFDcEssUUFBQXVXLElBQUFsakIsR0FBZSxRQUFBQyxHQUFBRCxHQUFjbWpCLEdBQUFDLEdBQUEsQ0FBUyxJQUFBbmpCLEdBQUFELEVBQUEyTSxTQUFzRixJQUFwRTFNLEVBQUF1QyxVQUFBeEMsRUFBQW1CLEVBQUEsY0FBOEJsQixFQUFBb2pCLGtCQUFBLEVBQXNCMWtCLEdBQUE2RCxRQUFBLEtBQWdCLEVBQUF4QyxFQUFBOFUsVUFBQSxVQUFBOVUsRUFBQThhLFdBQUEsQ0FBeUM5YSxFQUFBOGEsV0FBQUUsV0FBQWhiLENBQTBCLElBQUFqQixHQUFBaUIsRUFBQSthLGdCQUFvQmhjLEdBQUFpQixNQUFTakIsR0FBQWlCLEVBQUErYSxXQUEwQixLQUFMdUksSUFBSzlmLEVBQUF6RSxFQUFRLE9BQUF5RSxHQUFTLENBQUUsR0FBQW5DLElBQUEsRUFBQWpCLEVBQUEsTUFBa0IsS0FBSSxLQUFLLE9BQUFvRCxHQUFTLENBQUUsR0FBQTNCLEdBQUEyQixFQUFBc1IsU0FBOEIsSUFBWixHQUFBalQsR0FBQTBoQixFQUFBL2YsR0FBWSxJQUFBM0IsRUFBQSxDQUFVLEdBQUFQLEdBQUFrQyxFQUFBNEssU0FBa0IsUUFBQTlNLEdBQUFraUIsRUFBQWxpQixHQUFnQixPQUFBTyxHQUFBLEtBQWUsT0FBQTRoQixFQUFBamdCLEdBQWFBLEVBQUFzUixZQUFBLENBQWdCLE1BQU0sUUFBQTJPLEVBQUFqZ0IsR0FBYUEsRUFBQXNSLFlBQUEsRUFBZ0I0TyxFQUFBbGdCLEVBQUE0SyxVQUFBNUssRUFBa0IsTUFBTSxRQUFBa2dCLEVBQUFsZ0IsRUFBQTRLLFVBQ2hlNUssRUFBRyxNQUFNLFFBQUFtZ0IsSUFBQSxFQUFBQyxFQUFBcGdCLEdBQUFtZ0IsSUFBQSxFQUF5Qm5nQixJQUFBd1gsWUFBZ0IsTUFBQTZJLEdBQVV4aUIsR0FBQSxFQUFBakIsRUFBQXlqQixFQUFVeGlCLElBQUEsT0FBQW1DLEVBQUFyQyxFQUFBLGNBQUFZLEVBQUF5QixFQUFBcEQsR0FBQSxPQUFBb0QsUUFBQXdYLGFBQWlGLElBQWpCOEksSUFBSzdqQixFQUFBdUMsUUFBQXhDLEVBQVl3RCxFQUFBekUsRUFBUSxPQUFBeUUsR0FBUyxDQUFFekUsR0FBQSxFQUFLc0MsRUFBQSxNQUFTLEtBQUksS0FBSyxPQUFBbUMsR0FBUyxDQUFFLEdBQUFqQyxHQUFBaUMsRUFBQXNSLFNBQXVELElBQXJDLEdBQUF2VCxHQUFBd2lCLEVBQUF2Z0IsRUFBQTRLLFVBQUE1SyxHQUF3QixJQUFBakMsR0FBQXlpQixFQUFBeGdCLEdBQWEsR0FBQWpDLEVBQUEsT0FBQW5CLEVBQUFvRCxFQUFBM0IsRUFBQSxjQUFBd0MsS0FBQXhDLEVBQUF3QyxHQUFBbU8sSUFBQXBTLEdBQUFpRSxHQUFBLE9BQUFqRSxHQUFBLE1BQUF5QixHQUFBLE9BQUF6QixFQUFBZ08sWUFBQWhPLElBQUFnTyxVQUFBdk0sRUFBQXdDLEdBQUFtTyxJQUFBcFMsR0FBQWlFLEdBQUEsT0FBQWpFLEtBQUEsTUFBQXlCLEVBQUFWLEVBQUEsY0FBQWYsRUFBQWlOLEtBQXdLLE9BQUFqTixFQUFBdU0sVUFBQXNYLGtCQUFBcGlCLEVBQUEwSCxPQUE4QzJhLGVBQUFyaUIsRUFBQXFpQixnQkFDemQsTUFBTSxlQUFBQyxRQUFBdGlCLEVBQUEwSCxNQUErQixNQUFNLFNBQUFwSSxFQUFBLE9BQWlCLEdBQUFpakIsR0FBQTVnQixFQUFBd1gsVUFBb0J4WCxHQUFBd1gsV0FBQSxLQUFrQnhYLEVBQUE0Z0IsR0FBTSxNQUFBUCxHQUFVOWtCLEdBQUEsRUFBQXNDLEVBQUF3aUIsRUFBVTlrQixJQUFBLE9BQUF5RSxFQUFBckMsRUFBQSxjQUFBWSxFQUFBeUIsRUFBQW5DLEdBQUEsT0FBQW1DLFFBQUF3WCxhQUEyTixNQUEzSm9JLEdBQUFELElBQUEsRUFBUyxrQkFBQS9HLFFBQUFwYyxFQUFBMk0sV0FBd0MwWCxRQUFBcmUsUUFBQXpELEdBQUE4aEIsR0FBQSxNQUE0QixPQUFBRixLQUFBbmtCLEVBQUFta0IsTUFBQSxLQUFBdkUsRUFBQTVmLElBQWdDQyxJQUFBdUMsUUFBQXlZLGVBQTJCLElBQUFoYixJQUFBcWtCLEdBQUFqZ0IsR0FBQSxNQUFtQnBFLEVBQVMsUUFBQWxCLEdBQUFpQixHQUFjLE9BQU0sQ0FBRSxHQUFBQyxHQUFBc2tCLEVBQUF2a0IsRUFBQW9PLFVBQUFwTyxFQUFBMEIsR0FBQTNDLEVBQUFpQixFQUFBLE9BQUFxQixFQUFBckIsRUFBQW9WLFFBQW9EaFYsRUFBQUosQ0FBUSxpQkFBQTBCLEdBQUEsYUFBQXRCLEVBQUE2YSxlQUFBLENBQWtELE9BQUE3YSxFQUFBaU4sS0FBQSxJQUNwZWpOLEVBQUFpTixJQUFBLEdBQUF4TCxHQUFBLE1BQWNBLEdBQUF6QixFQUFBc2EsWUFBQTdZLEVBQUEsT0FBQUEsRUFBQSxFQUFBQSxFQUFBb1osY0FBbUQsUUFBQTNaLEdBQUFsQixFQUFBK1UsTUFBa0IsT0FBQTdULEdBQVMsSUFBQUEsRUFBQTJaLGlCQUFBLElBQUFwWixLQUFBUCxFQUFBMlosa0JBQUFwWixFQUFBUCxFQUFBMlosZ0JBQUEzWixJQUFBOFQsT0FBcUZoVixHQUFBNmEsZUFBQXBaLEVBQW1CLFVBQUE1QixFQUFBLE1BQUFBLEVBQWlTLElBQTVRLE9BQUFsQixJQUFBLE9BQUFBLEVBQUFnYyxjQUFBaGMsRUFBQWdjLFlBQUEvYSxFQUFBK2EsYUFBQSxPQUFBL2EsRUFBQThhLGFBQUEsT0FBQS9iLEVBQUErYixhQUFBL2IsRUFBQStiLFdBQUFFLFdBQUFoYixFQUFBK2EsYUFBQWhjLEVBQUErYixXQUFBOWEsRUFBQThhLFlBQUEsRUFBQTlhLEVBQUE4VSxZQUFBLE9BQUEvVixFQUFBK2IsV0FBQS9iLEVBQUErYixXQUFBRSxXQUFBaGIsRUFBQWpCLEVBQUFnYyxZQUFBL2EsRUFBQWpCLEVBQUErYixXQUFBOWEsSUFBNFEsT0FBQXFCLEVBQUEsTUFBQUEsRUFDcmUsV0FBQXRDLEVBQWdCLENBQUtpQixFQUFBMk0sVUFBQTBXLGtCQUFBLENBQWdDLE9BQXJEcmpCLEVBQUFqQixFQUE0RCxZQUFZLFFBQUFzQyxHQUFBckIsR0FBYyxHQUFBQyxHQUFBdWtCLEVBQUF4a0IsRUFBQW9PLFVBQUFwTyxFQUFBMEIsRUFBNkQsT0FBbkMsUUFBQXpCLE1BQUFsQixFQUFBaUIsSUFBbUJyQixHQUFBNkQsUUFBQSxLQUFnQnZDLEVBQVMsUUFBQUcsR0FBQUosR0FBYyxHQUFBQyxHQUFBd2tCLEVBQUF6a0IsRUFBQW9PLFVBQUFwTyxFQUFBMEIsRUFBNkQsT0FBbkMsUUFBQXpCLE1BQUFsQixFQUFBaUIsSUFBbUJyQixHQUFBNkQsUUFBQSxLQUFnQnZDLEVBQVMsUUFBQTRCLEdBQUE3QixHQUFjLFVBQUFxRSxJQUFhLFNBQUEzQyxLQUFBMUIsR0FBQSxHQUFBMEIsR0FBQWdqQixFQUFBLEtBQStCLE9BQUFqZixHQUFTQSxFQUFBbEUsRUFBQWtFLEdBQUFyRixFQUFBcUYsR0FBQXBFLEVBQUFvRSxPQUFrQixNQUFVLE9BQUFBLElBQUFoRixLQUFlZ0YsRUFBQWxFLEVBQUFrRSxHQUFBckYsRUFBQXFGLEdBQUFwRSxFQUFBb0UsT0FBa0IsVUFBQS9ELEtBQUExQixHQUFBLEdBQUEwQixHQUFBZ2pCLEVBQUEsS0FBb0MsT0FBQWpmLEdBQVNBLEVBQUFwRSxFQUFBb0UsT0FBUSxNQUFVLE9BQUFBLElBQUFoRixLQUFlZ0YsRUFBQXBFLEVBQUFvRSxHQUFRLFFBQUFuRSxHQUFBdEIsRUFBQUMsR0FDbmMsR0FEbWRtakIsRUFBQWppQixFQUFBLGNBQW1CaWlCLEdBQUEsRUFBTXBqQixFQUFBcWpCLGtCQUMvZSxFQUFHcmpCLElBQUEya0IsR0FBQTFrQixJQUFBeUIsR0FBQSxPQUFBK0QsRUFBQSxDQUE0QixNQUFLLEVBQUEwVCxJQUFNQyxHQUFBRCxJQUFBLEtBQUFBLElBQWtCSSxJQUFBalUsR0FBS2tVLEdBQUFoWCxRQUFBOEMsR0FBYXlVLEdBQUF2WCxTQUFBLEVBQWFxQixJQUFJOGdCLEVBQUEza0IsRUFBSzBCLEVBQUF6QixFQUFJd0YsRUFBQXlWLEdBQUF5SixFQUFBbmlCLFFBQUEsS0FBQXZDLEdBQXdCLEdBQUFsQixJQUFBLEVBQUFzQyxFQUFBLElBQWdCLEtBQUlRLEVBQUE1QixHQUFLLE1BQUEya0IsR0FBVTdsQixHQUFBLEVBQUFzQyxFQUFBdWpCLEVBQVUsS0FBSzdsQixHQUFFLENBQUUsR0FBQThsQixHQUFBLENBQU9WLEdBQUE5aUIsQ0FBSyxPQUFNLEdBQUFDLEdBQUFtRSxDQUFRLFdBQUFuRSxFQUFBdWpCLElBQUEsTUFBa0IsQ0FBSyxHQUFBdGpCLEdBQUFRLEVBQUFULEVBQUFELEVBQXNDLElBQXpCLE9BQUFFLEVBQUFKLEVBQUEsZUFBeUIwakIsR0FBQSxDQUFRLElBQVksSUFBUjlsQixFQUFBd0MsRUFBSUYsRUFBQXBCLEVBQUlzQixFQUFBeEMsRUFBUSxPQUFBdUMsR0FBUyxDQUFFLE9BQUFBLEVBQUErTCxLQUFjLE9BQUF5TSxHQUFBeFksRUFBYSxNQUFNLFFBQUF3akIsRUFBQXhqQixFQUFhLE1BQU0sUUFBQXRDLEVBQUFzQyxFQUFZLE1BQU0sUUFBQXRDLEVBQUFzQyxHQUFZLEdBQUFBLElBQUFDLEdBQUFELEVBQUE4TSxZQUFBN00sRUFBQSxLQUFnQ0QsS0FBQSxPQUFjbUUsRUFBQXJGLEVBQUFyQixHQUFPOEMsRUFBQVIsR0FBSyxNQUFBdWpCLEdBQVU3bEIsR0FBQSxFQUFLc0MsRUFBQXVqQixDQUFLLFVBQVMsUUFDeGMsTUFEZ2Qza0IsR0FBQWtrQixHQUFLVSxHQUFBekIsR0FBQSxFQUFTZSxHQUNuZixLQUFLLE9BQUFsa0IsR0FBQTJmLEVBQUEzZixHQUFnQkQsRUFBQXFqQixpQkFBQXJqQixFQUFBd0MsUUFBQTRMLFVBQUEsS0FBbUQsUUFBQXJNLEdBQUEvQixFQUFBQyxHQUFnQixHQUFBbEIsR0FBQUosR0FBQTZELFFBQUEsS0FBQW5CLEdBQUEsRUFBQWpCLEdBQUEsRUFBQXlCLEVBQUEsSUFBdUMsUUFBQTdCLEVBQUFxTixJQUFBdE8sRUFBQWlCLEVBQUEwRSxFQUFBMUUsS0FBQTZrQixJQUFBLE9BQStCLFFBQUF2akIsR0FBQXRCLEVBQUEsT0FBMkIsT0FBQXNCLEdBQUEsT0FBQXZDLEdBQW1CLENBQXdHLEdBQXRHLElBQUF1QyxFQUFBK0wsSUFBQSxrQkFBQS9MLEdBQUFxTCxVQUFBc1gsb0JBQUE1aUIsR0FBQSxFQUFBUSxFQUFBOFMsR0FBQXJULEdBQUF2QyxFQUFBdUMsRUFBQWxCLEdBQUEsT0FBQWtCLEVBQUErTCxNQUFBdE8sRUFBQXVDLEdBQXNHb0QsRUFBQXBELEdBQUEsQ0FBUyxHQUFBcWlCLElBQUEsT0FBQVUsUUFBQVUsSUFBQXpqQixJQUFBLE9BQUFBLEVBQUE4TSxXQUFBaVcsR0FBQVUsSUFBQXpqQixFQUFBOE0sWUFBQSxXQUFtRnJQLEdBQUEsS0FBT3FCLEdBQUEsRUFBS2tCLElBQUEsT0FBYyxVQUFBdkMsRUFBQSxDQUFhLE9BQUF1bEIsUUFBQSxHQUFBVSxNQUF3QlYsR0FBQVcsSUFBQWxtQixFQUFVLElBQUFnRCxHQUFBLEVBQVNULEdBQUF0QixDQUFJLElBQUdBLEVBQUEsT0FBQXNCLEVBQUErTCxLQUFnQiwrQkFBQTlMLEdBQ3pmRCxFQUFBNGpCLFlBQUFkLEVBQUE5aUIsRUFBQTZqQixhQUFnQ3JtQixFQUFBNlYsR0FBQXJULEdBQVlSLEVBQUEsSUFBV1MsS0FBQVQsRUFBQTZULEdBQUFwVCxJQUFhQSxFQUFBNmlCLEVBQUt0bEIsRUFBQSxhQUFBQSxHQUFBLFlBQUF5QyxFQUFBLFFBQUFBLEVBQUE2akIsU0FBQXZpQixRQUFBLG9CQUFBdEIsRUFBQThqQixXQUFBLElBQUF2a0IsRUFBQSxnQkFBQUEsRUFBQSxPQUE0SCxNQUFBZCxFQUFRLFNBQUFsQixFQUFBLEdBQWFpRCxHQUFBakQsRUFBS3dDLElBQUEsYUFBY0EsRUFBU0EsR0FBQVMsRUFBSS9CLEVBQUEyVSxHQUFBM1UsR0FBUSxPQUFBcUUsUUFBQSxHQUFBb2EsTUFBc0J4ZSxHQUFHcWxCLGNBQUF0bEIsRUFBQWtrQixlQUFBNWlCLEVBQUFpSSxNQUFBdEosRUFBQXNsQixjQUFBbGtCLEVBQUF0QyxFQUFBNE4sVUFBQSxLQUFBNlksbUJBQUFua0IsRUFBQW9rQixrQkFBQTVqQixFQUFBNmpCLFVBQUF0bEIsR0FBZ0lpRSxHQUFBb08sSUFBQTFULEVBQUFrQixFQUFXLEtBQUksR0FBQWpCLEdBQUFpQixFQUFBc0osS0FBY3ZLLE1BQUEybUIsMkJBQUFyYyxRQUFBQyxNQUFBdkssR0FBaUQsTUFBQTRtQixHQUFVQSxHQUNuZkEsRUFBQUQsMkJBQUFyYyxRQUFBQyxNQUFBcWMsR0FBNEYsTUFBNUN6QyxLQUFBLE9BQUFrQixRQUFBLEdBQUFXLE1BQUFYLEdBQUFZLElBQUFsbUIsSUFBQXdELEVBQUF4RCxHQUE0Q0EsRUFBMkIsTUFBbEIsUUFBQW9sQixRQUFBbGtCLEdBQWtCLEtBQVksUUFBQXNCLEdBQUF2QixHQUFjLGNBQUFxRSxRQUFBMGdCLElBQUEva0IsSUFBQSxPQUFBQSxFQUFBb08sV0FBQS9KLEdBQUEwZ0IsSUFBQS9rQixFQUFBb08sWUFBb0UsUUFBQTFKLEdBQUExRSxHQUFjLGNBQUFza0IsUUFBQVMsSUFBQS9rQixJQUFBLE9BQUFBLEVBQUFvTyxXQUFBa1csR0FBQVMsSUFBQS9rQixFQUFBb08sWUFBdUUsUUFBQTFLLEtBQWEsYUFBQS9CLElBQUEsY0FBK0IsUUFBQTVCLEdBQUFDLEdBQWMsV0FBQTZsQixJQUFBekMsRUFBQUQsR0FBQSxFQUFBemhCLEdBQUFva0IsR0FBQSxFQUFBOWxCLEVBQUE2YSxtQkFBQW5YLElBQUEsRUFBNkQsUUFBQUQsR0FBQXpELEVBQUFDLEdBQWdCLE1BQUFlLEdBQUFoQixFQUFBQyxHQUFBLEdBQWlCLFFBQUFlLEdBQUFoQixFQUFBQyxHQUFnQixLQUFLLE9BQUFELEdBQVMsQ0FDdlUsSUFEeVUsSUFBQUEsRUFBQWliLGdCQUNsZWpiLEVBQUFpYixlQUFBaGIsS0FBQUQsRUFBQWliLGVBQUFoYixHQUFzQyxPQUFBRCxFQUFBb08sWUFBQSxJQUFBcE8sRUFBQW9PLFVBQUE2TSxnQkFBQWpiLEVBQUFvTyxVQUFBNk0sZUFBQWhiLEtBQUFELEVBQUFvTyxVQUFBNk0sZUFBQWhiLEdBQW1ILE9BQUFELEVBQUEsZUFBQUEsRUFBQXFOLElBQ3hFLEtBRDRHLElBQUF0TyxHQUFBaUIsRUFBQTJNLFdBQWtCeVcsR0FBQXJrQixJQUFBNGxCLEdBQUExa0IsRUFBQXlCLElBQUErRCxFQUFBa2YsRUFBQSxLQUFBampCLEVBQUEsRUFBa0MsSUFBQUwsR0FBQXRDLEVBQUFxQixFQUFBSCxDQUE0QixJQUFoQjhsQixHQUFBQyxJQUFBN2tCLEVBQUEsT0FBZ0IsT0FBQUUsRUFBQTRrQixrQkFBQTVrQixFQUFBNmtCLHdCQUFBOWxCLEVBQUEsT0FBQWlELElBQUE4aUIsR0FBQTlpQixHQUFBaEMsSUFBQTRrQixrQkFBQTVrQixJQUFBZ0MsTUFBQTRpQixrQkFBQTVrQixFQUFBZ0MsR0FBQTRpQixrQkFBQUUsUUFBbUosQ0FBSyxHQUFBdGtCLEdBQUFSLEVBQUE2a0IseUJBQWdDLElBQUFya0IsR0FBQXpCLEVBQUF5QixLQUFBUixFQUFBNmtCLHdCQUFBOWxCLEdBQTBDZ21CLEtBQUFDLEdBQy9lQyxLQUFBQyxHQUFBbGxCLEVBQUFtbEIsR0FBQSxFQUFBMW5CLEVBQUF5bkIsR0FBQUMsS0FBQSxJQUFBcG1CLEVBQUF3RSxFQUFBLFFBQUFILEVBQUFyRSxLQUErQ2dqQixHQUFBcmtCLElBQUE0bEIsR0FBQTFrQixFQUFBeUIsSUFBQStELEVBQUFrZixFQUFBLEtBQUFqakIsRUFBQSxHQUE2QzFCLElBQUEsUUFBZSxRQUFBdUMsR0FBQXZDLEdBQWNnQixFQUFBaEIsRUFBQSxNQUFVLFFBQUEyQixLQUFhLE1BQUEraUIsS0FBQStCLElBQUFDLEdBQUEsUUFBNkIsUUFBQWppQixHQUFBekUsR0FBYyxPQUFBMm1CLEdBQUEsQ0FBVyxHQUFBM21CLEVBQUEybUIsR0FBQSxNQUFlQyxHQUFBQyxJQUFPLEdBQUE1bUIsR0FBQXdtQixJQUFBQyxDQUFjQyxJQUFBM21CLEVBQUs2bUIsR0FBQUMsRUFBQTFsQixHQUFTMmxCLFFBQUEsSUFBQS9tQixFQUFBLEdBQUFDLElBQXFCLFFBQUE2QyxLQUFhLEdBQUE5QyxHQUFBLEVBQUFDLEVBQUEsSUFBZSxXQUFBb0QsR0FBQSxPQUFBdEUsR0FBQXNFLEdBQUFoQyxFQUFBOGtCLEdBQTZCLE9BQUE5a0IsR0FBUyxDQUFFLEdBQUFqQixHQUFBaUIsRUFBQTZrQix1QkFBZ0MsUUFBQTlsQixFQUFBLENBQTZDLEdBQW5DLE9BQUFyQixHQUFBLE9BQUFzRSxHQUFBbEMsRUFBQSxjQUFtQ0UsTUFBQTRrQixrQkFBQSxDQUE0QkUsR0FBQTlpQixHQUFBaEMsRUFBQTRrQixrQkFBQSxJQUE4QixPQUFNLEdBQUE1a0IsSUFBQThrQixNQUFBL2xCLEVBQUFpQixFQUFBNGtCLGtCQUM5ZDVpQixHQUFBNGlCLGtCQUFBN2xCLEVBQUFpQixFQUFBNGtCLGtCQUFBLFNBQStDLElBQUE1a0IsSUFBQWdDLEdBQUEsQ0FBZUEsR0FBQXRFLEVBQUlzRSxHQUFBNGlCLGtCQUFBRSxHQUF1QjlrQixFQUFBNGtCLGtCQUFBLElBQXlCLE9BQU1sbkIsRUFBQWtuQixrQkFBQTVrQixFQUFBNGtCLGtCQUFBNWtCLEVBQUE0a0Isa0JBQUEsS0FBc0U1a0IsRUFBQXRDLEVBQUFrbkIsc0JBQXNCLENBQTJCLElBQXRCLElBQUFqbUIsR0FBQUksRUFBQUosT0FBQUksRUFBQUgsRUFBQW9CLEdBQXNCQSxJQUFBZ0MsR0FBQSxLQUFldEUsR0FBQXNDLEVBQUlBLElBQUE0a0IsbUJBQXVCbG5CLEVBQUF3bkIsR0FBSyxPQUFBeG5CLE9BQUFrQixFQUFBOGxCLFFBQUEsRUFBMEJRLEdBQUF0bUIsRUFBS3VtQixHQUFBeG1CLEVBQUssUUFBQW9CLEdBQUFwQixHQUFjNEUsRUFBQSxFQUFBNUUsR0FBTyxRQUFBNEUsR0FBQTVFLEVBQUFDLEdBQXFCLElBQUwrbUIsR0FBQS9tQixFQUFLNkMsSUFBUSxPQUFBeWpCLElBQUEsSUFBQUMsS0FBQSxJQUFBeG1CLEdBQUF3bUIsSUFBQXhtQixLQUFBaW5CLElBQXVDbm9CLEVBQUF5bkIsR0FBQUMsSUFBQTFqQixHQUF1RSxJQUF6RCxPQUFBa2tCLEtBQUFMLEdBQUEsRUFBQUUsSUFBQSxHQUF3QixJQUFBTCxJQUFBL2hCLEVBQUEraEIsSUFBY1EsR0FBQSxLQUFRQyxJQUFBLEVBQU1sQixHQUFBLEVBQUttQixHQUFBLEtBQUFsbkIsR0FBQW1uQixNQUNsZSxLQUFBRCxJQUFBLEVBQUFsbkIsRUFBYyxRQUFBbEIsR0FBQWtCLEVBQUFqQixHQUF5QyxHQUF6QnFuQixHQUFBamxCLEVBQUEsY0FBbUJpbEIsSUFBQSxFQUFNcm5CLEdBQUE0QyxJQUFBLENBQVcsR0FBQU4sR0FBQXJCLEVBQUFvbkIsWUFBcUIsUUFBQS9sQixHQUFBckIsRUFBQW9uQixhQUFBLEtBQUFwbkIsRUFBQWttQix3QkFBQWptQixFQUFBb0IsS0FBQXJCLEVBQUFvbkIsYUFBQSxLQUFBL2xCLEVBQUFDLEVBQUF0QixFQUFBakIsR0FBQSxPQUFBc0MsSUFBQXJCLEVBQUFrbUIsd0JBQUFqbUIsRUFBQW9CLFNBQXdJQSxHQUFBckIsRUFBQW9uQixhQUFBLE9BQUEvbEIsR0FBQXJCLEVBQUFvbkIsYUFBQSxLQUFBcG5CLEVBQUFrbUIsd0JBQUFqbUIsRUFBQW9CLEtBQUFyQixFQUFBb25CLGFBQUEsS0FBQS9sQixFQUFBQyxFQUFBdEIsRUFBQWpCLEdBQUEsT0FBQXNDLElBQUFaLElBQUFULEVBQUFvbkIsYUFBQS9sQixFQUFBckIsRUFBQWttQix3QkFBQWptQixFQUFBb0IsSUFBbUwra0IsS0FBQSxFQUFNLFFBQUEzbEIsS0FBYSxlQUFBdW1CLE9BQUFLLGdCQUFBQyxNQUFBTCxJQUFBLEdBQWlELFFBQUFySCxHQUFBNWYsR0FBZSxPQUFBdW1CLEdBQUFwbEIsRUFBQSxPQUNyZSxPQUFPb2xCLEdBQUFMLHdCQUFBLEVBQTZCZ0IsU0FBQSxFQUFBQyxHQUFBbm5CLEdBQWlCLEdBQUFvQyxHQUFBaWdCLEdBQUFyaUIsR0FBQWMsRUFBQTRoQixHQUFBMWlCLEdBQUFoQixFQUFBb0QsRUFBQXVlLGlCQUFBbUUsRUFBQTFpQixFQUFBcWUsZUFBQTVjLEVBQUF6QixFQUFBcWdCLG1CQUFBOEUsRUFBQXZJLEdBQUFoZixFQUFBb0MsRUFBQXRCLEVBQUEyQyxFQUFBMUQsR0FBQXlrQixFQUFBK0MsRUFBQTFILFVBQUE0RSxFQUFBOEMsRUFBQXZILGdCQUFBdUUsRUFBQXRFLEdBQUFqZ0IsRUFBQW9DLEVBQUF0QixHQUFBa2dCLFlBQXFLNWUsR0FBQTZlLEdBQUFqaEIsRUFBQStCLEVBQVUsSUFBQXdoQixHQUFBbmhCLEVBQUEwZix1QkFBQTJCLEVBQUFyaEIsRUFBQTJmLGdCQUFBNkIsRUFBQXhoQixFQUFBNGYsZUFBQTBCLEVBQUF0aEIsRUFBQTZmLFdBQUE4QixFQUFBM2hCLEVBQUE4ZixpQkFBQThCLEVBQUE1aEIsRUFBQStmLGdCQUFBcUIsRUFBQXBoQixFQUFBZ2dCLGdCQUFBcUUsRUFBQXptQixFQUFBd25CLElBQUFWLEVBQUE5bUIsRUFBQXluQix5QkFBQWIsRUFBQTVtQixFQUFBMG5CLHVCQUFBNUIsRUFBQTlsQixFQUFBcWYsa0JBQUFpRSxFQUFBdGpCLEVBQUEybkIsaUJBQUE3RCxFQUFBOWpCLEVBQUE0bkIsaUJBQ3BPbEIsRUFBQUQsSUFBQS9CLEVBQUEsRUFBQW1CLEVBQUEsRUFBQXpDLEdBQUEsRUFBQTNkLEVBQUEsS0FBQWtmLEVBQUEsS0FBQWpqQixFQUFBLEVBQUE4QixFQUFBLEtBQUFhLEdBQUEsS0FBQWlnQixHQUFBLEtBQUFELEdBQUEsS0FBQUYsR0FBQSxLQUFBVSxJQUFBLEVBQUExQixJQUFBLEVBQUFRLElBQUEsRUFBQXdDLEdBQUEsS0FBQTlpQixHQUFBLEtBQUFzakIsR0FBQSxFQUFBRSxJQUFBLEVBQUFULElBQUEsRUFBQUcsR0FBQSxLQUFBQyxHQUFBLEVBQUFTLElBQUEsRUFBQUMsSUFBQSxFQUFBQyxHQUFBLEtBQUFILEdBQUEsS0FBQVgsSUFBQSxFQUFBQyxJQUFBLEVBQUFOLEdBQUEsSUFBQUQsR0FBQSxFQUFBdUIsR0FBQSxDQUF5TSxRQUFPTyx1QkFBQW5rQixFQUFBb2tCLDBCQUFBL25CLEVBQUFnb0IsYUFBQXRrQixFQUFBdWtCLGVBQUEsU0FBQWhvQixFQUFBQyxHQUFpRyxHQUFBbEIsR0FBQXNuQixFQUFTQSxLQUFBLENBQU0sS0FBSSxNQUFBcm1CLEdBQUFDLEdBQVksU0FBUW9tQixHQUFBdG5CLElBQUFxbkIsSUFBQXhoQixFQUFBLFVBQXVCcWpCLGlCQUFBLFNBQUFqb0IsR0FBOEIsR0FBQXFtQixLQUFBQyxHQUFBLENBQVlBLElBQUEsQ0FBTSxLQUFJLE1BQUF0bUIsS0FBVyxRQUFRc21CLElBQUEsR0FBTyxNQUFBdG1CLE1BQVdrb0IsVUFBQSxTQUFBbG9CLEdBQXVCLEdBQUFDLEdBQUFvbUIsRUFBU0EsS0FBQSxDQUFNLEtBQUlybUIsRUFBQSxDQUFHLEdBQUFqQixHQUNyZjhtQixDQUFHQSxHQUFBLENBQUssS0FBSSxHQUFBeGtCLEdBQUFyQixHQUFVLE1BQUFBLEdBQVEsUUFBUTZsQixFQUFBOW1CLEVBQUtzQyxFQUFBLE9BQVMsTUFBQUEsR0FBUyxRQUFRZ2xCLEdBQUFwbUIsRUFBQW1tQixHQUFBamxCLEVBQUEsY0FBQXlELEVBQUEsVUFBbUN1akIsZ0JBQUEsU0FBQW5vQixHQUE2QixHQUFBQyxHQUFBNGxCLENBQVNBLEdBQUFuaUIsR0FBTyxLQUFJLE1BQUExRCxLQUFXLFFBQVE2bEIsRUFBQTVsQixLQUM1SyxRQUFBbW9CLElBQUFwb0IsR0FBZSxRQUFBQyxHQUFBRCxHQUFzQixNQUFSQSxHQUFBcVYsR0FBQXJWLEdBQVEsT0FBQUEsRUFBQSxLQUFBQSxFQUFBMk0sVUFBaUMsR0FBQTVOLEdBQUFpQixFQUFBbWhCLGlCQUEwQm5oQixHQUFBa2pCLEdBQUFsakIsRUFBUSxJQUFBcUIsR0FBQXJCLEVBQUE2bkIsdUJBQUF6bkIsRUFBQUosRUFBQThuQiwwQkFBQWptQixFQUFBN0IsRUFBQStuQixZQUE4RSxRQUFPTSxnQkFBQSxTQUFBcm9CLEVBQUFDLEdBQThCLEdBQUFsQixHQUFBLEdBQUF3YixJQUFBLFNBQTJNLE9BQXJMdmEsSUFBR3dDLFFBQUF6RCxFQUFBMlcsY0FBQTFWLEVBQUEwYixnQkFBQSxLQUFBd0ssd0JBQUEsRUFBQTdDLGtCQUFBLEVBQUErRCxhQUFBLEtBQUF4bUIsUUFBQSxLQUFBdWUsZUFBQSxLQUFBWSxRQUFBOWYsRUFBQWdtQixrQkFBQSxNQUFrTGxuQixFQUFBNE4sVUFBQTNNLEdBQXFCc29CLGdCQUFBLFNBQUF0b0IsRUFBQUMsRUFBQWxCLEVBQUEyRixHQUFtQyxHQUFBcEQsR0FBQXJCLEVBQUF1QyxPQUFnQixJQUFBekQsRUFBQSxDQUFNQSxFQUNwZkEsRUFBQWlXLG1CQUFzQixJQUFBalQsRUFBTTlCLEdBQUEsQ0FBd0MsSUFBckMsSUFBQTRVLEdBQUE5VixJQUFBLElBQUFBLEVBQUFzTyxJQUFBLE9BQUFsTSxFQUFBLE9BQXFDWSxFQUFBaEQsRUFBUSxJQUFBZ0QsRUFBQXNMLEtBQVUsQ0FBRSxHQUFBaU0sR0FBQXZYLEdBQUEsQ0FBVUEsSUFBQTRLLFVBQUEwTix5Q0FBd0QsTUFBQXBhLElBQVE4QixJQUFBLGVBQUFaLEVBQUEsT0FBZ0NZLElBQUE0SyxVQUFBL0wsUUFBc0I3QixFQUFBdWEsR0FBQXZhLEdBQUFtYixHQUFBbmIsRUFBQWdELFNBQWtCaEQsR0FBQXVHLEVBQVMsUUFBQXJGLEVBQUFXLFFBQUFYLEVBQUFXLFFBQUE3QixFQUFBa0IsRUFBQWtmLGVBQUFwZ0IsRUFBZ0RrQixFQUFBeUUsRUFBSXpFLEVBQUEsU0FBQUEsRUFBQSxLQUFBQSxFQUFvQnlFLEVBQUEsTUFBQTFFLEdBQUEsTUFBQUEsRUFBQXFDLE1BQUEsTUFBQXJDLEVBQUFxQyxLQUFBNkMsWUFBQSxJQUFBbEYsRUFBQXFDLEtBQUE2QyxVQUFBUSwrQkFBQXJFLElBQUFqQixFQUFBa0IsR0FBK0d3YixHQUFBeGIsR0FBTTJaLGVBQUF2VyxFQUFBc1ksY0FBK0I4QyxRQUFBOWYsR0FBVW9kLFNBQUFuZCxFQUFBaWQsV0FBQSxFQUFBQyxVQUFBLEVBQ3pkSSxhQUFBLEtBQUF6WixLQUFBLE9BQThCakMsRUFBQVAsRUFBQW9ELElBQU9zakIsZUFBQWhvQixFQUFBZ29CLGVBQUFDLGlCQUFBam9CLEVBQUFpb0IsaUJBQUFFLGdCQUFBbm9CLEVBQUFtb0IsZ0JBQUFELFVBQUFsb0IsRUFBQWtvQixVQUFBSyxzQkFBQSxTQUFBdm9CLEdBQTJLLEdBQVpBLElBQUF3QyxTQUFZeEMsRUFBQW1WLE1BQUEsV0FBd0IsUUFBQW5WLEVBQUFtVixNQUFBOUgsS0FBb0IsYUFBQXRPLEdBQUFpQixFQUFBbVYsTUFBQXhJLFVBQW1DLGVBQUEzTSxHQUFBbVYsTUFBQXhJLFlBQWtDNmIsaUJBQUF2b0IsRUFBQXdvQiw4QkFBQSxTQUFBem9CLEdBQXNFLE1BQVJBLEdBQUFzVixHQUFBdFYsR0FBUSxPQUFBQSxFQUFBLEtBQUFBLEVBQUEyTSxXQUFpQytiLG1CQUFBLFNBQUExb0IsR0FBZ0MsR0FBQWpCLEdBQUFpQixFQUFBMm9CLHVCQUFnQyxPQUFBL00sSUFBQTNhLE1BQ3hlakIsR0FBRzRvQix3QkFBQSxTQUFBNW9CLEdBQW9DLE1BQUFDLEdBQUFELElBQVkyb0Isd0JBQUEsU0FBQTNvQixHQUFxQyxNQUFBakIsS0FBQWlCLEdBQUEsV0FBNEcsUUFBQTZvQixJQUFBN29CLEVBQUFDLEVBQUFsQixHQUFtQixHQUFBc0MsR0FBQSxFQUFBbkIsVUFBQUMsUUFBQSxTQUFBRCxVQUFBLEdBQUFBLFVBQUEsT0FBa0UsUUFBT2lDLFNBQUEyYyxHQUFBcmQsSUFBQSxNQUFBSixFQUFBLFFBQUFBLEVBQUFTLFNBQUE5QixFQUFBMFYsY0FBQXpWLEVBQUFrUyxlQUFBcFQsR0FLaFMsUUFBQStwQixJQUFBOW9CLEdBQWUsUUFBQStvQixHQUFBbm5CLGVBQUE1QixLQUFpQ2dwQixHQUFBcG5CLGVBQUE1QixLQUFpQ2lwQixHQUFBQyxLQUFBbHBCLEdBQUErb0IsR0FBQS9vQixJQUFBLEdBQThCZ3BCLEdBQUFocEIsSUFBQSxHQUFTLElBQ3hILFFBQUFtcEIsSUFBQW5wQixFQUFBQyxFQUFBbEIsR0FBbUIsR0FBQXNDLEdBQUFzSSxFQUFBMUosRUFBWSxJQUFBb0IsR0FBQW9JLEVBQUF4SixFQUFBbEIsR0FBQSxDQUFlLEdBQUFxQixHQUFBaUIsRUFBQStuQixjQUF1QmhwQixLQUFBSixFQUFBakIsR0FBQSxNQUFBQSxHQUFBc0MsRUFBQXVJLGtCQUFBN0ssR0FBQXNDLEVBQUFnb0IsaUJBQUFDLE1BQUF2cUIsSUFBQXNDLEVBQUFrb0IseUJBQUEsRUFBQXhxQixHQUFBc0MsRUFBQXlJLDRCQUFBLElBQUEvSyxFQUFBeXFCLEdBQUF4cEIsRUFBQUMsR0FBQW9CLEVBQUFvb0IsZ0JBQUF6cEIsRUFBQXFCLEVBQUEwUyxjQUFBaFYsR0FBQWtCLEVBQUFvQixFQUFBcW9CLGVBQUF0cEIsRUFBQWlCLEVBQUFzb0Isb0JBQUEzcEIsRUFBQTRwQixlQUFBeHBCLEVBQUFILEVBQUEsR0FBQWxCLEdBQUFzQyxFQUFBdUksaUJBQUF2SSxFQUFBeUksNEJBQUEsSUFBQS9LLEVBQUFpQixFQUFBaVMsYUFBQWhTLEVBQUEsSUFBQUQsRUFBQWlTLGFBQUFoUyxFQUFBLEdBQUFsQixRQUFtVzhxQixJQUFBN3BCLEVBQUFDLEVBQUF3SixFQUFBeEosRUFBQWxCLEtBQUEsTUFDeGEsUUFBQThxQixJQUFBN3BCLEVBQUFDLEVBQUFsQixHQUFtQitwQixHQUFBN29CLEtBQUEsTUFBQWxCLEVBQUFpQixFQUFBOHBCLGdCQUFBN3BCLEdBQUFELEVBQUFpUyxhQUFBaFMsRUFBQSxHQUFBbEIsSUFBNkQsUUFBQXlxQixJQUFBeHBCLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBNEssRUFBQTFKLEVBQVlsQixJQUFBa0IsRUFBQWxCLEVBQUFxcUIsZ0JBQUFucEIsRUFBQUQsRUFBQSxRQUFBakIsRUFBQTBxQixnQkFBQXpwQixFQUFBakIsRUFBQWdWLGVBQUFoVixFQUFBNkssaUJBQUEsR0FBQTVKLEVBQUE4cEIsZ0JBQUEvcUIsRUFBQTJxQixlQUFBMXBCLEVBQUE4cEIsZ0JBQUE3cEIsR0FDN0csUUFBQThwQixJQUFBL3BCLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBa0IsRUFBQStELE1BQUEzQyxFQUFBcEIsRUFBQWtULE9BQTBCLE9BQUFsUyxLQUFVb0IsS0FBQSxPQUFBMm5CLEtBQUEsT0FBQUMsSUFBQSxPQUFBQyxJQUFBLFFBQThDanFCLEdBQUlrcUIsZUFBQSxPQUFBQyxhQUFBLE9BQUFwbUIsTUFBQSxNQUFBakYsSUFBQWlCLEVBQUFxcUIsY0FBQUMsYUFBQW5YLFFBQUEsTUFBQTlSLElBQUFyQixFQUFBcXFCLGNBQUFFLGlCQUEwSSxRQUFBQyxJQUFBeHFCLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBa0IsRUFBQW1xQixZQUFxQnBxQixHQUFBcXFCLGVBQWlCRSxlQUFBLE1BQUF0cUIsRUFBQWtULFFBQUFsVCxFQUFBa1QsUUFBQWxULEVBQUFrcUIsZUFBQUcsYUFBQSxNQUFBcnFCLEVBQUErRCxNQUFBL0QsRUFBQStELE1BQUFqRixFQUFBMHJCLFdBQUEsYUFBQXhxQixFQUFBb0MsTUFBQSxVQUFBcEMsRUFBQW9DLEtBQUEsTUFBQXBDLEVBQUFrVCxRQUFBLE1BQUFsVCxFQUFBK0QsT0FDeFMsUUFBQTBtQixJQUFBMXFCLEVBQUFDLEdBQWlCQSxJQUFBa1QsUUFBWSxNQUFBbFQsR0FBQWtwQixHQUFBbnBCLEVBQUEsVUFBQUMsR0FBMkIsUUFBQTBxQixJQUFBM3FCLEVBQUFDLEdBQWlCeXFCLEdBQUExcUIsRUFBQUMsRUFBUSxJQUFBbEIsR0FBQWtCLEVBQUErRCxLQUFjLE9BQUFqRixFQUFBLElBQUFBLEdBQUEsS0FBQWlCLEVBQUFnRSxNQUFBaEUsRUFBQWdFLE1BQUEsSUFBOEMsV0FBQS9ELEVBQUFvQyxNQUEyQnBDLEVBQUEycUIsV0FBQTVxQixFQUFBZ0UsUUFBQSxHQUFBakYsR0FBQWtCLEdBQUFsQixHQUFBa0IsR0FBQUQsRUFBQWdFLE9BQUFqRixLQUFBaUIsRUFBQWdFLE1BQUEsR0FBQWpGLElBQWdFaUIsRUFBQWdFLFFBQUEsR0FBQWpGLElBQUFpQixFQUFBZ0UsTUFBQSxHQUFBakYsSUFBb0MsTUFBQWtCLEVBQUErRCxPQUFBLE1BQUEvRCxFQUFBbXFCLGNBQUFwcUIsRUFBQW9xQixlQUFBLEdBQUFucUIsRUFBQW1xQixlQUFBcHFCLEVBQUFvcUIsYUFBQSxHQUFBbnFCLEVBQUFtcUIsY0FBQSxNQUFBbnFCLEVBQUFrVCxTQUFBLE1BQUFsVCxFQUFBa3FCLGlCQUFBbnFCLEVBQUFtcUIsaUJBQUFscUIsRUFBQWtxQixpQkFDNVEsUUFBQVUsSUFBQTdxQixFQUFBQyxHQUFpQixPQUFBQSxFQUFBb0MsTUFBZSw4QkFBaUMsOEZBQUFyQyxFQUFBZ0UsTUFBQSxHQUErR2hFLEVBQUFnRSxNQUFBaEUsRUFBQW9xQixZQUF1QixNQUFNLFNBQUFwcUIsRUFBQWdFLE1BQUFoRSxFQUFBZ0UsTUFBd0IvRCxFQUFBRCxFQUFBTyxLQUFTLEtBQUFOLElBQUFELEVBQUFPLEtBQUEsSUFBb0JQLEVBQUFtcUIsZ0JBQUFucUIsRUFBQW1xQixlQUFtQ25xQixFQUFBbXFCLGdCQUFBbnFCLEVBQUFtcUIsZUFBbUMsS0FBQWxxQixJQUFBRCxFQUFBTyxLQUFBTixHQUFtQixRQUFBNnFCLElBQUE5cUIsR0FBZSxHQUFBQyxHQUFBLEVBQXVHLE9BQTlGOHFCLElBQUFqbEIsU0FBQUUsUUFBQWhHLEVBQUEsU0FBQUEsR0FBa0MsTUFBQUEsR0FBQSxnQkFBQUEsSUFBQSxnQkFBQUEsS0FBQUMsR0FBQUQsS0FBNERDLEVBQ2pkLFFBQUErcUIsSUFBQWhyQixFQUFBQyxHQUEyRSxNQUExREQsR0FBQWlCLElBQUthLFNBQUEsUUFBZ0I3QixJQUFJQSxFQUFBNnFCLEdBQUE3cUIsRUFBQTZCLGFBQUE5QixFQUFBOEIsU0FBQTdCLEdBQWlDRCxFQUFTLFFBQUFpckIsSUFBQWpyQixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQWlDLEdBQVpyQixJQUFBa3JCLFFBQVlqckIsRUFBQSxDQUFNQSxJQUFLLFFBQUFHLEdBQUEsRUFBWUEsRUFBQXJCLEVBQUFvQixPQUFXQyxJQUFBSCxFQUFBLElBQUFsQixFQUFBcUIsS0FBQSxDQUFtQixLQUFBckIsRUFBQSxFQUFRQSxFQUFBaUIsRUFBQUcsT0FBV3BCLElBQUFxQixFQUFBSCxFQUFBMkIsZUFBQSxJQUFBNUIsRUFBQWpCLEdBQUFpRixPQUFBaEUsRUFBQWpCLEdBQUFvc0IsV0FBQS9xQixJQUFBSixFQUFBakIsR0FBQW9zQixTQUFBL3FCLE1BQUFpQixJQUFBckIsRUFBQWpCLEdBQUFxc0IsaUJBQUEsT0FBNEcsQ0FBbUIsSUFBZHJzQixFQUFBLEdBQUFBLEVBQU9rQixFQUFBLEtBQU9HLEVBQUEsRUFBUUEsRUFBQUosRUFBQUcsT0FBV0MsSUFBQSxDQUFLLEdBQUFKLEVBQUFJLEdBQUE0RCxRQUFBakYsRUFBaUUsTUFBOUNpQixHQUFBSSxHQUFBK3FCLFVBQUEsT0FBaUI5cEIsSUFBQXJCLEVBQUFJLEdBQUFnckIsaUJBQUEsR0FBb0MsUUFBQW5yQixHQUFBRCxFQUFBSSxHQUFBeU0sV0FBQTVNLEVBQUFELEVBQUFJLElBQWtDLE9BQUFILE1BQUFrckIsVUFBQSxJQUM5YixRQUFBRSxJQUFBcnJCLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBa0IsRUFBQStELEtBQWNoRSxHQUFBcXFCLGVBQWlCQyxhQUFBLE1BQUF2ckIsSUFBQWtCLEVBQUFtcUIsYUFBQWtCLGNBQUFyckIsRUFBQXNyQixVQUFnRSxRQUFBQyxJQUFBeHJCLEVBQUFDLEdBQWdFLE1BQS9DLE9BQUFBLEVBQUF3ckIsd0JBQUF0cUIsRUFBQSxhQUErQ0YsTUFBV2hCLEdBQUkrRCxNQUFBLE9BQUFvbUIsYUFBQSxPQUFBdG9CLFNBQUEsR0FBQTlCLEVBQUFxcUIsY0FBQUMsZUFBNEUsUUFBQW9CLElBQUExckIsRUFBQUMsR0FBaUIsR0FBQWxCLEdBQUFrQixFQUFBK0QsS0FBYyxPQUFBakYsTUFBQWtCLEVBQUFtcUIsYUFBQW5xQixJQUFBNkIsU0FBQSxNQUFBN0IsSUFBQSxNQUFBbEIsRUFBQW9DLEVBQUEsYUFBQWEsTUFBQTRCLFFBQUEzRCxLQUFBLEdBQUFBLEVBQUFFLE9BQUEsT0FBQWdCLEVBQUEsTUFBQWxCLElBQUEsSUFBQWxCLEVBQUEsR0FBQWtCLEdBQUEsTUFBQWxCLE1BQUEsS0FBd0ppQixFQUFBcXFCLGVBQWlCQyxhQUFBLEdBQUF2ckIsR0FDbmQsUUFBQTRzQixJQUFBM3JCLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBa0IsRUFBQStELEtBQWMsT0FBQWpGLE1BQUEsR0FBQUEsTUFBQWlCLEVBQUFnRSxRQUFBaEUsRUFBQWdFLE1BQUFqRixHQUFBLE1BQUFrQixFQUFBbXFCLGVBQUFwcUIsRUFBQW9xQixhQUFBcnJCLElBQW9GLE1BQUFrQixFQUFBbXFCLGVBQUFwcUIsRUFBQW9xQixhQUFBbnFCLEVBQUFtcUIsY0FBc0QsUUFBQXdCLElBQUE1ckIsR0FBZSxHQUFBQyxHQUFBRCxFQUFBaVgsV0FBb0JoWCxLQUFBRCxFQUFBcXFCLGNBQUFDLGVBQUF0cUIsRUFBQWdFLE1BQUEvRCxHQUM1TSxRQUFBNHJCLElBQUE3ckIsR0FBZSxPQUFBQSxHQUFVLDRDQUE4QyxzREFBdUQsK0NBQThDLFFBQUE4ckIsSUFBQTlyQixFQUFBQyxHQUFpQixhQUFBRCxHQUFBLGlDQUFBQSxFQUFBNnJCLEdBQUE1ckIsR0FBQSwrQkFBQUQsR0FBQSxrQkFBQUMsRUFBQSwrQkFBQUQsRUFFN0wsUUFBQStyQixJQUFBL3JCLEVBQUFDLEdBQWlCLEdBQUFBLEVBQUEsQ0FBTSxHQUFBbEIsR0FBQWlCLEVBQUErVyxVQUFtQixJQUFBaFksT0FBQWlCLEVBQUFnc0IsV0FBQSxJQUFBanRCLEVBQUFnVCxTQUFxRCxZQUFkaFQsRUFBQWt0QixVQUFBaHNCLEdBQXNCRCxFQUFBaVgsWUFBQWhYLEVBR3ZHLFFBQUFpc0IsSUFBQWxzQixFQUFBQyxHQUFpQkQsSUFBQW1zQixLQUFVLFFBQUFwdEIsS0FBQWtCLEdBQUEsR0FBQUEsRUFBQTJCLGVBQUE3QyxHQUFBLENBQXVDLEdBQUFzQyxHQUFBLElBQUF0QyxFQUFBK0wsUUFBQSxNQUEwQjFLLEVBQUFyQixFQUFROEMsRUFBQTVCLEVBQUFsQixFQUFXcUIsR0FBQSxNQUFBeUIsR0FBQSxpQkFBQUEsSUFBQSxLQUFBQSxFQUFBLEdBQUFSLEdBQUEsZ0JBQUFRLElBQUEsSUFBQUEsR0FBQXVxQixHQUFBeHFCLGVBQUF4QixJQUFBZ3NCLEdBQUFoc0IsSUFBQSxHQUFBeUIsR0FBQXdxQixPQUFBeHFCLEVBQUEsS0FBMkgsVUFBQTlDLE1BQUEsWUFBNEJzQyxFQUFBckIsRUFBQXNzQixZQUFBdnRCLEVBQUFxQixHQUFBSixFQUFBakIsR0FBQXFCLEdBQ3RRLFFBQUFtc0IsSUFBQXZzQixFQUFBQyxFQUFBbEIsR0FBbUJrQixJQUFBdXNCLEdBQUF4c0IsS0FBQSxNQUFBQyxFQUFBNkIsVUFBQSxNQUFBN0IsRUFBQXdyQix3QkFBQXRxQixFQUFBLE1BQUFuQixFQUFBakIsS0FBQSxjQUFBa0IsRUFBQXdyQiwwQkFBQSxNQUFBeHJCLEVBQUE2QixTQUFBWCxFQUFBLDZCQUFBbEIsR0FBQXdyQix5QkFBQSxVQUFBeHJCLEdBQUF3ckIsd0JBQUEsT0FBQXRxQixFQUFBLGFBQUFsQixFQUFBa3NCLE9BQUEsZ0JBQUFsc0IsR0FBQWtzQixNQUFBaHJCLEVBQUEsS0FBQXBDLEtBQUEsUUFDbkIsUUFBQTB0QixJQUFBenNCLEVBQUFDLEdBQWlCLFFBQUFELEVBQUE4SyxRQUFBLDJCQUFBN0ssR0FBQXlzQixFQUFvRCxRQUFBMXNCLEdBQVUseUtBQWtMLG1CQUNqUSxRQUFBMnNCLElBQUEzc0IsRUFBQUMsR0FBaUJELEVBQUEsSUFBQUEsRUFBQStSLFVBQUEsS0FBQS9SLEVBQUErUixTQUFBL1IsSUFBQTRzQixhQUFvRCxJQUFBN3RCLEdBQUEyWCxHQUFBMVcsRUFBWUMsR0FBQXNMLEdBQUF0TCxFQUFRLFFBQUFvQixHQUFBLEVBQVlBLEVBQUFwQixFQUFBRSxPQUFXa0IsSUFBQSxDQUFLLEdBQUFqQixHQUFBSCxFQUFBb0IsRUFBV3RDLEdBQUE2QyxlQUFBeEIsSUFBQXJCLEVBQUFxQixLQUFBLGNBQUFBLEVBQUE4VixHQUFBLHFCQUFBbFcsR0FBQSxhQUFBSSxHQUFBLFlBQUFBLEdBQUE4VixHQUFBLG1CQUFBbFcsR0FBQWtXLEdBQUEsaUJBQUFsVyxHQUFBakIsRUFBQTh0QixTQUFBLEVBQUE5dEIsRUFBQSt0QixVQUFBLGlCQUFBMXNCLEdBQUE0UixHQUFBLGNBQUFrRSxHQUFBLHFCQUFBbFcsR0FBQWpCLEVBQUFndUIsV0FBQSxnQkFBQTNzQixHQUFBNFIsR0FBQSxhQUFBa0UsR0FBQSxtQkFBQWxXLEdBQUFqQixFQUFBaXVCLFVBQUEsR0FBQUMsR0FBQXJyQixlQUFBeEIsSUFBQXlGLEdBQUF6RixFQUFBNnNCLEdBQUE3c0IsR0FBQUosR0FBQWpCLEVBQUFxQixJQUFBLElBRTFHLFFBQUE4c0IsSUFBQWx0QixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQXFTLE1BQWhSdEMsR0FBQSxJQUFBQSxFQUFBZ1QsU0FBQWhULElBQUE2dEIsY0FBbUN2ckIsSUFBQThyQixLQUFBOXJCLEVBQUF3cUIsR0FBQTdyQixJQUFrQnFCLElBQUE4ckIsR0FBQSxXQUFBbnRCLEtBQUFqQixFQUFBYSxjQUFBLE9BQUFJLEVBQUFvdEIsVUFBQSxvQkFBQXB0QixJQUFBNGhCLFlBQUE1aEIsRUFBQStXLGFBQUEvVyxFQUFBLGdCQUFBQyxHQUFBeXNCLEdBQUEzdEIsRUFBQWEsY0FBQUksR0FBcUswc0IsR0FBQXpzQixFQUFBeXNCLEtBQVEzdEIsRUFBQWEsY0FBQUksS0FBQWpCLEVBQUFzdUIsZ0JBQUFoc0IsRUFBQXJCLEdBQThDQSxFQUFTLFFBQUFzdEIsSUFBQXR0QixFQUFBQyxHQUFpQixXQUFBQSxFQUFBOFIsU0FBQTlSLElBQUEyc0IsZUFBQVcsZUFBQXZ0QixHQUNyVixRQUFBd3RCLElBQUF4dEIsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUFxQixHQUFBakIsR0FBQXFzQixHQUFBeHNCLEVBQUFsQixFQUFjLFFBQUFrQixHQUFVLDBCQUFBNEYsR0FBQSxpQkFBQTdGLEVBQWtELElBQUE2QixHQUFBOUMsQ0FBUSxNQUFNLDZCQUFBOEMsSUFBQTRyQixPQUFBN3JCLGVBQUFDLElBQUFnRSxHQUFBaEUsRUFBQTRyQixHQUFBNXJCLEdBQUE3QixFQUF5RTZCLEdBQUE5QyxDQUFJLE1BQU0sY0FBQThHLEdBQUEsbUJBQUE3RixHQUFzQzZCLEVBQUE5QyxDQUFJLE1BQU0sdUJBQUE4RyxHQUFBLG1CQUFBN0YsR0FBZ0Q2RixHQUFBLGlCQUFBN0YsR0FBc0I2QixFQUFBOUMsQ0FBSSxNQUFNLFlBQUE4RyxHQUFBLG1CQUFBN0YsR0FBb0M2RixHQUFBLHFCQUFBN0YsR0FBMEI2QixFQUFBOUMsQ0FBSSxNQUFNLGVBQUE4RyxHQUFBLHFCQUFBN0YsR0FBeUM2QixFQUFBOUMsQ0FBSSxNQUFNLGFBQUF5ckIsR0FBQXhxQixFQUFBakIsR0FBcUI4QyxFQUFBa29CLEdBQUEvcEIsRUFBQWpCLEdBQVU4RyxHQUFBLHVCQUFBN0YsR0FDMWQyc0IsR0FBQXRyQixFQUFBLFdBQWlCLE1BQU0sY0FBQVEsRUFBQW1wQixHQUFBaHJCLEVBQUFqQixFQUF3QixNQUFNLGNBQUFzc0IsR0FBQXJyQixFQUFBakIsR0FBc0I4QyxFQUFBWixNQUFNbEMsR0FBSWlGLE1BQUEsU0FBZTZCLEdBQUEsdUJBQUE3RixHQUE0QjJzQixHQUFBdHJCLEVBQUEsV0FBaUIsTUFBTSxnQkFBQXFxQixHQUFBMXJCLEVBQUFqQixHQUF3QjhDLEVBQUEycEIsR0FBQXhyQixFQUFBakIsR0FBVThHLEdBQUEsdUJBQUE3RixHQUE0QjJzQixHQUFBdHJCLEVBQUEsV0FBaUIsTUFBTSxTQUFBUSxFQUFBOUMsRUFBWXd0QixHQUFBdHNCLEVBQUE0QixFQUFBNnJCLEdBQVcsSUFBQTNyQixHQUFBVCxFQUFBTyxDQUFVLEtBQUFFLElBQUFULEdBQUEsR0FBQUEsRUFBQU0sZUFBQUcsR0FBQSxDQUFtQyxHQUFBUixHQUFBRCxFQUFBUyxFQUFXLFdBQUFBLEVBQUFtcUIsR0FBQWxzQixFQUFBdUIsRUFBQW1zQixJQUFBLDRCQUFBM3JCLEdBQUFSLE1BQUFvc0IsT0FBQSxhQUFBcHNCLEdBQUFxc0IsR0FBQTV0QixFQUFBdUIsSUFBQSxhQUFBUSxFQUFBLGdCQUFBUixJQUFBLGFBQUF0QixHQUFBLEtBQUFzQixJQUFBd3FCLEdBQUEvckIsRUFBQXVCLEdBQUEsZ0JBQUFBLElBQUF3cUIsR0FBQS9yQixFQUMzVCxHQUFBdUIsR0FBQSxtQ0FBQVEsR0FBQSw2QkFBQUEsR0FBQSxjQUFBQSxJQUFBdUosR0FBQTFKLGVBQUFHLEdBQUEsTUFBQVIsR0FBQW9yQixHQUFBdHJCLEVBQUFVLEdBQUEzQixFQUFBeXBCLEdBQUE3cEIsRUFBQStCLEVBQUFSLEdBQUEsTUFBQUEsR0FBQTRuQixHQUFBbnBCLEVBQUErQixFQUFBUixJQUFvSyxPQUFBdEIsR0FBVSxZQUFBZ1QsR0FBQWpULEdBQW1CNnFCLEdBQUE3cUIsRUFBQWpCLEVBQVEsTUFBTSxnQkFBQWtVLEdBQUFqVCxHQUFzQjRyQixHQUFBNXJCLEVBQUFqQixFQUFRLE1BQU0sb0JBQUFBLEVBQUFpRixPQUFBaEUsRUFBQWlTLGFBQUEsUUFBQWxULEVBQUFpRixNQUE2RCxNQUFNLGNBQUFoRSxFQUFBdXJCLFdBQUF4c0IsRUFBQXdzQixTQUFzQ3RyQixFQUFBbEIsRUFBQWlGLE1BQVUsTUFBQS9ELEVBQUFnckIsR0FBQWpyQixJQUFBakIsRUFBQXdzQixTQUFBdHJCLEdBQUEsU0FBQWxCLEVBQUFxckIsY0FBQWEsR0FBQWpyQixJQUFBakIsRUFBQXdzQixTQUFBeHNCLEVBQUFxckIsY0FBQSxFQUEyRixNQUFNLDJCQUFBdm9CLEdBQUFnc0IsVUFBQTd0QixFQUFBOHRCLFFBQ3ZjNXNCLEtBQ0EsUUFBQTZzQixJQUFBL3RCLEVBQUFDLEVBQUFsQixFQUFBc0MsRUFBQWpCLEdBQXVCLEdBQUF5QixHQUFBLElBQVcsUUFBQTVCLEdBQVUsWUFBQWxCLEVBQUFnckIsR0FBQS9wQixFQUFBakIsR0FBdUJzQyxFQUFBMG9CLEdBQUEvcEIsRUFBQXFCLEdBQVVRLElBQUssTUFBTSxjQUFBOUMsRUFBQWlzQixHQUFBaHJCLEVBQUFqQixHQUF3QnNDLEVBQUEycEIsR0FBQWhyQixFQUFBcUIsR0FBVVEsSUFBSyxNQUFNLGNBQUE5QyxFQUFBa0MsTUFBb0JsQyxHQUFJaUYsTUFBQSxTQUFlM0MsRUFBQUosTUFBTUksR0FBSTJDLE1BQUEsU0FBZW5DLElBQUssTUFBTSxnQkFBQTlDLEVBQUF5c0IsR0FBQXhyQixFQUFBakIsR0FBMEJzQyxFQUFBbXFCLEdBQUF4ckIsRUFBQXFCLEdBQVVRLElBQUssTUFBTSwyQkFBQTlDLEdBQUE4dUIsU0FBQSxrQkFBQXhzQixHQUFBd3NCLFVBQUE3dEIsRUFBQTh0QixRQUFBNXNCLElBQW9GcXJCLEdBQUF0c0IsRUFBQW9CLEVBQUFxc0IsR0FBVyxJQUFBcHNCLEdBQUFTLENBQVEvQixHQUFBLElBQU8sS0FBQXNCLElBQUF2QyxHQUFBLElBQUFzQyxFQUFBTyxlQUFBTixJQUFBdkMsRUFBQTZDLGVBQUFOLElBQUEsTUFBQXZDLEVBQUF1QyxHQUFBLGFBQUFBLEVBQUEsSUFBQVMsSUFBQTlCLEdBQUFsQixFQUFBdUMsR0FBQXJCLEVBQUEyQixlQUFBRyxLQUFBL0IsVUFBbUlBLEVBQUErQixHQUNoZixRQUFJLDRCQUFBVCxHQUFBLGFBQUFBLEdBQUEsbUNBQUFBLEdBQUEsNkJBQUFBLEdBQUEsY0FBQUEsSUFBQWdLLEdBQUExSixlQUFBTixHQUFBTyxvQkFBQXlCLEtBQUFoQyxFQUFBLE1BQWtNLEtBQUFBLElBQUFELEdBQUEsQ0FBWSxHQUFBRSxHQUFBRixFQUFBQyxFQUFpQyxJQUF0QnJCLEVBQUEsTUFBQWxCLElBQUF1QyxHQUFBLE9BQXNCRCxFQUFBTyxlQUFBTixJQUFBQyxJQUFBdEIsSUFBQSxNQUFBc0IsR0FBQSxNQUFBdEIsR0FBQSxhQUFBcUIsRUFBQSxHQUFBckIsRUFBQSxDQUF1RSxJQUFBOEIsSUFBQTlCLE1BQUEyQixlQUFBRyxJQUFBUixLQUFBSyxlQUFBRyxLQUFBL0IsVUFBa0VBLEVBQUErQixHQUFBLEdBQVcsS0FBQUEsSUFBQVIsS0FBQUssZUFBQUcsSUFBQTlCLEVBQUE4QixLQUFBUixFQUFBUSxLQUFBL0IsVUFBc0RBLEVBQUErQixHQUFBUixFQUFBUSxRQUFhL0IsS0FBQTZCLFlBQUF5QixLQUFBaEMsRUFBQXRCLE1BQUF1QixNQUFvQyw0QkFDOWVELEdBQUFDLE1BQUFvc0IsT0FBQSxPQUFBMXRCLE1BQUEwdEIsT0FBQSxhQUFBcHNCLEdBQUF0QixJQUFBc0IsSUFBQU0sU0FBQXlCLEtBQUFoQyxFQUFBLEdBQUFDLElBQUEsYUFBQUQsRUFBQXJCLElBQUFzQixHQUFBLGdCQUFBQSxJQUFBLGdCQUFBQSxLQUFBTSxTQUFBeUIsS0FBQWhDLEVBQUEsR0FBQUMsR0FBQSxtQ0FBQUQsR0FBQSw2QkFBQUEsSUFBQWdLLEdBQUExSixlQUFBTixJQUFBLE1BQUFDLEdBQUFvckIsR0FBQXZzQixFQUFBa0IsR0FBQU8sR0FBQTVCLElBQUFzQixJQUFBTSxpQkFBQXlCLEtBQUFoQyxFQUFBQyxJQUE0VixNQUE3QnZCLEtBQUE2QixTQUFBeUIsS0FBQSxRQUFBdEQsR0FBNkI2QixFQUM1VixRQUFBbXNCLElBQUFodUIsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFBakIsR0FBdUIsVUFBQXJCLEdBQUEsVUFBQXFCLEVBQUFpQyxNQUFBLE1BQUFqQyxFQUFBRyxNQUFBbXFCLEdBQUExcUIsRUFBQUksR0FBcURxc0IsR0FBQTF0QixFQUFBc0MsR0FBUUEsRUFBQW9yQixHQUFBMXRCLEVBQUFxQixFQUFVLFFBQUF5QixHQUFBLEVBQVlBLEVBQUE1QixFQUFBRSxPQUFXMEIsR0FBQSxHQUFNLEdBQUFQLEdBQUFyQixFQUFBNEIsR0FBQUUsRUFBQTlCLEVBQUE0QixFQUFBLEVBQW9CLFdBQUFQLEVBQUE0cUIsR0FBQWxzQixFQUFBK0IsRUFBQTJyQixJQUFBLDRCQUFBcHNCLEVBQUFzc0IsR0FBQTV0QixFQUFBK0IsR0FBQSxhQUFBVCxFQUFBeXFCLEdBQUEvckIsRUFBQStCLEdBQUFWLEVBQUEsTUFBQVUsRUFBQThuQixHQUFBN3BCLEVBQUFzQixFQUFBUyxHQUFBL0IsRUFBQThwQixnQkFBQXhvQixHQUFBLE1BQUFTLEVBQUFvbkIsR0FBQW5wQixFQUFBc0IsRUFBQVMsR0FBQXluQixHQUFBeHBCLEVBQUFzQixHQUF1SixPQUFBdkMsR0FBVSxZQUFBNHJCLEdBQUEzcUIsRUFBQUksRUFBcUIsTUFBTSxnQkFBQXVyQixHQUFBM3JCLEVBQUFJLEVBQXdCLE1BQU0sY0FBQUosRUFBQXFxQixjQUFBQyxhQUFBLE9BQUFycUIsRUFBQUQsRUFBQXFxQixjQUFBaUIsWUFBQXRyQixFQUFBcXFCLGNBQUFpQixjQUFBbHJCLEVBQUFtckIsU0FBQXhzQixFQUFBcUIsRUFBQTRELE1BQUEsTUFBQWpGLEVBQUFrc0IsR0FBQWpyQixJQUN6V0ksRUFBQW1yQixTQUFBeHNCLEdBQUEsR0FBQWtCLE1BQUFHLEVBQUFtckIsV0FBQSxNQUFBbnJCLEVBQUFncUIsYUFBQWEsR0FBQWpyQixJQUFBSSxFQUFBbXJCLFNBQUFuckIsRUFBQWdxQixjQUFBLEdBQUFhLEdBQUFqckIsSUFBQUksRUFBQW1yQixTQUFBbnJCLEVBQUFtckIsWUFBQSxTQUNBLFFBQUEwQyxJQUFBanVCLEVBQUFDLEVBQUFsQixFQUFBc0MsRUFBQWpCLEdBQXVCLE9BQUFILEdBQVUsMEJBQUE0RixHQUFBLGlCQUFBN0YsRUFBa0QsTUFBTSxnQ0FBQTZCLEtBQUE0ckIsT0FBQTdyQixlQUFBQyxJQUFBZ0UsR0FBQWhFLEVBQUE0ckIsR0FBQTVyQixHQUFBN0IsRUFBNkUsTUFBTSxjQUFBNkYsR0FBQSxtQkFBQTdGLEVBQXNDLE1BQU0sdUJBQUE2RixHQUFBLG1CQUFBN0YsR0FBZ0Q2RixHQUFBLGlCQUFBN0YsRUFBc0IsTUFBTSxZQUFBNkYsR0FBQSxtQkFBQTdGLEdBQW9DNkYsR0FBQSxxQkFBQTdGLEVBQTBCLE1BQU0sZUFBQTZGLEdBQUEscUJBQUE3RixFQUF5QyxNQUFNLGFBQUF3cUIsR0FBQXhxQixFQUFBakIsR0FBcUI4RyxHQUFBLHVCQUFBN0YsR0FBNEIyc0IsR0FBQXZzQixFQUFBLFdBQWlCLE1BQU0sY0FBQWlyQixHQUFBcnJCLEVBQUFqQixHQUMvZDhHLEdBQUEsdUJBQUE3RixHQUE0QjJzQixHQUFBdnNCLEVBQUEsV0FBaUIsTUFBTSxnQkFBQXNyQixHQUFBMXJCLEVBQUFqQixHQUFBOEcsR0FBQSx1QkFBQTdGLEdBQUEyc0IsR0FBQXZzQixFQUFBLFlBQXFFbXNCLEdBQUF0c0IsRUFBQWxCLEVBQUEydUIsSUFBV3JzQixFQUFBLElBQU8sUUFBQUMsS0FBQXZDLEtBQUE2QyxlQUFBTixLQUFBTyxFQUFBOUMsRUFBQXVDLEdBQUEsYUFBQUEsRUFBQSxnQkFBQU8sR0FBQTdCLEVBQUFpWCxjQUFBcFYsSUFBQVIsR0FBQSxXQUFBUSxJQUFBLGdCQUFBQSxJQUFBN0IsRUFBQWlYLGNBQUEsR0FBQXBWLElBQUFSLEdBQUEsY0FBQVEsSUFBQXlKLEdBQUExSixlQUFBTixJQUFBLE1BQUFPLEdBQUE4cUIsR0FBQXZzQixFQUFBa0IsR0FBOE4sUUFBQXJCLEdBQVUsWUFBQWdULEdBQUFqVCxHQUFtQjZxQixHQUFBN3FCLEVBQUFqQixFQUFRLE1BQU0sZ0JBQUFrVSxHQUFBalQsR0FBc0I0ckIsR0FBQTVyQixFQUFBakIsRUFBUSxNQUFNLGdDQUFrQywyQkFBQUEsR0FBQTh1QixVQUN6ZDd0QixFQUFBOHRCLFFBQUE1c0IsSUFBYyxNQUFBRyxHQUFTLFFBQUE2c0IsSUFBQWx1QixFQUFBQyxHQUFpQixNQUFBRCxHQUFBaXNCLFlBQUFoc0IsRUFFZ1UsUUFBQWt1QixJQUFBbnVCLEdBQWUsU0FBQUEsR0FBQSxJQUFBQSxFQUFBK1IsVUFBQSxJQUFBL1IsRUFBQStSLFVBQUEsS0FBQS9SLEVBQUErUixXQUFBLElBQUEvUixFQUFBK1IsVUFBQSxpQ0FBQS9SLEVBQUFpc0IsWUFDdlgsUUFBQW1DLElBQUFwdUIsR0FBc0UsTUFBdkRBLEtBQUEsSUFBQUEsRUFBQStSLFNBQUEvUixFQUFBd08sZ0JBQUF4TyxFQUFBK1csV0FBQSxRQUF1RC9XLEdBQUEsSUFBQUEsRUFBQStSLFdBQUEvUixFQUFBcXVCLGFBQUEsbUJBVXRFLFFBQUFDLElBQUF0dUIsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFBakIsR0FBdUIrdEIsR0FBQXB2QixHQUFBLE9BQUFvQyxFQUFBLE1BQXNCLElBQUFVLEdBQUE5QyxFQUFBd3ZCLG1CQUE0QixJQUFBMXNCLEVBQUEyc0IsR0FBQWxHLGdCQUFBcm9CLEVBQUE0QixFQUFBN0IsRUFBQUksT0FBZ0MsQ0FBZ0IsR0FBWGlCLEtBQUErc0IsR0FBQXJ2QixJQUFXc0MsRUFBQSxJQUFBUSxFQUFBLE9BQW1CQSxFQUFBOUMsRUFBQWl0QixXQUFjanRCLEVBQUE2aUIsWUFBQS9mLEVBQWtCLElBQUFQLEdBQUFrdEIsR0FBQW5HLGdCQUFBdHBCLEVBQUFzQyxFQUE2QlEsR0FBQTlDLEVBQUF3dkIsb0JBQUFqdEIsRUFBMEJrdEIsR0FBQXZHLGlCQUFBLFdBQThCdUcsR0FBQWxHLGdCQUFBcm9CLEVBQUFxQixFQUFBdEIsRUFBQUksS0FBNkIsTUFBQW91QixJQUFBakcsc0JBQUExbUIsR0FBa0MsUUFBQTRzQixJQUFBenVCLEVBQUFDLEdBQWlCLEdBQUFsQixHQUFBLEVBQUFtQixVQUFBQyxRQUFBLFNBQUFELFVBQUEsR0FBQUEsVUFBQSxPQUF3RixPQUF0Qml1QixJQUFBbHVCLEdBQUEsT0FBQWtCLEVBQUEsT0FBc0IwbkIsR0FBQTdvQixFQUFBQyxFQUFBLEtBQUFsQixHQUN6YSxRQUFBMnZCLElBQUExdUIsRUFBQUMsR0FBaUJTLEtBQUE2dEIsb0JBQUFDLEdBQUFuRyxnQkFBQXJvQixFQUFBQyxHQXJOSixHQUFBOHFCLElBQUF6c0IsRUFBQSxHQUFBMkQsR0FBQTNELEVBQUEsR0FBQTJDLEdBQUEzQyxFQUFBLEdBQUE0QyxHQUFBNUMsRUFBQSxHQUFBeVgsR0FBQXpYLEVBQUEsSUFBQW9aLEdBQUFwWixFQUFBLElBQUErWixHQUFBL1osRUFBQSxJQUFBcXdCLEdBQUFyd0IsRUFBQSxJQUFBc3dCLEdBQUF0d0IsRUFBQSxJQUFBZ0gsR0FBQWhILEVBQUEsRUFDa1l5c0IsSUFBQSxPQUFBNXBCLEVBQUEsTUFDL1ksSUFBQXVJLEtBQVE1SCxVQUFBLEVBQUEycEIseUJBQUEsRUFBQXJCLGNBQUEsRUFBQUQsZ0JBQUEsRUFBQWlELFdBQUEsRUFBQXlCLGdDQUFBLEVBQUFDLDBCQUFBLEVBQUEzQyxPQUFBLEdBQ1I0QyxJQUFRQyxrQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxrQkFBQSxFQUFBQywyQkFBQSxHQUFBQyw2QkFBQSxHQUFBQyx5QkFBQSxHQUFBQyx3QkFBQSxTQUFBdHZCLEdBQTBMLEdBQUFDLEdBQUE4dUIsR0FBQWh3QixFQUFBaUIsRUFBQXV2QixlQUEyQmx1QixFQUFBckIsRUFBQXd2QiwyQkFBK0JwdkIsRUFBQUosRUFBQXl2QixxQkFBMkJ6dkIsS0FBQTB2QixzQkFBMkIsUUFBQTd0QixLQUFBOUMsR0FBQSxDQUFnQmtMLEdBQUFySSxlQUFBQyxHQUFBVixFQUFBLEtBQUFVLEdBQUEsTUFBc0MsSUFBQVAsR0FBQU8sRUFBQWtJLGNBQUFoSSxFQUFBaEQsRUFBQThDLEVBQTZCUCxJQUFHb29CLGNBQUFwb0IsRUFBQXFvQixtQkFBQSxLQUFBNVYsYUFBQWxTLEVBQUF1bkIsZUFBQSxLQUFBSyxnQkFBQWpnQixFQUFBekgsRUFBQTlCLEVBQUErdUIsbUJBQ3hZcGxCLGdCQUFBSixFQUFBekgsRUFBQTlCLEVBQUFndkIsbUJBQUE1RixnQkFBQTdmLEVBQUF6SCxFQUFBOUIsRUFBQWl2QixtQkFBQTNGLHdCQUFBL2YsRUFBQXpILEVBQUE5QixFQUFBa3ZCLDRCQUFBcmxCLDBCQUFBTixFQUFBekgsRUFBQTlCLEVBQUFtdkIsOEJBQUF2bEIsc0JBQUFMLEVBQUF6SCxFQUFBOUIsRUFBQW92QiwyQkFBc1EsR0FBQS90QixFQUFBc0ksZ0JBQUF0SSxFQUFBK25CLGdCQUFBL25CLEVBQUF3SSwwQkFBQSxPQUFBM0ksRUFBQSxLQUFBVSxHQUFvRnpCLEVBQUF3QixlQUFBQyxLQUFBUCxFQUFBb29CLGNBQUF0cEIsRUFBQXlCLElBQTRDUixFQUFBTyxlQUFBQyxLQUFBUCxFQUFBcW9CLG1CQUFBdG9CLEVBQUFRLElBQWlEN0IsRUFBQTRCLGVBQUFDLEtBQUFQLEVBQUE4bkIsZUFBQXBwQixFQUFBNkIsSUFBNkNvSSxHQUFBcEksR0FBQVAsS0FBVTJJLE1BRTllMGxCLEdBQUFaLEdBQUFhLEdBQUFELEdBQUFYLGtCQUFBdnNCLEdBQUFrdEIsR0FBQVYsa0JBQUFZLEdBQUFGLEdBQUFULGtCQUFBWSxHQUFBSCxHQUFBUiwyQkFBQVksR0FBQUosR0FBQVAsNkJBQUFZLEdBQUFMLEdBQUFOLHlCQUFBWSxJQUF3TFYsWUFBWVcsZ0JBQUF6dEIsR0FBQTB0QixNQUFBMXRCLEdBQUEydEIsVUFBQTN0QixHQUFBNHRCLFNBQUE1dEIsR0FBQTBULFFBQUE0WixHQUFBNWMsUUFBQXljLEdBQUFudEIsR0FBQTZ0QixLQUFBUixHQUFBeFksZ0JBQUEwWSxHQUFBTyxTQUFBOXRCLEdBQUFyRCxRQUFBcUQsR0FBQSt0QixNQUFBL3RCLEdBQUFvSyxTQUFBcEssR0FBQWd1QixTQUFBVixHQUFBVyxVQUFBVixHQUFBVyxlQUFBbHVCLEdBQUFtdUIsT0FBQW51QixHQUFBb3VCLEtBQUFwdUIsR0FBQThvQixTQUFBcUUsR0FBQW50QixHQUFBcXVCLE1BQUFsQixHQUFBbnRCLEdBQUFzdUIsV0FBQXR1QixHQUFBdXVCLEtBQUF2dUIsR0FBQXd1QixZQUFBeHVCLEdBQUF5dUIsU0FBQXp1QixHQUFBMHVCLFNBQUExdUIsR0FBQTJ1QixTQUFBM3VCLEdBQUE0dUIsS0FBQXZCLEdBQUF3QixRQUFBekIsR0FDcE0wQixPQUFBOXVCLEdBQUErdUIsU0FBQS91QixHQUFBMG9CLFNBQUF5RSxHQUFBbnRCLEdBQUFndkIsS0FBQTNCLEdBQUFuWSxNQUFBa1ksR0FBQTZCLEtBQUE1QixHQUFBNkIsV0FBQTNCLEdBQUE3RCxNQUFBLEVBQUF5RixTQUFBLEVBQUFDLFVBQUFwdkIsR0FBQXF2QixjQUFBLEVBQUFDLFVBQUEsRUFBQUMsUUFBQSxFQUFBQyxVQUFBLEVBQUFqdUIsTUFBQWdzQixJQUFtS1AsbUJBQW9CcUMsY0FBQSxpQkFBQUMsVUFBQSxRQUFBQyxRQUFBLE1BQUFDLFVBQUEsY0FBc0Z2QyxvQkFBcUIxckIsTUFBQSxTQUFBaEUsRUFBQUMsR0FBb0IsYUFBQUEsRUFBQUQsRUFBQThwQixnQkFBQSxjQUE2QyxXQUFBOXBCLEVBQUFxQyxPQUFBLElBQUFyQyxFQUFBcXVCLGFBQUEsU0FBQXJ1QixFQUFBaVMsYUFBQSxXQUFBaFMsR0FBQUQsRUFBQWt5QixXQUFBbHlCLEVBQUFreUIsU0FBQUMsVUFBQW55QixFQUFBNHNCLGNBQUF3RixnQkFBQXB5QixHQUNuV0EsRUFBQWlTLGFBQUEsV0FBQWhTLE9BQStCb3lCLEdBQUExQyxHQUFBTix5QkFBQXRzQixJQUFtQ3V2QixNQUFBLCtCQUFBQyxJQUFBLHdDQUFnRkMsSUFBS2pELFlBQVlrRCxZQUFBSixHQUFBSywwQkFBQUwsR0FBQU0sY0FBQU4sSUFBNkQ1QyxtQkFBb0JnRCxZQUFBLGNBQUFDLDBCQUFBLDRCQUFBQyxjQUFBLGlCQUE4R25ELHdCQUF5Qm9ELGFBQUE3dkIsR0FBQXV2QixNQUFBTyxhQUFBOXZCLEdBQUF1dkIsTUFBQVEsVUFBQS92QixHQUFBdXZCLE1BQUFTLFVBQUFod0IsR0FBQXV2QixNQUFBVSxVQUFBandCLEdBQUF1dkIsTUFBQVcsV0FBQWx3QixHQUFBdXZCLE1BQUFZLFVBQUFud0IsR0FBQXV2QixNQUMzWGEsUUFBQXB3QixHQUFBd3ZCLElBQUFhLFFBQUFyd0IsR0FBQXd2QixJQUFBYyxTQUFBdHdCLEdBQUF3dkIsTUFBNENlLEdBQUEsZ0JBQzVDLDJxQ0FBQXRyQixNQUFBLEtBQUFoQyxRQUFBLFNBQUFoRztBQUF5c0MsR0FBQUMsR0FBQUQsRUFBQTZDLFFBQUF5d0IsR0FDenNDcHBCLEVBQUlzb0IsSUFBQWpELFdBQUF0dkIsR0FBQSxFQUFtQnV5QixHQUFBL0Msa0JBQUF4dkIsR0FBQUQsSUFBNEIydkIsR0FBQUwsd0JBQUFXLElBQStCTixHQUFBTCx3QkFBQWtELEdBQ2xGLElBQUFqdkIsS0FBTytHLGFBQUEsS0FBQUQsaUJBQUEsRUFBQUssY0FBQSxLQUFBRCxrQkFBQSxFQUFBOG9CLFdBQXVGQyxpQkFBQSxTQUFBeHpCLEdBQTZCLGtCQUFBQSxHQUFBeXpCLHNCQUFBdHlCLEVBQUEsY0FBNERpSixFQUFBcEssRUFBQXl6Qix3QkFBNEJBLHNCQUFBLFNBQUF6ekIsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFBakIsRUFBQXlCLEVBQUFQLEVBQUFTLEVBQUFSLEdBQW1ENkksRUFBQUcsTUFBQWhILEdBQUFyRCxZQUFzQjRMLHdDQUFBLFNBQUE5TCxFQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUFqQixFQUFBeUIsRUFBQVAsRUFBQVMsRUFBQVIsR0FBbUgsR0FBOUNnQyxHQUFBa3dCLHNCQUFBbHBCLE1BQUE3SixLQUFBUixXQUE4Q3FELEdBQUFtd0IsaUJBQUEsQ0FBdUIsR0FBQWh2QixHQUFBbkIsR0FBQW93QixrQkFBMkJwd0IsSUFBQWtILG1CQUFBbEgsR0FBQWtILGtCQUFBLEVBQUFsSCxHQUFBbUgsY0FDamNoRyxLQUFJd0ksbUJBQUEsV0FBK0IsTUFBQTFDLEdBQUFELE1BQUFoSCxHQUFBckQsWUFBNkJ3ekIsZUFBQSxXQUEyQixNQUFBbndCLElBQUE4RyxpQkFBeUJzcEIsaUJBQUEsV0FBNkIsR0FBQXB3QixHQUFBOEcsZ0JBQUEsQ0FBc0IsR0FBQXJLLEdBQUF1RCxHQUFBK0csWUFBOEQsT0FBekMvRyxJQUFBK0csYUFBQSxLQUFvQi9HLEdBQUE4RyxpQkFBQSxFQUFxQnJLLEVBQVNtQixFQUFBLFNBQzlIeUosR0FBQSxLQUFBQyxNQUUxQkUsTUFBQUcsTUFBZUksTUFBTUMsTUFDM0dxb0IsR0FBQTN2QixPQUFBZ0QsUUFBc0I0c0IsUUFBQTlvQixHQUFBK29CLHlCQUFBNW9CLEdBQUE2b0Isd0JBQUF6b0IsR0FBQTBvQiw2QkFBQXpvQixHQUFBMG9CLDBCQUFBLEtBQUFDLHVCQUFBem9CLEVBQUEwb0IseUJBQUF6b0IsSUFBdUxrQixHQUFBLEtBQUFrRSxHQUFBLEtBQUFqRixHQUFBLEtBQ29EbUIsR0FBQSxLQUNzRm9uQixJQUFRRix1QkFBQXpvQixFQUFBMG9CLHlCQUFBem9CLEdBRTlGMm9CLEdBQUFwd0IsT0FBQWdELFFBQXNCc3NCLFVBQUFhLEdBQUFFLFlBQUE1bkIsRUFBQTFCLGNBQUE4QixFQUFBeW5CLGNBQUF4bkIsRUFBQXluQixrQkFBQXZuQixJQUFtRnduQixHQUFBQyxLQUFBQyxTQUFBdndCLFNBQUEsSUFBQTRGLE1BQUEsR0FBQXJHLEdBQUEsMkJBQUE4d0IsR0FBQWpuQixHQUFBLHdCQUFBaW5CLEdBRTFXRyxHQUFBM3dCLE9BQUFnRCxRQUFzQjR0QixrQkFBQSxTQUFBNzBCLEVBQUFDLEdBQWdDQSxFQUFBMEQsSUFBQTNELEdBQU84MEIsMkJBQUEzbkIsRUFBQTRuQixvQkFBQSxTQUFBLzBCLEdBQXNFLE1BQVBBLEtBQUEyRCxLQUFPM0QsR0FBQSxJQUFBQSxFQUFBcU4sS0FBQSxJQUFBck4sRUFBQXFOLElBQUEsS0FBQXJOLEdBQXNDZzFCLG9CQUFBMW5CLEVBQUEybkIsNkJBQUExbkIsRUFBQTJuQixpQkFBQSxTQUFBbDFCLEVBQUFDLEdBQXVGRCxFQUFBd04sSUFBQXZOLEtBSWhRazFCLEdBQUFseEIsT0FBQWdELFFBQXNCbXVCLDZCQUFBbG5CLEVBQUFtbkIsdUNBQUEsU0FBQXIxQixHQUFtRmlNLEVBQUFqTSxFQUFBK04sSUFBU3VuQiwrQkFBQW5uQixFQUFBb25CLDJCQUFBLFNBQUF2MUIsR0FBMEVpTSxFQUFBak0sRUFBQWlPLE1BQVVLLEdBQUEsS0FBNEhoSyxJQUFPdUssTUFBQSxLQUFBRixXQUFBLEtBQUFELGNBQUEsTUFFelU4bUIsR0FBQSx1SEFBQXh0QixNQUFBLEtBQUF5dEIsSUFBNklwekIsS0FBQSxLQUFBaUcsT0FBQSxLQUFBc0QsY0FBQTFLLEdBQUErRSxnQkFBQXl2QixXQUFBLEtBQUFDLFFBQUEsS0FBQUMsV0FBQSxLQUFBQyxVQUFBLFNBQUE3MUIsR0FBeUgsTUFBQUEsR0FBQTYxQixXQUFBQyxLQUFBdE8sT0FBK0J2WSxpQkFBQSxLQUFBOG1CLFVBQUEsS0FFclM5MEIsSUFBQXNELEVBQUFXLFdBQWU4d0IsZUFBQSxXQUEwQnQxQixLQUFBdU8sa0JBQUEsQ0FBeUIsSUFBQWpQLEdBQUFVLEtBQUFvTyxXQUF1QjlPLE9BQUFnMkIsZUFBQWgyQixFQUFBZzJCLGlCQUFBLGlCQUFBaDJCLEdBQUFrUCxjQUFBbFAsRUFBQWtQLGFBQUEsR0FBQXhPLEtBQUFzTyxtQkFBQTlOLEdBQUFnSSxrQkFBd0krc0IsZ0JBQUEsV0FBNEIsR0FBQWoyQixHQUFBVSxLQUFBb08sV0FBdUI5TyxPQUFBaTJCLGdCQUFBajJCLEVBQUFpMkIsa0JBQUEsaUJBQUFqMkIsR0FBQWsyQixlQUFBbDJCLEVBQUFrMkIsY0FBQSxHQUFBeDFCLEtBQUEyTCxxQkFBQW5MLEdBQUFnSSxrQkFBOElpdEIsUUFBQSxXQUFvQnoxQixLQUFBNEwsYUFBQXBMLEdBQUFnSSxpQkFBb0NvRCxhQUFBcEwsR0FBQStILGlCQUMxZHFHLFdBQUEsV0FBc0IsR0FBQXJQLEdBQUFELEVBQUFVLEtBQUE2RSxZQUFBd0osU0FBbUMsS0FBQTlPLElBQUFELEdBQUFVLEtBQUFULEdBQUEsSUFBd0IsS0FBQUQsRUFBQSxFQUFRQSxFQUFBdzFCLEdBQUFyMUIsT0FBWUgsSUFBQVUsS0FBQTgwQixHQUFBeDFCLElBQUEsUUFBd0J1RSxFQUFBd0ssVUFBQTBtQixHQUFlbHhCLEVBQUE2eEIsYUFBQSxTQUFBcDJCLEVBQUFDLEdBQTZCLFFBQUFsQixNQUFjQSxFQUFBbUcsVUFBQXhFLEtBQUF3RSxTQUEyQixJQUFBN0QsR0FBQSxHQUFBdEMsRUFBWWtDLElBQUFJLEVBQUFyQixFQUFBa0YsV0FBaUJsRixFQUFBa0YsVUFBQTdELEVBQWNyQixFQUFBa0YsVUFBQUssWUFBQXZGLEVBQTBCQSxFQUFBK08sVUFBQTlOLE1BQWdCUCxLQUFBcU8sVUFBQTlPLEdBQW1CRCxFQUFBbzJCLGFBQUExMUIsS0FBQTAxQixhQUFpQzdtQixFQUFBdlAsSUFBT3VQLEVBQUFoTCxHQUN0SUEsRUFBQTZ4QixhQUFBM21CLEdBQW1CTyxLQUFBLE9BQTZEekwsRUFBQTZ4QixhQUFBMW1CLEdBQW1CTSxLQUFBLE1BQVksSUFBQUosS0FBQSxZQUFBVyxHQUFBdE8sR0FBQXNNLFdBQUEsb0JBQUFzRCxRQUFBd2tCLEdBQUEsSUFBd0VwMEIsSUFBQXNNLFdBQUEsZ0JBQUExTyxZQUFBdzJCLEdBQUF4MkIsU0FBQXkyQixhQUFtRSxJQUFBQyxHQUN0ZCxJQUFBQSxHQUFBdDBCLEdBQUFzTSxXQUFBLGFBQUFzRCxVQUFBd2tCLEdBQUEsQ0FBOEMsR0FBQUcsSUFBQTNrQixPQUFBNGtCLEtBQW9CRixNQUFBLGdCQUFBQyxLQUFBLGtCQUFBQSxJQUFBNXZCLFNBQUEsSUFBQTh2QixTQUFBRixHQUFBNXZCLFVBQUEsS0FDbEUsR0FPK1BzTCxJQVAvUHlrQixHQUFBSixHQUFBM2xCLEdBQUEzTyxHQUFBc00sYUFBQWdDLElBQUE4bEIsSUFBQSxFQUFBQSxJQUFBLElBQUFBLElBQUFqbUIsR0FBQTNJLE9BQUFJLGFBQUEsSUFBQSt1QixJQUFpRkMsYUFBYTFyQix5QkFBeUIyckIsUUFBQSxnQkFBQUMsU0FBQSx3QkFBd0R2ckIsY0FBQSw4REFBNEV3ckIsZ0JBQWlCN3JCLHlCQUF5QjJyQixRQUFBLG1CQUFBQyxTQUFBLDJCQUE4RHZyQixhQUFBLHlFQUFBeEQsTUFBQSxNQUFrR2l2QixrQkFBbUI5ckIseUJBQXlCMnJCLFFBQUEscUJBQ2pmQyxTQUFBLDZCQUFxQ3ZyQixhQUFBLDJFQUFBeEQsTUFBQSxNQUFvR2t2QixtQkFBb0IvckIseUJBQXlCMnJCLFFBQUEsc0JBQUFDLFNBQUEsOEJBQW9FdnJCLGFBQUEsNEVBQUF4RCxNQUFBLE9BQXNHbUksSUFBQSxFQUM5RUcsSUFBQSxFQUVsUjZtQixJQUFRbHNCLFdBQUEyckIsR0FBQTVyQixjQUFBLFNBQUFoTCxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQThDLEdBQUFqQixFQUFNLElBQUFtUSxHQUFBdFEsRUFBQSxDQUFTLE9BQUFELEdBQVUsNkJBQUE2QixHQUFBKzBCLEdBQUFLLGdCQUFxRCxNQUFBaDNCLEVBQVEseUJBQUE0QixFQUFBKzBCLEdBQUFJLGNBQTZDLE1BQUEvMkIsRUFBUSw0QkFBQTRCLEVBQUErMEIsR0FBQU0saUJBQW1ELE1BQUFqM0IsR0FBUTRCLEVBQUEsV0FBU3lPLElBQUFYLEVBQUEzUCxFQUFBakIsS0FBQThDLEVBQUErMEIsR0FBQUksZ0JBQUEsZUFBQWgzQixHQUFBLE1BQUFqQixFQUFBOFEsVUFBQWhPLEVBQUErMEIsR0FBQUssaUJBQzlILE9BRGdPcDFCLElBQUErTyxLQUFBTixJQUFBek8sSUFBQSswQixHQUFBSyxpQkFBQXAxQixJQUFBKzBCLEdBQUFJLGdCQUFBMW1CLEtBQUFsUSxFQUFBcU8sTUFBQW5LLEdBQUF1SyxNQUFBeE4sRUFBQWlELEdBQUFxSyxXQUFBQyxJQUFBMEIsSUFBQSxJQUFBek8sRUFBQTROLEVBQUFELFVBQUEzTixFQUFBNUIsRUFBQWxCLEVBQUFzQyxHQUFBakIsRUFBQXlCLEVBQUFtTyxLQUN2VzVQLEtBQUEwUCxFQUFBL1EsR0FBQSxPQUFBcUIsSUFBQXlCLEVBQUFtTyxLQUFBNVAsSUFBQThOLEVBQUFyTSxHQUFBekIsRUFBQXlCLEdBQUF6QixFQUFBLE1BQW1ESixFQUFBMjJCLEdBQUExbUIsRUFBQWpRLEVBQUFqQixHQUFBc1IsRUFBQXJRLEVBQUFqQixLQUFBa0IsRUFBQXlQLEVBQUFGLFVBQUFvbkIsR0FBQUMsWUFBQTUyQixFQUFBbEIsRUFBQXNDLEdBQUFwQixFQUFBK1AsS0FBQWhRLEVBQUFrTyxFQUFBak8sTUFBQSxNQUFvRkcsRUFBQUgsS0FBYThRLEdBQUEsS0FBQUcsR0FBQSxLQUFBQyxHQUFBLEtBQTZMaW1CLElBQVFDLG1DQUFBLFNBQUFyM0IsR0FBK0MrUSxHQUFBL1EsSUFDOVNzM0IsR0FBQXJ6QixPQUFBZ0QsUUFBc0Jzc0IsVUFBQTZELEdBQUFHLG9CQUFBdG1CLEVBQUF1bUIscUJBQUFwbUIsSUFBMkZHLElBQUEsRUFBNkZHLElBQVErbEIsT0FBQSxFQUFBQyxNQUFBLEVBQUFDLFVBQUEsRUFBQUMsa0JBQUEsRUFBQUMsT0FBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQUMsVUFBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQUMsS0FBQSxFQUFBQyxNQUFBLEVBQUFDLE1BQUEsRUFBQUMsS0FBQSxFQUFBQyxNQUFBLEVBQzFDdDJCLElBQUFzTSxZQUFBMkQsR0FBQXJTLFNBQUFzUyxnQkFBQXRTLFNBQUFzUyxlQUFBQyxhQUFBLElBQUF2UyxTQUFBc1MsZUFBQUMsV0FBQSxPQUcxQixJQUFBaUIsS0FBUUMsUUFBUW5JLHlCQUF5QjJyQixRQUFBLFdBQUFDLFNBQUEsbUJBQThDdnJCLGFBQUEsc0ZBQUF4RCxNQUFBLE9BQzVPMkwsR0FBQSxLQUFBRyxHQUFBLEtBQTBJMGtCLElBQUEsQ0FBVXYyQixJQUFBc00sWUFBQWlxQixHQUFBeG1CLEdBQUEsWUFBQW5TLFNBQUF5MkIsY0FBQSxFQUFBejJCLFNBQUF5MkIsY0FFM08sSUFBQW1DLEtBQVF4dEIsV0FBQW9JLEdBQUFxbEIsdUJBQUFGLEdBQUF4dEIsY0FBQSxTQUFBaEwsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUF3RSxHQUFBakIsR0FBQUgsRUFBQXFOLEVBQUFyTixHQUFBNFIsT0FBQWhRLEVBQUF6QixFQUFBcVIsVUFBQXJSLEVBQUFxUixTQUFBMUgsYUFBNEQsZUFBQWxJLEdBQUEsVUFBQUEsR0FBQSxTQUFBekIsRUFBQWlDLEtBQUEsR0FBQWYsR0FBQW1TLE9BQXVELElBQUFqQyxHQUFBcFIsR0FBQSxHQUFBbzRCLEdBQUFsM0IsRUFBQThTLE9BQXlCLENBQUs5UyxFQUFBNFMsRUFBSyxJQUFBblMsR0FBQWlTLE9BQVNuUyxHQUFBekIsRUFBQXFSLFVBQUE1UCxHQUFBLFVBQUFBLEVBQUFrSSxlQUFBLGFBQUEzSixFQUFBaUMsTUFBQSxVQUFBakMsRUFBQWlDLE9BQUFmLEVBQUE2UyxHQUErRixPQUFBN1MsU0FBQXRCLEVBQUFDLElBQUFtVCxHQUFBOVIsRUFBQXZDLEVBQUFzQyxJQUFrQ1UsS0FBQS9CLEVBQUFJLEVBQUFILFFBQVksWUFBQUQsR0FBQSxNQUFBQyxJQUFBRCxFQUFBQyxFQUFBb3FCLGVBQUFqcUIsRUFBQWlxQixnQkFBQXJxQixFQUFBeXFCLFlBQUEsV0FBQXJxQixFQUFBaUMsT0FBQXJDLEVBQUEsR0FBQUksRUFBQTRELE1BQUE1RCxFQUFBdTRCLGFBQUEsV0FDNVgzNEIsR0FBQUksRUFBQTZSLGFBQUEsUUFBQWpTLE9BQWlGdUUsR0FBQTZ4QixhQUFBL2hCLElBQW1CdWtCLEtBQUEsS0FBQTdvQixPQUFBLE1BQXdCLElBQUF5RSxLQUFRcWtCLElBQUEsU0FBQUMsUUFBQSxVQUFBQyxLQUFBLFVBQUFDLE1BQUEsV0FDcEkza0IsSUFBQStoQixhQUFBMWhCLElBQW9CdWtCLFFBQUEsS0FBQUMsUUFBQSxLQUFBQyxRQUFBLEtBQUFDLFFBQUEsS0FBQUMsTUFBQSxLQUFBQyxNQUFBLEtBQUE5b0IsUUFBQSxLQUFBK29CLFNBQUEsS0FBQTlvQixPQUFBLEtBQUFDLFFBQUEsS0FBQTZELGlCQUFBRSxHQUFBK2tCLE9BQUEsS0FBQUMsUUFBQSxLQUFBQyxjQUFBLFNBQUExNUIsR0FBcU0sTUFBQUEsR0FBQTA1QixnQkFBQTE1QixFQUFBMjVCLGNBQUEzNUIsRUFBQTRSLFdBQUE1UixFQUFBNDVCLFVBQUE1NUIsRUFBQTI1QixlQUN6TixJQUFBRSxLQUFRQyxZQUFZenVCLGlCQUFBLGVBQUFHLGNBQUEsK0JBQTRFdXVCLFlBQWExdUIsaUJBQUEsZUFBQUcsY0FBQSxnQ0FBNkV3dUIsSUFBSy91QixXQUFBNHVCLEdBQUE3dUIsY0FBQSxTQUFBaEwsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUE4QyxvQkFBQXJCLElBQUFqQixFQUFBMjZCLGVBQUEzNkIsRUFBQTQ2QixjQUFBLGdCQUFBMzVCLEdBQUEsaUJBQUFBLEVBQUEsV0FBMkcsSUFBQUksR0FBQWlCLEVBQUF3USxTQUFBeFEsS0FBQWpCLEVBQUFpQixFQUFBdXJCLGVBQUF4c0IsRUFBQTY1QixhQUFBNzVCLEVBQUE4NUIsYUFBQXJvQixNQUEySixJQUE3RSxnQkFBQTdSLEtBQUFDLE9BQUFsQixFQUFBMjZCLGVBQUEzNkIsRUFBQTY2QixXQUFBenNCLEVBQUFsTixHQUFBLE1BQUFELEVBQUEsS0FBNkVBLElBQ25mQyxFQUFBLFdBQWMsSUFBQTRCLEdBQUEsTUFBQTdCLEVBQUFJLEVBQUFrTixFQUFBdE4sRUFBc0JJLEdBQUEsTUFBQUgsRUFBQUcsRUFBQWtOLEVBQUFyTixFQUFrQixJQUFBcUIsR0FBQW9ULEdBQUFsRixVQUFBcXFCLEdBQUFFLFdBQUEvNUIsRUFBQWpCLEVBQUFzQyxFQUEwTCxPQUFsSkMsR0FBQWUsS0FBQSxhQUFvQmYsRUFBQWdILE9BQUF6RyxFQUFXUCxFQUFBbzRCLGNBQUF0NUIsRUFBa0JyQixFQUFBMlYsR0FBQWxGLFVBQUFxcUIsR0FBQUMsV0FBQTc1QixFQUFBbEIsRUFBQXNDLEdBQW9DdEMsRUFBQXNELEtBQUEsYUFBb0J0RCxFQUFBdUosT0FBQWxJLEVBQVdyQixFQUFBMjZCLGNBQUE3M0IsRUFBa0JzTSxFQUFBN00sRUFBQXZDLEVBQUFpQixFQUFBQyxJQUFZcUIsRUFBQXZDLEtBQWFKLEdBQUFvc0IsR0FBQWxrQixtREFBQUMsa0JBSTBDc1AsTUFDV04sSUFBQSxFQUFBSCxHQUFBLE9BRWxUd2tCLEdBQUFsMkIsT0FBQWdELFFBQXNCbXpCLGVBQWUsTUFBQXRrQixLQUFVdWtCLHNCQUF1QixNQUFBMWtCLEtBQVUya0Isa0JBQUEsU0FBQXQ2QixHQUErQjJWLEdBQUEzVixHQUFLdTZCLFdBQUExa0IsR0FBQTJrQixVQUFBLFdBQW9DLE1BQUExa0IsS0FBVTJrQixpQkFBQTUwQixHQUFBNjBCLGtCQUFBeGtCLEdBQUF5a0IsY0FBQTFrQixLQUNsS08sSUFBUW9rQixhQUFBdmtCLEdBQUEsNEJBQUF3a0IsbUJBQUF4a0IsR0FBQSxrQ0FBQXlrQixlQUFBemtCLEdBQUEsOEJBQUEwa0IsY0FBQTFrQixHQUFBLCtCQUFtTUUsTUFBTUUsS0FBT3hVLElBQUFzTSxZQUFBa0ksR0FBQTVXLFNBQUFELGNBQUEsT0FBQXVzQixNQUFBLGtCQUFBdGEsZ0JBQUEyRSxJQUFBb2tCLGFBQUFJLGdCQUFBeGtCLElBQUFxa0IsbUJBQUFHLGdCQUFBeGtCLElBQUFza0IsZUFBQUUsV0FBQSxtQkFBQW5wQixlQUFBMkUsSUFBQXVrQixjQUFBRSxXQUV4TixJQUFBaE8sS0FBUWlPLFNBQUEsUUFBQUMsZ0JBQUE3a0IsR0FBQSxnQ0FBQThrQixzQkFBQTlrQixHQUFBLDRDQUFBK2tCLGtCQUFBL2tCLEdBQUEsb0NBQUF1VyxRQUFBLE9BQUFFLFVBQUEsU0FBQXVPLFdBQUEsVUFBQUMsa0JBQUEsaUJBQUFDLFVBQUEsU0FBQUMsU0FBQSxRQUFBek8sU0FBQSxRQUFBME8sa0JBQUEsaUJBQUFDLG9CQUFBLG1CQUFBQyxxQkFBQSxvQkFBQUMsZUFBQSxjQUFBQyxRQUFBLE9BQ1JDLE9BQUEsTUFBQUMsZUFBQSxXQUFBQyxRQUFBLE9BQUFDLFdBQUEsVUFBQUMsYUFBQSxZQUFBQyxZQUFBLFdBQUFDLGFBQUEsWUFBQUMsWUFBQSxXQUFBQyxhQUFBLFlBQUFDLFFBQUEsT0FBQUMsa0JBQUEsaUJBQUFDLFdBQUEsVUFBQUMsYUFBQSxZQUFBQyxTQUFBLFFBQUFDLFNBQUEsUUFBQS9QLFNBQUEsUUFBQWdRLFNBQUEsUUFBQUMsV0FBQSxVQUFBQyxZQUFBLFdBQUFDLFNBQUEsUUFBQUMsY0FBQSxhQUFBQyxRQUFBLE9BQUFDLGtCQUFBLGlCQUFBQyxhQUFBLFlBQ0FDLGFBQUEsWUFBQUMsYUFBQSxZQUFBQyxZQUFBLFdBQUFDLGFBQUEsWUFBQUMsV0FBQSxVQUFBQyxTQUFBLFFBQUFDLFNBQUEsUUFBQUMsUUFBQSxPQUFBQyxXQUFBLFVBQUFDLFlBQUEsV0FBQUMsY0FBQSxhQUFBQyxVQUFBLFNBQUFDLFVBQUEsU0FBQUMsV0FBQSxVQUFBQyxtQkFBQSxrQkFBQUMsV0FBQSxVQUFBQyxXQUFBLFVBQUFDLGFBQUEsWUFBQUMsY0FBQSxhQUFBQyxVQUFBLFNBQUFDLGVBQUEsY0FBQUMsWUFBQSxXQUFBQyxhQUFBLFlBQ0FDLGNBQUEsYUFBQUMsaUJBQUF4b0IsR0FBQSxrQ0FBQXlvQixnQkFBQSxlQUFBQyxXQUFBLFVBQUFDLFNBQUEsU0FBc0pwb0IsTUFBTUQsR0FBQSxFQUFBRCxHQUFBLHdCQUFBK2QsS0FBQUMsVUFBQTNxQixNQUFBLEdBRTVKazFCLEdBQUFqOUIsR0FBQXNNLFdBQUEsZ0JBQUExTyxXQUFBLElBQUFBLFNBQUF5MkIsYUFBQWhlLElBQTZFQyxRQUFRcE4seUJBQXlCMnJCLFFBQUEsV0FBQUMsU0FBQSxtQkFBOEN2ckIsYUFBQSxpR0FBQXhELE1BQUEsT0FBMkh5UCxHQUFBLEtBQUFlLEdBQUEsS0FBQUosR0FBQSxLQUFBWixJQUFBLEVBRXZSMm5CLElBQVFsMEIsV0FBQXFOLEdBQUF0TixjQUFBLFNBQUFoTCxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQThDLEdBQUFRLEdBQUF6QixFQUFBaUIsRUFBQXdRLFNBQUF4USxJQUFBeEIsU0FBQSxJQUFBd0IsRUFBQTBRLFNBQUExUSxJQUFBdXJCLGFBQWlFLE1BQUEvcUIsR0FBQXpCLEdBQUEsQ0FBWUosRUFBQSxDQUFHSSxFQUFBc1csR0FBQXRXLEdBQVF5QixFQUFBMEosR0FBQTZ6QixRQUFjLFFBQUE5OUIsR0FBQSxFQUFZQSxFQUFBTyxFQUFBMUIsT0FBV21CLElBQUEsQ0FBSyxHQUFBUyxHQUFBRixFQUFBUCxFQUFXLEtBQUFsQixFQUFBd0IsZUFBQUcsS0FBQTNCLEVBQUEyQixHQUFBLENBQWdDM0IsR0FBQSxDQUFLLE1BQUFKLElBQVNJLEdBQUEsRUFBS3lCLEdBQUF6QixFQUFLLEdBQUF5QixFQUFBLFdBQWtDLFFBQWpCekIsRUFBQUgsRUFBQXFOLEVBQUFyTixHQUFBNFIsT0FBaUI3UixHQUFVLGdCQUFBd1IsR0FBQXBSLElBQUEsU0FBQUEsRUFBQWtYLG1CQUFBRyxHQUFBclgsRUFBQW9ZLEdBQUF2WSxFQUFBbVksR0FBQSxLQUF1RSxNQUFNLGVBQUFBLEdBQUFJLEdBQUFmLEdBQUEsSUFBNkIsTUFBTSxvQkFBQUQsSUFBQSxDQUEwQixNQUFNLDZDQUFBQSxLQUFBLEVBQUFELEdBQUF4WSxFQUFBc0MsRUFBNkQsNkJBQUE2OUIsR0FBQSxLQUNwZix1Q0FBQTNuQixJQUFBeFksRUFBQXNDLEdBQWlELGFBQStEa0QsR0FBQTZ4QixhQUFBM2QsSUFBbUI0bUIsY0FBQSxLQUFBQyxZQUFBLEtBQUFDLGNBQUEsT0FBMEdoN0IsRUFBQTZ4QixhQUFBMWQsSUFBbUI4bUIsY0FBQSxTQUFBeC9CLEdBQTBCLHVCQUFBQSxLQUFBdy9CLGNBQUEzdEIsT0FBQTJ0QixpQkFBbUhuckIsR0FBQStoQixhQUFBemQsSUFBb0IrZ0IsY0FBQSxNQUVqYSxJQUFBK0YsS0FBUUMsSUFBQSxTQUFBQyxTQUFBLElBQUFDLEtBQUEsWUFBQUMsR0FBQSxVQUFBQyxNQUFBLGFBQUFDLEtBQUEsWUFBQUMsSUFBQSxTQUFBQyxJQUFBLEtBQUFDLEtBQUEsY0FBQUMsS0FBQSxjQUFBQyxPQUFBLGFBQUFDLGdCQUFBLGdCQUEyTUMsSUFBS0MsRUFBQSxZQUFBQyxFQUFBLE1BQUFDLEdBQUEsUUFBQUMsR0FBQSxRQUFBQyxHQUFBLFFBQUFDLEdBQUEsVUFBQUMsR0FBQSxNQUFBQyxHQUFBLFFBQUFDLEdBQUEsV0FBQUMsR0FBQSxTQUFBQyxHQUFBLElBQUFDLEdBQUEsU0FBQUMsR0FBQSxXQUFBQyxHQUFBLE1BQUFDLEdBQUEsT0FBQUMsR0FBQSxZQUFBQyxHQUFBLFVBQUFDLEdBQUEsYUFBQUMsR0FBQSxZQUFBQyxHQUFBLFNBQUFDLEdBQUEsU0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUN4TkMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsTUFBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsVUFBQUMsSUFBQSxhQUFBQyxJQUFBLE9BQ0FydUIsSUFBQStoQixhQUFBdGQsSUFBb0JyWCxJQUFBLFNBQUF6QixHQUFnQixHQUFBQSxFQUFBeUIsSUFBQSxDQUFVLEdBQUF4QixHQUFBdy9CLEdBQUF6L0IsRUFBQXlCLE1BQUF6QixFQUFBeUIsR0FBdUIscUJBQUF4QixFQUFBLE1BQUFBLEdBQStCLG1CQUFBRCxFQUFBcUMsTUFBQXJDLEVBQUE0WSxHQUFBNVksR0FBQSxLQUFBQSxFQUFBLFFBQUF5SCxPQUFBSSxhQUFBN0gsSUFBQSxZQUFBQSxFQUFBcUMsTUFBQSxVQUFBckMsRUFBQXFDLEtBQUFpK0IsR0FBQXRnQyxFQUFBNlAsVUFBQSxtQkFBZ0o4eUIsU0FBQSxLQUFBbnlCLFFBQUEsS0FBQStvQixTQUFBLEtBQUE5b0IsT0FBQSxLQUFBQyxRQUFBLEtBQUFreUIsT0FBQSxLQUFBQyxPQUFBLEtBQUF0dUIsaUJBQUFFLEdBQUFvRSxTQUFBLFNBQUE3WSxHQUFvSSxtQkFBQUEsRUFBQXFDLEtBQUF1VyxHQUFBNVksR0FBQSxHQUFrQzZQLFFBQUEsU0FBQTdQLEdBQXFCLGtCQUFBQSxFQUFBcUMsTUFBQSxVQUFBckMsRUFBQXFDLEtBQUFyQyxFQUFBNlAsUUFBQSxHQUF1REssTUFBQSxTQUFBbFEsR0FBbUIsbUJBQ3pmQSxFQUFBcUMsS0FBQXVXLEdBQUE1WSxHQUFBLFlBQUFBLEVBQUFxQyxNQUFBLFVBQUFyQyxFQUFBcUMsS0FBQXJDLEVBQUE2UCxRQUFBLEtBQWtINkUsR0FBQTBoQixhQUFBcmQsSUFBb0IrcEIsYUFBQSxPQUFxRXp1QixHQUFBK2hCLGFBQUFwZCxJQUFvQitwQixRQUFBLEtBQUFDLGNBQUEsS0FBQUMsZUFBQSxLQUFBeHlCLE9BQUEsS0FBQUMsUUFBQSxLQUFBRixRQUFBLEtBQUErb0IsU0FBQSxLQUFBaGxCLGlCQUFBRSxLQUErS2xRLEVBQUE2eEIsYUFBQW5kLElBQW1CbEYsYUFBQSxLQUFBdXJCLFlBQUEsS0FBQUMsY0FBQSxPQUNoWDdxQixHQUFBMGhCLGFBQUFsZCxJQUFvQmdxQixPQUFBLFNBQUFsakMsR0FBbUIsZ0JBQUFBLEtBQUFrakMsT0FBQSxlQUFBbGpDLE1BQUFtakMsWUFBQSxHQUErREMsT0FBQSxTQUFBcGpDLEdBQW9CLGdCQUFBQSxLQUFBb2pDLE9BQUEsZUFBQXBqQyxNQUFBcWpDLFlBQUEsY0FBQXJqQyxNQUFBc2pDLFdBQUEsR0FBOEZDLE9BQUEsS0FBQUMsVUFBQSxNQUE4QixJQUFBQyxPQUFTQyxLQUNoVCwrakJBQUExN0IsTUFBQSxLQUFBaEMsUUFBQSxTQUFBaEcsR0FBNmxCLEdBQUFDLEdBQUFELEVBQUEsR0FBQW1LLGNBQzdsQm5LLEVBQUFnSyxNQUFBLEdBQUFqTCxFQUFBLEtBQUFrQixDQUFvQkEsR0FBQSxNQUFBQSxFQUFVbEIsR0FBR29NLHlCQUF5QjJyQixRQUFBLzNCLEVBQUFnNEIsU0FBQWg0QixFQUFBLFdBQStCeU0sY0FBQXZMLElBQW1Cd2pDLEdBQUF6akMsR0FBQWpCLEVBQVEya0MsR0FBQXpqQyxHQUFBbEIsR0FDcEgsSUFBQTRrQyxLQUFRMTRCLFdBQUF3NEIsR0FBQXo0QixjQUFBLFNBQUFoTCxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQThDLEdBQUFqQixHQUFBc2pDLEdBQUExakMsRUFBWSxLQUFBSSxFQUFBLFdBQWtCLFFBQUFKLEdBQVUseUJBQUE0WSxHQUFBN1osR0FBQSxXQUE0QyxpQ0FBQWlCLEVBQUE4WSxFQUF1QyxNQUFNLDhCQUFBOVksRUFBQTJZLEVBQW9DLE1BQU0sdUJBQUE1WixFQUFBeTZCLE9BQUEsV0FBNEMsdUlBQUF4NUIsRUFBQTBVLEVBQWtKLE1BQU0sMklBQUExVSxFQUNyYStZLEVBQUcsTUFBTSwrRUFBQS9ZLEVBQUFnWixFQUF1RixNQUFNLDJFQUFBaFosRUFBQXlZLEVBQWtGLE1BQU0sd0JBQUF6WSxFQUFBaVosRUFBNkIsTUFBTSxpQkFBQWpaLEVBQUFxVSxFQUFzQixNQUFNLGdCQUFBclUsRUFBQWtaLEVBQXFCLE1BQU0sMkNBQUFsWixFQUFBMFksRUFBa0QsTUFBTSxTQUFBMVksRUFBQXVFLEVBQXlDLE1BQTdCdEUsR0FBQUQsRUFBQXdQLFVBQUFwUCxFQUFBSCxFQUFBbEIsRUFBQXNDLEdBQXVCNk0sRUFBQWpPLEdBQU1BLEdBQVcwVixJQUFBLFNBQUEzVixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQXFCckIsRUFBQThNLEVBQUE5TSxFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQWMwTCxFQUFBL00sR0FBTWlOLEdBQUEsSUFBUW1uQixHQUFBRix1QkFBQSx5SUFBQWxzQixNQUFBLE1BQ3JiNEUsR0FBQWdvQixHQUFBSyw2QkFBbUNua0IsR0FBQThqQixHQUFBRyxvQkFBMEJscEIsR0FBQStvQixHQUFBSSxvQkFBMEJaLEdBQUFELDBCQUE2QnlQLGtCQUFBRCxHQUFBRSxzQkFBQTdKLEdBQUE4SixrQkFBQXJMLEdBQUFzTCxrQkFBQTVFLEdBQUE2RSx1QkFBQTdNLElBQW9ILElBQUEvZCxPQUFBRCxJQUFBLENBQTBILElBQUE2TCxJQUFRLElBQUF4TCxLQUFRaFgsUUFBQThDLElBQVV5VSxJQUFJdlgsU0FBQSxHQUFXK1csR0FBQWpVLEdBTzZDMFcsR0FBQSxLQUFBRSxHQUFBLEtBWW5VK25CLEdBQUEsa0JBQUF0L0IsZ0JBQUEsSUFBQStaLEdBQUF1bEIsR0FBQXQvQixPQUFBLDJCQUFBaWEsR0FBQXFsQixHQUFBdC9CLE9BQUEsd0JBQUFrYSxHQUFBb2xCLEdBQUF0L0IsT0FBQSwwQkFBQW1hLEdBQUFtbEIsR0FBQXQvQixPQUFBLDBCQUFBZ2EsR0FBQXNsQixHQUFBdC9CLE9BQUEsNEJBQUF5WixHQUFBLGtCQUFBelosZ0JBQUFFLFNBQ1VrYSxHQUFBL2MsTUFBQTRCLFFBZTNGc2IsR0FBQVYsSUFBQSxHQUFBUyxHQUFBVCxJQUFBLEdBcUIyTjhELE1BMEI5STRoQixHQUFBamdDLE9BQUFnRCxRQUFzQjdILFFBQUFncEIsS0FBVytiLEdBQUFELElBQUE5YixJQUFBOGIsR0FBQUUsR0FBQUQsR0FBQSxRQUFBQSxHQUFBLFFBQUFBLEdBQTZORSxHQUFBLGdCQUFBQyxjQUFBLGtCQUFBQSxhQUFBOWMsSUFBQStjLEdBQUEsTUFBb0ZBLElBQUFGLEdBQUEsV0FBaUIsTUFBQUMsYUFBQTljLE9BQXlCLFdBQVksTUFBQXNPLE1BQUF0TyxNQUN6ZixJQUFBZ2QsSUFBQSxPQUFBQyxHQUFBLE1BQ0EsSUFBQXhpQyxHQUFBc00sVUFBQSxxQkFBQW0yQixzQkFBQSxrQkFBQUMsb0JBQUEsQ0FBbUcsR0FBQUMsSUFBQUMsR0FBQSxLQUFBQyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsSUFBQSxFQUFBQyxHQUFBLEVBQUFDLEdBQUEsR0FBQUMsR0FBQSxFQUFrRFAsSUFBQVAsSUFBT2UsWUFBQSxFQUFBL2QsY0FBQSxXQUF1QyxHQUFBcm5CLEdBQUFpbEMsR0FBQVgsWUFBQTljLEtBQTJCLFVBQUF4bkIsSUFBQSxLQUFrQm9sQyxZQUFBLEVBQUEvZCxjQUFBLFdBQXVDLEdBQUFybkIsR0FBQWlsQyxHQUFBblAsS0FBQXRPLEtBQW9CLFVBQUF4bkIsSUFBQSxHQUFpQixJQUFBcWxDLElBQUEsdUJBQUEzUSxLQUFBQyxTQUFBdndCLFNBQUEsSUFBQTRGLE1BQUEsRUFBa0U2SCxRQUFBeXpCLGlCQUFBLG1CQUFBdGxDLEdBQThDLEdBQUFBLEVBQUF1SSxTQUFBc0osUUFBQTdSLEVBQUFnUSxPQUFBcTFCLEdBQUEsQ0FBZ0QsR0FBYlAsSUFBQSxFQUFNOWtDLEVBQUF1a0MsS0FBTyxHQUFBVSxHQUFBamxDLEVBQUEsV0FBQStrQyxRQUM1ZC9rQyxHQUE4RCxZQUF0Q2dsQyxTQUFBLEVBQUFPLHNCQUFBQyxLQUF4QlosSUFBQVEsWUFBQSxNQUFxRVIsSUFBQVEsWUFBQSxDQUFzQkwsS0FBQSxFQUFNL2tDLEVBQUE2a0MsR0FBS0EsR0FBQSxLQUFRLE9BQUE3a0MsS0FBQTRrQyxPQUFpQixFQUFLLElBQUFZLElBQUEsU0FBQXhsQyxHQUFtQmdsQyxJQUFBLENBQU0sSUFBQS9rQyxHQUFBRCxFQUFBaWxDLEdBQUFFLEVBQWNsbEMsR0FBQWtsQyxJQUFBRCxHQUFBQyxJQUFBLEVBQUFsbEMsTUFBQSxHQUFBa2xDLEdBQUFsbEMsRUFBQWlsQyxNQUFBamxDLEdBQUFpbEMsR0FBQWpsQyxFQUEyQ2dsQyxHQUFBamxDLEVBQUFtbEMsR0FBUUwsU0FBQSxFQUFBanpCLE9BQUE0ekIsWUFBQUosR0FBQSxNQUF3Q2IsSUFBQSxTQUFBeGtDLEVBQUFDLEdBQXNILE1BQXJHNGtDLElBQUE3a0MsRUFBSyxNQUFBQyxHQUFBLGdCQUFBQSxHQUFBOG1CLFVBQUFnZSxHQUFBUixLQUFBdGtDLEVBQUE4bUIsU0FBMERpZSxTQUFBLEVBQUFPLHNCQUFBQyxLQUFzQyxHQUFVZixHQUFBLFdBQWNJLEdBQUEsS0FBUUMsSUFBQSxFQUFNQyxJQUFBLE9BQU9QLElBQUEzeUIsT0FBQTZ5QixvQkFBQUQsR0FBQTV5QixPQUFBOHlCLHVCQUFnRUgsSUFBQSxTQUFBeGtDLEdBQW9CLE1BQUEwbEMsWUFBQSxXQUE2QjFsQyxHQUFHcW5CLGNBQUEsV0FBeUIsTUFBQXNlLFdBQ3RqQmxCLEdBQUEsU0FBQXprQyxHQUFlNGxDLGFBQUE1bEMsR0FBaUIsSUFBQWlwQixJQUFBLDhWQUFBRCxNQUEwV0QsTUFTaEo4YyxJQUFRQyxLQUFBLCtCQUFBQyxPQUFBLHFDQUFBQyxJQUFBLDhCQUVsUUMsR0FBQSxPQUFBclksR0FBQSxTQUFBNXRCLEdBQTZCLHlCQUFBa21DLGNBQUFDLHdCQUFBLFNBQUFsbUMsRUFBQWxCLEVBQUFzQyxFQUFBakIsR0FBa0Y4bEMsTUFBQUMsd0JBQUEsV0FBeUMsTUFBQW5tQyxHQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUFqQixNQUFvQkosR0FBRyxTQUFBQSxFQUFBQyxHQUFlLEdBQUFELEVBQUFvbUMsZUFBQVAsR0FBQUcsS0FBQSxhQUFBaG1DLEtBQUFvdEIsVUFBQW50QixNQUEwRCxDQUFzRixJQUFqRmdtQyxPQUFBcG1DLFNBQUFELGNBQUEsT0FBcUNxbUMsR0FBQTdZLFVBQUEsUUFBQW50QixFQUFBLFNBQTRDQSxFQUFBZ21DLEdBQUFsdkIsV0FBb0IvVyxFQUFBK1csWUFBYS9XLEVBQUE0aEIsWUFBQTVoQixFQUFBK1csV0FBNkIsTUFBSzlXLEVBQUE4VyxZQUFhL1csRUFBQXdoQixZQUFBdmhCLEVBQUE4VyxlQUU5WnFWLElBQVFpYSx5QkFBQSxFQUFBQyxtQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxTQUFBLEVBQUFDLGNBQUEsRUFBQUMsaUJBQUEsRUFBQUMsYUFBQSxFQUFBQyxTQUFBLEVBQUFDLE1BQUEsRUFBQUMsVUFBQSxFQUFBQyxjQUFBLEVBQUFDLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxXQUFBLEVBQUFDLFNBQUEsRUFBQUMsWUFBQSxFQUFBQyxhQUFBLEVBQUFDLGNBQUEsRUFBQUMsWUFBQSxFQUFBQyxlQUFBLEVBQUFDLGdCQUFBLEVBQUFDLGlCQUFBLEVBQUFDLFlBQUEsRUFBQUMsV0FBQSxFQUFBQyxZQUFBLEVBQUFDLFNBQUEsRUFBQUMsT0FBQSxFQUFBQyxTQUFBLEVBQUFDLFNBQUEsRUFBQUMsUUFBQSxFQUFBQyxRQUFBLEVBQUFDLE1BQUEsRUFBQUMsYUFBQSxFQUFBQyxjQUFBLEVBQ1JDLGFBQUEsRUFBQUMsaUJBQUEsRUFBQUMsa0JBQUEsRUFBQUMsa0JBQUEsRUFBQUMsZUFBQSxFQUFBQyxhQUFBLEdBQTBHQyxJQUFBLHdCQUE4QjdrQyxRQUFBQyxLQUFBa29CLElBQUFwbUIsUUFBQSxTQUFBaEcsR0FBb0M4b0MsR0FBQTlpQyxRQUFBLFNBQUEvRixHQUF1QkEsSUFBQUQsRUFBQStvQyxPQUFBLEdBQUE1K0IsY0FBQW5LLEVBQUFncEMsVUFBQSxHQUE2QzVjLEdBQUFuc0IsR0FBQW1zQixHQUFBcHNCLE1BQ21ELElBQUF3c0IsSUFBQXZyQixJQUFVZ29DLFVBQUEsSUFBY0MsTUFBQSxFQUFBQyxNQUFBLEVBQUFDLElBQUEsRUFBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQUFDLElBQUEsRUFBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQUMsTUFBQSxFQUFBQyxNQUFBLEVBQUFDLE9BQUEsRUFBQXRoQyxRQUFBLEVBQUF1aEMsT0FBQSxFQUFBQyxLQUFBLElBRXhDNWMsR0FBQTBZLEdBQUFDLEtBQUFwWSxHQUFBeHNCLEdBQUE4SCxZQUFBLElBRW5SeWtCLElBQVF5TixTQUFBLFFBQUFJLFdBQUEsVUFBQUMsa0JBQUEsaUJBQUFrQixrQkFBQSxpQkFBQUMsV0FBQSxVQUFBQyxhQUFBLFlBQUFDLFNBQUEsUUFBQUMsU0FBQSxRQUFBSyxjQUFBLGFBQUFFLGtCQUFBLGlCQUFBQyxhQUFBLFlBQUFPLFNBQUEsUUFBQUMsUUFBQSxPQUFBQyxXQUFBLFVBQUFDLFlBQUEsV0FBQUMsY0FBQSxhQUFBRSxVQUFBLFNBQUFDLFdBQUEsVUFBQUUsV0FBQSxVQUFBQyxXQUFBLFVBQUFFLGNBQUEsYUFBQU8sZ0JBQUEsZUFDUkMsV0FBQSxXQWFBZ0wsR0FBQS9sQyxPQUFBZ0QsUUFBc0JySCxjQUFBc3RCLEdBQUFLLGVBQUFELEdBQUEyYyxxQkFBQXpjLEdBQUEwYyxlQUFBbmMsR0FBQW9jLGlCQUFBbmMsR0FBQW9jLHVCQUFBbmMsR0FBQW9jLGlCQUFBbmMsR0FBQW9jLHFCQUFBLGFBQWdMQyxnQ0FBQSxhQUE2Q0MsNkJBQUEsYUFBMENDLCtCQUFBLGFBQTRDQyw0QkFBQSxhQUF5QzE1Qix1QkFBQSxTQUFBaFIsRUFBQUMsRUFBQWxCLEdBQXdDLE9BQUFrQixHQUFVLFlBQThCLEdBQTlCMHFCLEdBQUEzcUIsRUFBQWpCLEdBQXFCa0IsRUFBQWxCLEVBQUF3QixLQUFTLFVBQUF4QixFQUFBc0QsTUFBQSxNQUFBcEMsRUFBQSxDQUE4QixJQUFBbEIsRUFBQWlCLEVBQVFqQixFQUFBcU8sWUFBYXJPLEVBQ3JmQSxFQUFBcU8sVUFBOEYsS0FBakZyTyxJQUFBNHJDLGlCQUFBLGNBQUFDLEtBQUFDLFVBQUEsR0FBQTVxQyxHQUFBLG1CQUFpRkEsRUFBQSxFQUFRQSxFQUFBbEIsRUFBQW9CLE9BQVdGLElBQUEsQ0FBSyxHQUFBb0IsR0FBQXRDLEVBQUFrQixFQUFXLElBQUFvQixJQUFBckIsR0FBQXFCLEVBQUF5cEMsT0FBQTlxQyxFQUFBOHFDLEtBQUEsQ0FBMkIsR0FBQTFxQyxHQUFBbU4sRUFBQWxNLEVBQVlqQixHQUFBLE9BQUFlLEVBQUEsTUFBaUIrUixHQUFBN1IsR0FBTXNwQixHQUFBdHBCLEVBQUFqQixLQUFVLEtBQU0sZ0JBQUF1ckIsR0FBQTNyQixFQUFBakIsRUFBd0IsTUFBTSxjQUFBa0IsRUFBQWxCLEVBQUFpRixNQUFBLE1BQUEvRCxHQUFBZ3JCLEdBQUFqckIsSUFBQWpCLEVBQUF3c0IsU0FBQXRyQixHQUFBLE1BQTZEbTNCLElBQUFDLG1DQUFBMlMsR0FBMEMsSUFBQWUsSUFBQSxLQUFBQyxHQUFBLEtBRXBWeGMsR0FBQTRWLElBQVU1aEIsbUJBQUEsU0FBQXhpQixHQUErQixHQUFBQyxHQUFBRCxFQUFBK1IsUUFBaUIsUUFBQTlSLEdBQVUsZUFBQUQsT0FBQXdPLGlCQUFBeE8sRUFBQW9tQyxhQUFBdGEsR0FBQSxRQUFrRSxNQUFNLFNBQUE3ckIsRUFBQSxJQUFBQSxFQUFBRCxFQUFBb04sV0FBQXBOLElBQUFDLEVBQUFtbUMsY0FBQSxLQUFBbm1DLElBQUFnckMsUUFBQWpyQyxFQUFBOHJCLEdBQUE5ckIsRUFBQUMsR0FBNEUsTUFBQUQsSUFBU3VpQixvQkFBQSxTQUFBdmlCLEVBQUFDLEdBQW1DLE1BQUE2ckIsSUFBQTlyQixFQUFBQyxJQUFla2hCLGtCQUFBLFNBQUFuaEIsR0FBK0IsTUFBQUEsSUFBUzJuQixpQkFBQSxXQUE2Qm9qQixHQUFBajFCLEVBQU0sSUFBQTlWLEdBQUEwWCxJQUFXLElBQUFMLEdBQUFyWCxHQUFBLENBQVUscUJBQUFBLEdBQUEsR0FBQUMsSUFBK0IwWCxNQUFBM1gsRUFBQTRYLGVBQUFDLElBQUE3WCxFQUFBOFgsa0JBQTJDOVgsR0FBQSxDQUFRLEdBQUFqQixHQUFBOFMsT0FBQWtHLGNBQUFsRyxPQUFBa0csY0FDcmMsSUFBQWhaLEdBQUEsSUFBQUEsRUFBQW1zQyxXQUFBLENBQXdCanJDLEVBQUFsQixFQUFBaVosVUFBZSxJQUFBM1csR0FBQXRDLEVBQUFrWixhQUFBN1gsRUFBQXJCLEVBQUFtWixTQUFtQ25aLEtBQUFvWixXQUFnQixLQUFJbFksRUFBQThSLFNBQUEzUixFQUFBMlIsU0FBc0IsTUFBQS9RLEdBQVNmLEVBQUEsSUFBTyxNQUFBRCxHQUFRLEdBQUE2QixHQUFBLEVBQUFQLEdBQUEsRUFBQVMsR0FBQSxFQUFBUixFQUFBLEVBQUFtRCxFQUFBLEVBQUFoQixFQUFBMUQsRUFBQUQsRUFBQSxJQUFxQ0UsR0FBQSxPQUFRLENBQUUsT0FBQXdELEdBQWFDLElBQUF6RCxHQUFBLElBQUFvQixHQUFBLElBQUFxQyxFQUFBcU8sV0FBQXpRLEVBQUFPLEVBQUFSLEdBQXNDcUMsSUFBQXRELEdBQUEsSUFBQXJCLEdBQUEsSUFBQTJFLEVBQUFxTyxXQUFBaFEsRUFBQUYsRUFBQTlDLEdBQXNDLElBQUEyRSxFQUFBcU8sV0FBQWxRLEdBQUE2QixFQUFBdW9CLFVBQUE5ckIsUUFBd0MsUUFBQXNELEVBQUFDLEVBQUFxVCxhQUFpQ2hYLEVBQUEyRCxFQUFJQSxFQUFBRCxDQUFJLFFBQU0sQ0FBRSxHQUFBQyxJQUFBMUQsRUFBQSxLQUFBQyxFQUE2RCxJQUE1Q0YsSUFBQUUsS0FBQXNCLElBQUFGLElBQUFDLEVBQUFPLEdBQXNCOUIsSUFBQUssS0FBQXNFLElBQUEzRixJQUFBZ0QsRUFBQUYsR0FBc0IsUUFBQTRCLEVBQUFDLEVBQUEwVCxhQUFBLEtBQWtDMVQsR0FBQTNELEVBQUlBLEVBQUEyRCxFQUFBMEosV0FBZTFKLEVBQUFELEVBQUl4RCxHQUFBLElBQUFxQixJQUFBLElBQUFTLEVBQUEsTUFDbGU0VixNQUFBclcsRUFBQXVXLElBQUE5VixPQUFlOUIsR0FBQSxLQUFZQSxNQUFNMFgsTUFBQSxFQUFBRSxJQUFBLE9BQWU1WCxHQUFBLElBQVkrcUMsS0FBSUcsWUFBQW5yQyxFQUFBb3JDLGVBQUFuckMsR0FBZ0M0VixJQUFBLElBQU8rUixpQkFBQSxXQUE2QixHQUFBNW5CLEdBQUFnckMsR0FBQS9xQyxFQUFBeVgsS0FBQTNZLEVBQUFpQixFQUFBbXJDLFlBQUE5cEMsRUFBQXJCLEVBQUFvckMsY0FBbUQsSUFBQW5yQyxJQUFBbEIsR0FBQTR2QixHQUFBOXVCLFNBQUEyTyxnQkFBQXpQLEdBQUEsQ0FBMEMsR0FBQXNZLEdBQUF0WSxHQUFBLEdBQUFrQixFQUFBb0IsRUFBQXNXLE1BQUEzWCxFQUFBcUIsRUFBQXdXLElBQUEsU0FBQTdYLE1BQUFDLEdBQUEsa0JBQUFsQixLQUFBNlksZUFBQTNYLEVBQUFsQixFQUFBK1ksYUFBQTRjLEtBQUF6SyxJQUFBanFCLEVBQUFqQixFQUFBaUYsTUFBQTdELFlBQWtJLElBQUEwUixPQUFBa0csYUFBQSxDQUE2QjlYLEVBQUE0UixPQUFBa0csY0FBd0IsSUFBQTNYLEdBQUFyQixFQUFBc1AsS0FBQWxPLE1BQXFCSCxHQUFBMDBCLEtBQUF6SyxJQUFBNW9CLEVBQUFzVyxNQUFBdlgsR0FBc0JpQixFQUFBLFNBQUFBLEVBQUF3VyxJQUFBN1gsRUFBQTAwQixLQUFBekssSUFBQTVvQixFQUFBd1csSUFBQXpYLElBQXFDSCxFQUFBb3JDLFFBQUFyckMsRUFDemVxQixJQUFBakIsRUFBQWlCLElBQUFyQixJQUFBSSxHQUFpQkEsRUFBQTRXLEdBQUFqWSxFQUFBaUIsRUFBVSxJQUFBNkIsR0FBQW1WLEdBQUFqWSxFQUFBc0MsRUFBYyxJQUFBakIsR0FBQXlCLElBQUEsSUFBQTVCLEVBQUFpckMsWUFBQWpyQyxFQUFBK1gsYUFBQTVYLEVBQUE4VyxNQUFBalgsRUFBQWdZLGVBQUE3WCxFQUFBK1csUUFBQWxYLEVBQUFpWSxZQUFBclcsRUFBQXFWLE1BQUFqWCxFQUFBa1ksY0FBQXRXLEVBQUFzVixRQUFBLENBQStILEdBQUE3VixHQUFBekIsU0FBQXlyQyxhQUE2QmhxQyxHQUFBaXFDLFNBQUFuckMsRUFBQThXLEtBQUE5VyxFQUFBK1csUUFBNEJsWCxFQUFBdXJDLGtCQUFvQnhyQyxFQUFBcUIsR0FBQXBCLEVBQUF3ckMsU0FBQW5xQyxHQUFBckIsRUFBQW9yQyxPQUFBeHBDLEVBQUFxVixLQUFBclYsRUFBQXNWLFVBQUE3VixFQUFBb3FDLE9BQUE3cEMsRUFBQXFWLEtBQUFyVixFQUFBc1YsUUFBQWxYLEVBQUF3ckMsU0FBQW5xQyxLQUE4RixJQUFMckIsS0FBS0QsRUFBQWpCLEVBQVFpQixJQUFBb04sWUFBZSxJQUFBcE4sRUFBQStSLFVBQUE5UixFQUFBcUQsTUFBeUJ3YyxRQUFBOWYsRUFBQTJyQyxLQUFBM3JDLEVBQUE0ckMsV0FBQUMsSUFBQTdyQyxFQUFBOHJDLFdBQW9ELEtBQU5sZCxHQUFBN3ZCLEdBQU1BLEVBQUEsRUFBUUEsRUFBQWtCLEVBQUFFLE9BQVdwQixJQUFBaUIsRUFBQUMsRUFBQWxCLEdBQUFpQixFQUFBOGYsUUFBQThyQixXQUFBNXJDLEVBQUEyckMsS0FBQTNyQyxFQUFBOGYsUUFBQWdzQixVQUMxYzlyQyxFQUFBNnJDLElBQU1iLEdBQUEsS0FBUW4xQixHQUFBazFCLElBQU9BLEdBQUEsTUFBUTdxQixlQUFBLFNBQUFsZ0IsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFBakIsR0FBaUUsTUFBN0JKLEdBQUFrdEIsR0FBQWx0QixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQWNyQixFQUFBMkQsSUFBQXZELEVBQU9KLEVBQUF3TixJQUFBdk4sRUFBUUQsR0FBU29nQixtQkFBQSxTQUFBcGdCLEVBQUFDLEdBQWtDRCxFQUFBd2hCLFlBQUF2aEIsSUFBaUJvZ0Isd0JBQUEsU0FBQXJnQixFQUFBQyxFQUFBbEIsRUFBQXNDLEdBQTJDbXNCLEdBQUF4dEIsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFZckIsR0FBQSxDQUFHLE9BQUFDLEdBQVUscURBQUFELElBQUFqQixFQUFBcXhCLFNBQXlFLE1BQUFwd0IsR0FBUUEsR0FBQSxFQUFLLE1BQUFBLElBQVNzZ0IsY0FBQSxTQUFBdGdCLEVBQUFDLEVBQUFsQixFQUFBc0MsRUFBQWpCLEdBQW1DLE1BQUEydEIsSUFBQS90QixFQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUFqQixJQUFxQmdmLHFCQUFBLFNBQUFwZixFQUFBQyxHQUFvQyxtQkFBQUQsR0FBQSxnQkFBQUMsR0FBQTZCLFVBQUEsZ0JBQUE3QixHQUFBNkIsVUFBQSxnQkFDelo3QixHQUFBd3JCLHlCQUFBLE9BQUF4ckIsRUFBQXdyQix5QkFBQSxnQkFBQXhyQixHQUFBd3JCLHdCQUFBa0MsUUFBdUhyTywwQkFBQSxTQUFBdGYsRUFBQUMsR0FBeUMsUUFBQUEsRUFBQTJ3QixRQUFpQnpRLG1CQUFBLFNBQUFuZ0IsRUFBQUMsRUFBQWxCLEVBQUFzQyxHQUF1RCxNQUFqQnJCLEdBQUFzdEIsR0FBQXR0QixFQUFBQyxHQUFVRCxFQUFBMkQsSUFBQXRDLEVBQU9yQixHQUFTd25CLElBQUErYyxHQUFBeGpCLFVBQWtCSyxZQUFBLFNBQUFwaEIsR0FBd0JBLEVBQUErckMsU0FBVTFxQixhQUFBLFNBQUFyaEIsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFBakIsR0FBa0NKLEVBQUF3TixJQUFBcE4sRUFBUTR0QixHQUFBaHVCLEVBQUFDLEVBQUFsQixFQUFBc0MsRUFBQWpCLElBQWNraEIsaUJBQUEsU0FBQXRoQixHQUE4QkEsRUFBQWlYLFlBQUEsSUFBaUJzSyxpQkFBQSxTQUFBdmhCLEVBQUFDLEVBQUFsQixHQUFrQ2lCLEVBQUFpc0IsVUFBQWx0QixHQUFjeWlCLFlBQUEsU0FBQXhoQixFQUFBQyxHQUEyQkQsRUFBQXdoQixZQUFBdmhCLElBQWlCd2hCLHVCQUFBLFNBQUF6aEIsRUFDeGVDLEdBQUcsSUFBQUQsRUFBQStSLFNBQUEvUixFQUFBb04sV0FBQXNVLGFBQUF6aEIsRUFBQUQsS0FBQXdoQixZQUFBdmhCLElBQStEeWhCLGFBQUEsU0FBQTFoQixFQUFBQyxFQUFBbEIsR0FBOEJpQixFQUFBMGhCLGFBQUF6aEIsRUFBQWxCLElBQW9CNGlCLHdCQUFBLFNBQUEzaEIsRUFBQUMsRUFBQWxCLEdBQXlDLElBQUFpQixFQUFBK1IsU0FBQS9SLEVBQUFvTixXQUFBc1UsYUFBQXpoQixFQUFBbEIsR0FBQWlCLEVBQUEwaEIsYUFBQXpoQixFQUFBbEIsSUFBa0U2aUIsWUFBQSxTQUFBNWhCLEVBQUFDLEdBQTJCRCxFQUFBNGhCLFlBQUEzaEIsSUFBaUI0aEIseUJBQUEsU0FBQTdoQixFQUFBQyxHQUF3QyxJQUFBRCxFQUFBK1IsU0FBQS9SLEVBQUFvTixXQUFBd1UsWUFBQTNoQixHQUFBRCxFQUFBNGhCLFlBQUEzaEIsS0FBNkQwaUIsV0FBWUMsbUJBQUEsU0FBQTVpQixFQUFBQyxHQUFpQyxXQUFBRCxFQUFBK1IsVUFBQTlSLEVBQUE4SixnQkFBQS9KLEVBQUF5UixTQUFBMUgsY0FBQSxLQUFBL0osR0FBeUU2aUIsdUJBQUEsU0FBQTdpQixFQUN0ZUMsR0FBRyxXQUFBQSxHQUFBLElBQUFELEVBQUErUixTQUFBLEtBQUEvUixHQUFvQzhpQix5QkFBQSxTQUFBOWlCLEdBQXNDLElBQUFBLElBQUFvWCxZQUFvQnBYLEdBQUEsSUFBQUEsRUFBQStSLFVBQUEsSUFBQS9SLEVBQUErUixVQUFrQy9SLElBQUFvWCxXQUFpQixPQUFBcFgsSUFBUytpQix3QkFBQSxTQUFBL2lCLEdBQXFDLElBQUFBLElBQUErVyxXQUFtQi9XLEdBQUEsSUFBQUEsRUFBQStSLFVBQUEsSUFBQS9SLEVBQUErUixVQUFrQy9SLElBQUFvWCxXQUFpQixPQUFBcFgsSUFBU2dqQixnQkFBQSxTQUFBaGpCLEVBQUFDLEVBQUFsQixFQUFBc0MsRUFBQWpCLEVBQUF5QixHQUFzRCxNQUFmN0IsR0FBQTJELElBQUE5QixFQUFPN0IsRUFBQXdOLElBQUF6TyxFQUFRa3ZCLEdBQUFqdUIsRUFBQUMsRUFBQWxCLEVBQUFxQixFQUFBaUIsSUFBcUI0aEIsb0JBQUEsU0FBQWpqQixFQUFBQyxFQUFBbEIsR0FBNEMsTUFBUGlCLEdBQUEyRCxJQUFBNUUsRUFBT212QixHQUFBbHVCLEVBQUFDLElBQWUrckMseUNBQUEsYUFBc0RDLGdDQUFBLGFBQzdjQywrQkFBQSxhQUEyQ0Msc0JBQUEsYUFBbUNDLHNDQUFBLGFBQW1EQywwQ0FBQSxhQUF1REMsNkJBQUEsYUFBMENDLGlDQUFBLGNBQStDOWtCLHlCQUFBK2MsR0FBQTljLHVCQUFBK2MsR0FBQXBsQixtQkFBQSxHQUE4RWhPLEdBQUFtZCxHQUFBeEcsZUFFOVIwRyxHQUFBeHBCLFVBQUF2RixPQUFBLFNBQUFLLEVBQUFDLEdBQWtDdXVCLEdBQUFsRyxnQkFBQXRvQixFQUFBVSxLQUFBNnRCLG9CQUFBLEtBQUF0dUIsSUFBc0R5dUIsR0FBQXhwQixVQUFBc25DLFFBQUEsU0FBQXhzQyxHQUFpQ3d1QixHQUFBbEcsZ0JBQUEsS0FBQTVuQixLQUFBNnRCLG9CQUFBLEtBQUF2dUIsR0FDMUwsSUFBQXlzQyxLQUFRQyxhQUFBamUsR0FBQWtlLFlBQUEsU0FBQTNzQyxHQUF3QyxTQUFBQSxFQUFBLFdBQXVCLFFBQUFBLEVBQUErUixTQUFBLE1BQUEvUixFQUEyQixJQUFBQyxHQUFBRCxFQUFBZ1YsbUJBQTRCLE9BQUEvVSxHQUFBdXVCLEdBQUFoRyxpQkFBQXZvQixRQUFrQyxrQkFBQUQsR0FBQUwsT0FBQXdCLEVBQUEsT0FBQUEsRUFBQSxNQUFBOEMsT0FBQUMsS0FBQWxFLE1BQThEK2YsUUFBQSxTQUFBL2YsRUFBQUMsRUFBQWxCLEdBQXlCLE1BQUF1dkIsSUFBQSxLQUFBdHVCLEVBQUFDLEdBQUEsRUFBQWxCLElBQXlCWSxPQUFBLFNBQUFLLEVBQUFDLEVBQUFsQixHQUF3QixNQUFBdXZCLElBQUEsS0FBQXR1QixFQUFBQyxHQUFBLEVBQUFsQixJQUF5QjZ0QyxvQ0FBQSxTQUFBNXNDLEVBQUFDLEVBQUFsQixFQUFBc0MsR0FBOEcsTUFBdkQsT0FBQXJCLEdBQUEsU0FBQUEsRUFBQWdWLG9CQUFBN1QsRUFBQSxhQUF1RG10QixHQUFBdHVCLEVBQUFDLEVBQUFsQixHQUFBLEVBQUFzQyxJQUFzQndyQyx1QkFBQSxTQUFBN3NDLEdBQzdiLE1BRGllbXVCLElBQUFudUIsR0FBQSxPQUN6ZW1CLEVBQUEsUUFBUW5CLEVBQUF1dUIsc0JBQUFDLEdBQUF2RyxpQkFBQSxXQUE0RHFHLEdBQUEsVUFBQXR1QixHQUFBLGFBQTZCQSxFQUFBdXVCLG9CQUFBLFVBQTZCLElBQVN1ZSxzQkFBQXJlLEdBQUFzZSx3QkFBQXo3QixFQUFBMDdCLHlCQUFBeGUsR0FBQXJHLGdCQUFBRCxVQUFBc0csR0FBQXRHLFVBQUFyaEIsb0RBQTBLb21DLGVBQUE1WSxHQUFBNlksb0JBQUF0WixHQUFBdVosaUJBQUFoWSxHQUFBaVkseUJBQUE5VixHQUFBK1Ysc0JBQUF6WSxHQUFBMFksc0JBQUFuVCxJQUNqVDNMLElBQUE5RixvQkFBc0JDLHdCQUFBeGIsRUFBQW9nQyxXQUFBLEVBQUEzbUMsUUFBQSxTQUFBNG1DLG9CQUFBLGFBQTJGLElBQUFDLElBQUF4cEMsT0FBQWdELFFBQXNCN0gsUUFBQXF0QyxLQUFXaUIsR0FBQUQsSUFBQWhCLElBQUFnQixFQUFnQi91QyxHQUFBRCxRQUFBaXZDLEdBQUEsUUFBQUEsR0FBQSxRQUFBQSxJVG9VNUosU0FBVWh2QyxFQUFRRCxHVWhpQnhCLFlBRUEsSUFBQThQLEtBQUEsbUJBQUFzRCxpQkFBQWhTLFdBQUFnUyxPQUFBaFMsU0FBQUQsZUFRQSt0QyxHQUVBcC9CLFlBRUFxL0IsY0FBQSxtQkFBQUMsUUFFQUMscUJBQUF2L0IsTUFBQXNELE9BQUF5ekIsbUJBQUF6ekIsT0FBQW9DLGFBRUE4NUIsZUFBQXgvQixLQUFBc0QsT0FBQW04QixPQUVBQyxZQUFBMS9CLEVBSUE3UCxHQUFBRCxRQUFBa3ZDLEdWOGlCTSxTQUFVanZDLEVBQVFELEVBQVNILEdXOWtCakMsWUFXQSxJQUFBeUssR0FBQXpLLEVBQUEsR0FNQTR2QyxHQVNBbDRCLE9BQUEsU0FBQTFOLEVBQUE2bEMsRUFBQS93QixHQUNBLE1BQUE5VSxHQUFBZzlCLGtCQUNBaDlCLEVBQUFnOUIsaUJBQUE2SSxFQUFBL3dCLEdBQUEsSUFFQWd4QixPQUFBLFdBQ0E5bEMsRUFBQStsQyxvQkFBQUYsRUFBQS93QixHQUFBLE1BR0s5VSxFQUFBMkwsYUFDTDNMLEVBQUEyTCxZQUFBLEtBQUFrNkIsRUFBQS93QixJQUVBZ3hCLE9BQUEsV0FDQTlsQyxFQUFBc0wsWUFBQSxLQUFBdTZCLEVBQUEvd0IsTUFKSyxRQWtCTGpILFFBQUEsU0FBQTdOLEVBQUE2bEMsRUFBQS93QixHQUNBLE1BQUE5VSxHQUFBZzlCLGtCQUNBaDlCLEVBQUFnOUIsaUJBQUE2SSxFQUFBL3dCLEdBQUEsSUFFQWd4QixPQUFBLFdBQ0E5bEMsRUFBQStsQyxvQkFBQUYsRUFBQS93QixHQUFBLE9BUUFneEIsT0FBQXJsQyxJQUtBdWxDLGdCQUFBLGFBR0E1dkMsR0FBQUQsUUFBQXl2QyxHWG9sQk0sU0FBVXh2QyxFQUFRRCxHWTdwQnhCLFlBdUJBLFNBQUE4dkMsR0FBQUMsR0FFQSxHQURBQSxNQUFBLG1CQUFBM3VDLG1CQUFBd0gsUUFDQSxtQkFBQW1uQyxHQUNBLFdBRUEsS0FDQSxNQUFBQSxHQUFBcGMsZUFBQW9jLEVBQUFDLEtBQ0csTUFBQXJ1QyxHQUNILE1BQUFvdUMsR0FBQUMsTUFJQS92QyxFQUFBRCxRQUFBOHZDLEdabXFCTSxTQUFVN3ZDLEVBQVFELEdhMXJCeEIsWUFRQSxTQUFBaXVCLEdBQUE3b0IsRUFBQTlELEdBRUEsTUFBQThELEtBQUE5RCxFQUlBLElBQUE4RCxHQUFBLElBQUE5RCxHQUFBLEVBQUE4RCxJQUFBLEVBQUE5RCxFQUdBOEQsT0FBQTlELE1BU0EsUUFBQTJ1QyxHQUFBQyxFQUFBQyxHQUNBLEdBQUFsaUIsRUFBQWlpQixFQUFBQyxHQUNBLFFBR0Esb0JBQUFELElBQUEsT0FBQUEsR0FBQSxnQkFBQUMsSUFBQSxPQUFBQSxFQUNBLFFBR0EsSUFBQUMsR0FBQTVxQyxPQUFBQyxLQUFBeXFDLEdBQ0FHLEVBQUE3cUMsT0FBQUMsS0FBQTBxQyxFQUVBLElBQUFDLEVBQUExdUMsU0FBQTJ1QyxFQUFBM3VDLE9BQ0EsUUFJQSxRQUFBeUgsR0FBQSxFQUFpQkEsRUFBQWluQyxFQUFBMXVDLE9BQWtCeUgsSUFDbkMsSUFBQWhHLEVBQUEvQyxLQUFBK3ZDLEVBQUFDLEVBQUFqbkMsTUFBQThrQixFQUFBaWlCLEVBQUFFLEVBQUFqbkMsSUFBQWduQyxFQUFBQyxFQUFBam5DLEtBQ0EsUUFJQSxVQS9DQSxHQUFBaEcsR0FBQXFDLE9BQUFpQixVQUFBdEQsY0FrREFsRCxHQUFBRCxRQUFBaXdDLEdiNHNCTSxTQUFVaHdDLEVBQVFELEVBQVNILEdjNXdCakMsWUFrQkEsU0FBQXl3QyxHQUFBQyxFQUFBQyxHQUNBLFNBQUFELElBQUFDLEtBRUdELElBQUFDLElBRUFDLEVBQUFGLEtBRUFFLEVBQUFELEdBQ0hGLEVBQUFDLEVBQUFDLEVBQUE3aEMsWUFDRyxZQUFBNGhDLEdBQ0hBLEVBQUFHLFNBQUFGLEtBQ0dELEVBQUFJLDRCQUNILEdBQUFKLEVBQUFJLHdCQUFBSCxNQW5CQSxHQUFBQyxHQUFBNXdDLEVBQUEsR0F5QkFJLEdBQUFELFFBQUFzd0MsR2RreEJNLFNBQVVyd0MsRUFBUUQsRUFBU0gsR2V0ekJqQyxZQWlCQSxTQUFBNHdDLEdBQUFHLEdBQ0EsTUFBQUMsR0FBQUQsSUFBQSxHQUFBQSxFQUFBdDlCLFNBUEEsR0FBQXU5QixHQUFBaHhDLEVBQUEsR0FVQUksR0FBQUQsUUFBQXl3QyxHZjR6Qk0sU0FBVXh3QyxFQUFRRCxHZ0JqMUJ4QixZQWVBLFNBQUE2d0MsR0FBQUQsR0FDQSxHQUFBYixHQUFBYSxJQUFBemlCLGVBQUF5aUIsRUFBQXh2QyxTQUNBbzZCLEVBQUF1VSxFQUFBdlUsYUFBQXBvQixNQUNBLFVBQUF3OUIsS0FBQSxrQkFBQXBWLEdBQUFzVixLQUFBRixZQUFBcFYsR0FBQXNWLEtBQUEsZ0JBQUFGLElBQUEsZ0JBQUFBLEdBQUF0OUIsVUFBQSxnQkFBQXM5QixHQUFBNTlCLFdBR0EvUyxFQUFBRCxRQUFBNndDLEdoQnUxQk0sU0FBVTV3QyxFQUFRRCxHaUJwMkJ4QixZQU1BLFNBQUF5WixHQUFBaEIsR0FJQSxJQUNBQSxFQUFBNjBCLFFBQ0csTUFBQTNyQyxLQUdIMUIsRUFBQUQsUUFBQXlaLEdqQmszQk0sU0FBVXhaLEVBQVFELEVBQVNILEdBRWhDLFlBa0NBLFNBQVNXLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFFBQVNGLEdBRXZGLFFBQVNzd0MsR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSXBvQyxXQUFVLHFDQUVoSCxRQUFTcW9DLEdBQTJCQyxFQUFNL3dDLEdBQVEsSUFBSyt3QyxFQUFRLEtBQU0sSUFBSUMsZ0JBQWUsNERBQWdFLFFBQU9oeEMsR0FBeUIsZ0JBQVRBLElBQXFDLGtCQUFUQSxHQUE4Qit3QyxFQUFQL3dDLEVBRWxPLFFBQVNpeEMsR0FBVUMsRUFBVUMsR0FBYyxHQUEwQixrQkFBZkEsSUFBNEMsT0FBZkEsRUFBdUIsS0FBTSxJQUFJMW9DLFdBQVUsaUVBQW9FMG9DLEdBQWVELEdBQVM3cUMsVUFBWWpCLE9BQU9nc0MsT0FBT0QsR0FBY0EsRUFBVzlxQyxXQUFhSyxhQUFldkIsTUFBTytyQyxFQUFVcDlCLFlBQVksRUFBT3U5QixVQUFVLEVBQU10OUIsY0FBYyxLQUFlbzlCLElBQVkvckMsT0FBT2tzQyxlQUFpQmxzQyxPQUFPa3NDLGVBQWVKLEVBQVVDLEdBQWNELEVBQVNLLFVBQVlKLEdBdENqZS9yQyxPQUFPeU8sZUFBZWpVLEVBQVMsY0FDN0J1RixPQUFPLEdBR1QsSUFBSXFzQyxHQUFlLFdBQWMsUUFBU0MsR0FBaUJob0MsRUFBUTNILEdBQVMsSUFBSyxHQUFJaUgsR0FBSSxFQUFHQSxFQUFJakgsRUFBTVIsT0FBUXlILElBQUssQ0FBRSxHQUFJMm9DLEdBQWE1dkMsRUFBTWlILEVBQUkyb0MsR0FBVzU5QixXQUFhNDlCLEVBQVc1OUIsYUFBYyxFQUFPNDlCLEVBQVczOUIsY0FBZSxFQUFVLFNBQVcyOUIsS0FBWUEsRUFBV0wsVUFBVyxHQUFNanNDLE9BQU95TyxlQUFlcEssRUFBUWlvQyxFQUFXOXVDLElBQUs4dUMsSUFBaUIsTUFBTyxVQUFVYixFQUFhYyxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWUYsRUFBaUJaLEVBQVl4cUMsVUFBV3NyQyxHQUFpQkMsR0FBYUgsRUFBaUJaLEVBQWFlLEdBQXFCZixNa0JqNUJqaUJyd0MsRUFBQWYsRUFBQSxHbEJxNUJLZ0IsRUFBVUwsRUFBdUJJLEdrQnA1QnRDcXhDLEVBQUFweUMsRUFBQSxJbEJ3NUJLcXlDLEVBQWExeEMsRUFBdUJ5eEMsR2tCdDVCekNFLEVBQUF0eUMsRUFBQSxJbEIwNUJLdXlDLEVBQWdCNXhDLEVBQXVCMnhDLEdrQng1QjVDRSxFQUFBeHlDLEVBQUEsSWxCNDVCS3l5QyxFQUFnQjl4QyxFQUF1QjZ4QyxHa0IzNUI1Q0UsRUFBQTF5QyxFQUFBLElsQis1QksyeUMsRUFBY2h5QyxFQUF1Qit4QyxHa0I5NUIxQ0UsRUFBQTV5QyxFQUFBLElsQms2Qks2eUMsRUFBY2x5QyxFQUF1Qml5QyxHa0JoNkIxQ0UsRUFBQTl5QyxFQUFBLElBRU0reUMsRWxCMDZCSyxTQUFVQyxHa0J6NkJuQixRQUFBRCxHQUFZMXdDLEdBQU82dUMsRUFBQTl1QyxLQUFBMndDLEVBQUEsSUFBQUUsR0FBQTVCLEVBQUFqdkMsTUFBQTJ3QyxFQUFBakIsV0FBQW5zQyxPQUFBdXRDLGVBQUFILElBQUF4eUMsS0FBQTZCLEtBQ1hDLEdBRFcsT0FHakI0d0MsR0FBSzV6QixPQUNIOHpCLFVBQ0FDLGNBQWUsTUFHakJILEVBQUtJLGtCQUFvQkosRUFBS0ksa0JBQWtCanJDLEtBQXZCNnFDLEdBQ3pCQSxFQUFLSyx1QkFBeUJMLEVBQUtLLHVCQUF1QmxyQyxLQUE1QjZxQyxHQUM5QkEsRUFBS00sYUFBYyxFQUFBbEIsRUFBQXZ4QyxTQUFTbXlDLEVBQUtNLFlBQVluckMsS0FBakI2cUMsR0FBNkIsS0FDekRBLEVBQUtNLFlBQUxULEVBQUFVLGdCQVhpQlAsRWxCdStCbEIsTUE3REF6QixHQUFVdUIsRUFBS0MsR0FtQmZqQixFQUFhZ0IsSUFDWDV2QyxJQUFLLGNBQ0x1QyxNQUFPLFNrQmo3QkUrdEMsR0FBTSxHQUFBQyxHQUFBdHhDLElBQ2hCLFFBQU8sRUFBQW13QyxFQUFBenhDLFNBQUFneUMsRUFBQWEsYUFBQWIsRUFBQWMsUUFBbUNILEdBQ3ZDSSxLQUFLLFNBQUNWLEdBQ0xPLEVBQUs1c0MsVUFDSHFzQyxTQUNBQyxjQUFlRCxFQUFPLFVsQnU3QjNCaHdDLElBQUssb0JBQ0x1QyxNQUFPLFNrQm43QlFvdUMsR0FDaEIxeEMsS0FBSzBFLFVBQVdzc0MsY0FBZVUsT2xCczdCOUIzd0MsSUFBSyx5QkFDTHVDLE1BQU8sU2tCcDdCYSt0QyxHQUNyQnJ4QyxLQUFLbXhDLFlBQVlFLE1sQnU3QmhCdHdDLElBQUssU0FDTHVDLE1BQU8sV2tCcDdCUixNQUNFMUUsR0FBQUYsUUFBQVEsY0FBQSxXQUNFTixFQUFBRixRQUFBUSxjQUFBdXhDLEVBQUEveEMsU0FBV2l6QyxtQkFBb0IzeEMsS0FBS2t4Qyx5QkFDcEN0eUMsRUFBQUYsUUFBQVEsY0FBQSxPQUFLbXlCLFVBQVUsT0FDYnp5QixFQUFBRixRQUFBUSxjQUFBbXhDLEVBQUEzeEMsU0FBYWd6QyxNQUFPMXhDLEtBQUtpZCxNQUFNK3pCLGdCQUMvQnB5QyxFQUFBRixRQUFBUSxjQUFBcXhDLEVBQUE3eEMsU0FDRWt6QyxjQUFlNXhDLEtBQUtpeEMsa0JBQ3BCRixPQUFRL3dDLEtBQUtpZCxNQUFNOHpCLGVsQis3QnJCSixHQUNQaHlDLEVBQU8rRyxVQUVUM0gsR0FBUVcsUWtCMTdCTWl5QyxHbEI4N0JULFNBQVUzeUMsRUFBUUQsRUFBU0gsR21CejdCakMsUUFBQWkwQyxHQUFBcHZDLEVBQUFxdkMsRUFBQXRuQixHQXVCQSxRQUFBdW5CLEdBQUFwYSxHQUNBLEdBQUFxYSxHQUFBQyxFQUNBQyxFQUFBQyxDQUtBLE9BSEFGLEdBQUFFLEVBQUF4ckMsT0FDQXlyQyxFQUFBemEsRUFDQXAxQixFQUFBRSxFQUFBb0gsTUFBQXFvQyxFQUFBRixHQUlBLFFBQUFLLEdBQUExYSxHQU1BLE1BSkF5YSxHQUFBemEsRUFFQTJhLEVBQUF0TixXQUFBdU4sRUFBQVQsR0FFQVUsRUFBQVQsRUFBQXBhLEdBQUFwMUIsRUFHQSxRQUFBa3dDLEdBQUE5YSxHQUNBLEdBQUErYSxHQUFBL2EsRUFBQWdiLEVBQ0FDLEVBQUFqYixFQUFBeWEsRUFDQVMsRUFBQWYsRUFBQVksQ0FFQSxPQUFBSSxHQUNBQyxFQUFBRixFQUFBRyxFQUFBSixHQUNBQyxFQUdBLFFBQUFJLEdBQUF0YixHQUNBLEdBQUErYSxHQUFBL2EsRUFBQWdiLEVBQ0FDLEVBQUFqYixFQUFBeWEsQ0FLQSxPQUFBenJDLFVBQUFnc0MsR0FBQUQsR0FBQVosR0FDQVksRUFBQSxHQUFBSSxHQUFBRixHQUFBSSxFQUdBLFFBQUFULEtBQ0EsR0FBQTVhLEdBQUE3USxHQUNBLE9BQUFtc0IsR0FBQXRiLEdBQ0F1YixFQUFBdmIsUUFHQTJhLEVBQUF0TixXQUFBdU4sRUFBQUUsRUFBQTlhLEtBR0EsUUFBQXViLEdBQUF2YixHQUtBLE1BSkEyYSxHQUFBM3JDLE9BSUF3c0MsR0FBQWxCLEVBQ0FGLEVBQUFwYSxJQUVBc2EsRUFBQUUsRUFBQXhyQyxPQUNBcEUsR0FHQSxRQUFBNndDLEtBQ0F6c0MsU0FBQTJyQyxHQUNBcE4sYUFBQW9OLEdBRUFGLEVBQUEsRUFDQUgsRUFBQVUsRUFBQVIsRUFBQUcsRUFBQTNyQyxPQUdBLFFBQUEwc0MsS0FDQSxNQUFBMXNDLFVBQUEyckMsRUFBQS92QyxFQUFBMndDLEVBQUFwc0IsS0FHQSxRQUFBd3NCLEtBQ0EsR0FBQTNiLEdBQUE3USxJQUNBeXNCLEVBQUFOLEVBQUF0YixFQU1BLElBSkFzYSxFQUFBenlDLFVBQ0EyeUMsRUFBQW55QyxLQUNBMnlDLEVBQUFoYixFQUVBNGIsRUFBQSxDQUNBLEdBQUE1c0MsU0FBQTJyQyxFQUNBLE1BQUFELEdBQUFNLEVBRUEsSUFBQUcsRUFHQSxNQURBUixHQUFBdE4sV0FBQXVOLEVBQUFULEdBQ0FDLEVBQUFZLEdBTUEsTUFIQWhzQyxVQUFBMnJDLElBQ0FBLEVBQUF0TixXQUFBdU4sRUFBQVQsSUFFQXZ2QyxFQXBIQSxHQUFBMHZDLEdBQ0FFLEVBQ0FhLEVBQ0F6d0MsRUFDQSt2QyxFQUNBSyxFQUNBUCxFQUFBLEVBQ0FJLEdBQUEsRUFDQU0sR0FBQSxFQUNBSyxHQUFBLENBRUEsc0JBQUExd0MsR0FDQSxTQUFBbUUsV0FBQTRzQyxFQTRHQSxPQTFHQTFCLEdBQUEyQixFQUFBM0IsSUFBQSxFQUNBNEIsRUFBQWxwQixLQUNBZ29CLElBQUFob0IsRUFBQWdvQixRQUNBTSxFQUFBLFdBQUF0b0IsR0FDQXdvQixFQUFBRixFQUFBYSxFQUFBRixFQUFBanBCLEVBQUF3b0IsVUFBQSxFQUFBbEIsR0FBQWtCLEVBQ0FHLEVBQUEsWUFBQTNvQixPQUFBMm9CLFlBbUdBRyxFQUFBRixTQUNBRSxFQUFBRCxRQUNBQyxFQTFMQSxHQUFBSSxHQUFBOTFDLEVBQUEsSUFDQWtwQixFQUFBbHBCLEVBQUEsSUFDQTYxQyxFQUFBNzFDLEVBQUEsSUFHQTQxQyxFQUFBLHNCQUdBRyxFQUFBM2YsS0FBQXhLLElBQ0F1cEIsRUFBQS9lLEtBQUF6SyxHQW9MQXZyQixHQUFBRCxRQUFBOHpDLEduQmlnQ00sU0FBVTd6QyxFQUFRRCxHb0JycUN4QixRQUFBMjFDLEdBQUFwd0MsR0FDQSxHQUFBM0IsU0FBQTJCLEVBQ0EsY0FBQUEsSUFBQSxVQUFBM0IsR0FBQSxZQUFBQSxHQUdBM0QsRUFBQUQsUUFBQTIxQyxHcEJxc0NNLFNBQVUxMUMsRUFBUUQsRUFBU0gsR3FCbnVDakMsR0FBQWcyQyxHQUFBaDJDLEVBQUEsSUFrQkFrcEIsRUFBQSxXQUNBLE1BQUE4c0IsR0FBQXhlLEtBQUF0TyxNQUdBOW9CLEdBQUFELFFBQUErb0IsR3JCMHVDTSxTQUFVOW9CLEVBQVFELEVBQVNILEdzQmh3Q2pDLEdBQUFpMkMsR0FBQWoyQyxFQUFBLElBR0FrMkMsRUFBQSxnQkFBQTVFLGtCQUFBM3JDLGlCQUFBMnJDLEtBR0EwRSxFQUFBQyxHQUFBQyxHQUFBQyxTQUFBLGdCQUVBLzFDLEdBQUFELFFBQUE2MUMsR3RCdXdDTSxTQUFVNTFDLEVBQVFELEl1Qi93Q3hCLFNBQUFpMkMsR0FDQSxHQUFBSCxHQUFBLGdCQUFBRyxTQUFBendDLGlCQUFBeXdDLENBRUFoMkMsR0FBQUQsUUFBQTgxQyxJdkJteEM4QjExQyxLQUFLSixFQUFVLFdBQWEsTUFBT2lDLFdBSTNELFNBQVVoQyxFQUFRRCxFQUFTSCxHd0I5dUNqQyxRQUFBNjFDLEdBQUFud0MsR0FDQSxtQkFBQUEsR0FDQSxNQUFBQSxFQUVBLElBQUEyd0MsRUFBQTN3QyxHQUNBLE1BQUE0d0MsRUFFQSxJQUFBUixFQUFBcHdDLEdBQUEsQ0FDQSxHQUFBNndDLEdBQUEsa0JBQUE3d0MsR0FBQTh3QyxRQUFBOXdDLEVBQUE4d0MsVUFBQTl3QyxDQUNBQSxHQUFBb3dDLEVBQUFTLEtBQUEsR0FBQUEsRUFFQSxtQkFBQTd3QyxHQUNBLFdBQUFBLE1BRUFBLEtBQUFuQixRQUFBa3lDLEVBQUEsR0FDQSxJQUFBQyxHQUFBQyxFQUFBL3JCLEtBQUFsbEIsRUFDQSxPQUFBZ3hDLElBQUFFLEVBQUFoc0IsS0FBQWxsQixHQUNBbXhDLEVBQUFueEMsRUFBQWdHLE1BQUEsR0FBQWdyQyxFQUFBLEtBQ0FJLEVBQUFsc0IsS0FBQWxsQixHQUFBNHdDLEdBQUE1d0MsRUE5REEsR0FBQW93QyxHQUFBOTFDLEVBQUEsSUFDQXEyQyxFQUFBcjJDLEVBQUEsSUFHQXMyQyxFQUFBLElBR0FHLEVBQUEsYUFHQUssRUFBQSxxQkFHQUgsRUFBQSxhQUdBQyxFQUFBLGNBR0FDLEVBQUF6ZSxRQThDQWg0QixHQUFBRCxRQUFBMDFDLEd4Qml5Q00sU0FBVXoxQyxFQUFRRCxFQUFTSCxHeUIzMENqQyxRQUFBcTJDLEdBQUEzd0MsR0FDQSxzQkFBQUEsSUFDQXF4QyxFQUFBcnhDLElBQUFzeEMsRUFBQXR4QyxJQUFBdXhDLEVBekJBLEdBQUFELEdBQUFoM0MsRUFBQSxJQUNBKzJDLEVBQUEvMkMsRUFBQSxJQUdBaTNDLEVBQUEsaUJBd0JBNzJDLEdBQUFELFFBQUFrMkMsR3pCeTJDTSxTQUFVajJDLEVBQVFELEVBQVNILEcwQm4zQ2pDLFFBQUFnM0MsR0FBQXR4QyxHQUNBLGFBQUFBLEVBQ0FxRCxTQUFBckQsRUFBQXd4QyxFQUFBQyxFQUVBQyxPQUFBenhDLFFBQUFELEdBQ0EyeEMsRUFBQTN4QyxHQUNBNHhDLEVBQUE1eEMsR0F4QkEsR0FBQVcsR0FBQXJHLEVBQUEsSUFDQXEzQyxFQUFBcjNDLEVBQUEsSUFDQXMzQyxFQUFBdDNDLEVBQUEsSUFHQW0zQyxFQUFBLGdCQUNBRCxFQUFBLHFCQUdBRSxFQUFBL3dDLElBQUFreEMsWUFBQXh1QztBQWtCQTNJLEVBQUFELFFBQUE2MkMsRzFCNDRDTSxTQUFVNTJDLEVBQVFELEVBQVNILEcyQnY2Q2pDLEdBQUFnMkMsR0FBQWgyQyxFQUFBLElBR0FxRyxFQUFBMnZDLEVBQUEzdkMsTUFFQWpHLEdBQUFELFFBQUFrRyxHM0I4NkNNLFNBQVVqRyxFQUFRRCxFQUFTSCxHNEIxNUNqQyxRQUFBcTNDLEdBQUEzeEMsR0FDQSxHQUFBOHhDLEdBQUFsMEMsRUFBQS9DLEtBQUFtRixFQUFBMHhDLEdBQ0Fyb0MsRUFBQXJKLEVBQUEweEMsRUFFQSxLQUNBMXhDLEVBQUEweEMsR0FBQXJ1QyxNQUNBLElBQUEwdUMsSUFBQSxFQUNHLE1BQUEzMUMsSUFFSCxHQUFBNkMsR0FBQSt5QyxFQUFBbjNDLEtBQUFtRixFQVFBLE9BUEEreEMsS0FDQUQsRUFDQTl4QyxFQUFBMHhDLEdBQUFyb0MsUUFFQXJKLEdBQUEweEMsSUFHQXp5QyxFQTFDQSxHQUFBMEIsR0FBQXJHLEVBQUEsSUFHQTIzQyxFQUFBaHlDLE9BQUFpQixVQUdBdEQsRUFBQXEwQyxFQUFBcjBDLGVBT0FvMEMsRUFBQUMsRUFBQTd4QyxTQUdBc3hDLEVBQUEvd0MsSUFBQWt4QyxZQUFBeHVDLE1BNkJBM0ksR0FBQUQsUUFBQWszQyxHNUIwN0NNLFNBQVVqM0MsRUFBUUQsRzZCdDlDeEIsUUFBQW0zQyxHQUFBNXhDLEdBQ0EsTUFBQWd5QyxHQUFBbjNDLEtBQUFtRixHQWpCQSxHQUFBaXlDLEdBQUFoeUMsT0FBQWlCLFVBT0E4d0MsRUFBQUMsRUFBQTd4QyxRQWFBMUYsR0FBQUQsUUFBQW0zQyxHN0I4K0NNLFNBQVVsM0MsRUFBUUQsRzhCMytDeEIsUUFBQTQyQyxHQUFBcnhDLEdBQ0EsYUFBQUEsR0FBQSxnQkFBQUEsR0FHQXRGLEVBQUFELFFBQUE0MkMsRzlCMGdETSxTQUFVMzJDLEVBQVFELEVBQVNILEdBRWhDLFlBVUEsU0FBU1csR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR0FSdkYrRSxPQUFPeU8sZUFBZWpVLEVBQVMsY0FDN0J1RixPQUFPLEcrQjNpRFYsSUFBQWt5QyxHQUFBNTNDLEVBQUEsSS9CZ2pESzYzQyxFQUFVbDNDLEVBQXVCaTNDLEcrQjlpRGhDRSxFQUFjLFNBQUM5ZCxFQUFLK2QsR0FBOEIsR0FBdEJDLEdBQXNCcDJDLFVBQUFDLE9BQUEsR0FBQWtILFNBQUFuSCxVQUFBLEdBQUFBLFVBQUEsR0FBUCxFQUMvQyxLQUFLbzRCLElBQVErZCxFQUNYLEtBQU0sSUFBSS8xQyxPQUFNLDJCQUdsQixJQUFNaTJDLElBQ0pDLEtBQU0sVUFDTi8wQyxJQUFLNDBDLEVBQ0wzeEMsRUFBRzR4QyxFQUNIajBDLEtBQU0sUUFHUixPQUFPOHpDLEdBQUEvMkMsUUFBTW9ULElBQUk4bEIsR0FBT2llLFdBQVVwRSxLQUFLLFNBQUFzRSxHQUFBLE1BQVlBLEdBQVN6bUMsS0FBSzBtQyxRL0J5akRsRWo0QyxHQUFRVyxRK0J0akRNZzNDLEcvQjBqRFQsU0FBVTEzQyxFQUFRRCxFQUFTSCxHZ0Mza0RqQ0ksRUFBQUQsUUFBQUgsRUFBQSxLaENpbERNLFNBQVVJLEVBQVFELEVBQVNILEdpQ2psRGpDLFlBYUEsU0FBQTRoQixHQUFBeTJCLEdBQ0EsR0FBQS8xQyxHQUFBLEdBQUFnMkMsR0FBQUQsR0FDQWxILEVBQUEvb0MsRUFBQWt3QyxFQUFBMXhDLFVBQUEyeEMsUUFBQWoyQyxFQVFBLE9BTEFrMkMsR0FBQXpMLE9BQUFvRSxFQUFBbUgsRUFBQTF4QyxVQUFBdEUsR0FHQWsyQyxFQUFBekwsT0FBQW9FLEVBQUE3dUMsR0FFQTZ1QyxFQXJCQSxHQUFBcUgsR0FBQXg0QyxFQUFBLElBQ0FvSSxFQUFBcEksRUFBQSxJQUNBczRDLEVBQUF0NEMsRUFBQSxJQUNBeTRDLEVBQUF6NEMsRUFBQSxJQXNCQTA0QyxFQUFBOTJCLEVBQUE2MkIsRUFHQUMsR0FBQUosUUFHQUksRUFBQS9HLE9BQUEsU0FBQWdILEdBQ0EsTUFBQS8yQixHQUFBNDJCLEVBQUFJLE1BQUFILEVBQUFFLEtBSUFELEVBQUFHLE9BQUE3NEMsRUFBQSxJQUNBMDRDLEVBQUFJLFlBQUE5NEMsRUFBQSxJQUNBMDRDLEVBQUFLLFNBQUEvNEMsRUFBQSxJQUdBMDRDLEVBQUFNLElBQUEsU0FBQUMsR0FDQSxNQUFBQyxTQUFBRixJQUFBQyxJQUVBUCxFQUFBUyxPQUFBbjVDLEVBQUEsSUFFQUksRUFBQUQsUUFBQXU0QyxFQUdBdDRDLEVBQUFELFFBQUFXLFFBQUE0M0MsR2pDd2xETSxTQUFVdDRDLEVBQVFELEVBQVNILEdrQzNvRGpDLFlBaUJBLFNBQUFzRixHQUFBd0QsR0FDQSx5QkFBQWhELEVBQUF2RixLQUFBdUksR0FTQSxRQUFBc3dDLEdBQUF0d0MsR0FDQSwrQkFBQWhELEVBQUF2RixLQUFBdUksR0FTQSxRQUFBdXdDLEdBQUF2d0MsR0FDQSx5QkFBQXd3QyxXQUFBeHdDLFlBQUF3d0MsVUFTQSxRQUFBQyxHQUFBendDLEdBQ0EsR0FBQW5FLEVBTUEsT0FKQUEsR0FEQSxtQkFBQTYwQywwQkFBQSxPQUNBQSxZQUFBQyxPQUFBM3dDLEdBRUEsR0FBQUEsRUFBQSxRQUFBQSxFQUFBNHdDLGlCQUFBRixhQVdBLFFBQUFHLEdBQUE3d0MsR0FDQSxzQkFBQUEsR0FTQSxRQUFBOHdDLEdBQUE5d0MsR0FDQSxzQkFBQUEsR0FTQSxRQUFBK3dDLEdBQUEvd0MsR0FDQSx5QkFBQUEsR0FTQSxRQUFBZ3RDLEdBQUFodEMsR0FDQSxjQUFBQSxHQUFBLGdCQUFBQSxHQVNBLFFBQUFneEMsR0FBQWh4QyxHQUNBLHdCQUFBaEQsRUFBQXZGLEtBQUF1SSxHQVNBLFFBQUFpeEMsR0FBQWp4QyxHQUNBLHdCQUFBaEQsRUFBQXZGLEtBQUF1SSxHQVNBLFFBQUFreEMsR0FBQWx4QyxHQUNBLHdCQUFBaEQsRUFBQXZGLEtBQUF1SSxHQVNBLFFBQUFteEMsR0FBQW54QyxHQUNBLDRCQUFBaEQsRUFBQXZGLEtBQUF1SSxHQVNBLFFBQUFveEMsR0FBQXB4QyxHQUNBLE1BQUFndEMsR0FBQWh0QyxJQUFBbXhDLEVBQUFueEMsRUFBQXF4QyxNQVNBLFFBQUFDLEdBQUF0eEMsR0FDQSx5QkFBQXV4QyxrQkFBQXZ4QyxZQUFBdXhDLGlCQVNBLFFBQUF0c0IsR0FBQXVzQixHQUNBLE1BQUFBLEdBQUEvMUMsUUFBQSxXQUFBQSxRQUFBLFdBZ0JBLFFBQUFnMkMsS0FDQSwwQkFBQUMsWUFBQSxnQkFBQUEsVUFBQUMsV0FJQSxtQkFBQWxuQyxTQUNBLG1CQUFBaFMsV0FnQkEsUUFBQW1HLEdBQUE5RyxFQUFBODVDLEdBRUEsVUFBQTk1QyxHQUFBLG1CQUFBQSxHQVVBLEdBTEEsZ0JBQUFBLEtBRUFBLE9BR0EwRSxFQUFBMUUsR0FFQSxPQUFBMEksR0FBQSxFQUFBM0YsRUFBQS9DLEVBQUFpQixPQUFtQ3lILEVBQUEzRixFQUFPMkYsSUFDMUNveEMsRUFBQW42QyxLQUFBLEtBQUFLLEVBQUEwSSxLQUFBMUksT0FJQSxRQUFBdUMsS0FBQXZDLEdBQ0ErRSxPQUFBaUIsVUFBQXRELGVBQUEvQyxLQUFBSyxFQUFBdUMsSUFDQXUzQyxFQUFBbjZDLEtBQUEsS0FBQUssRUFBQXVDLEtBQUF2QyxHQXVCQSxRQUFBZzRDLEtBRUEsUUFBQStCLEdBQUE3eEMsRUFBQTNGLEdBQ0EsZ0JBQUF3QixHQUFBeEIsSUFBQSxnQkFBQTJGLEdBQ0FuRSxFQUFBeEIsR0FBQXkxQyxFQUFBajBDLEVBQUF4QixHQUFBMkYsR0FFQW5FLEVBQUF4QixHQUFBMkYsRUFJQSxPQVRBbkUsTUFTQTJFLEVBQUEsRUFBQTNGLEVBQUEvQixVQUFBQyxPQUF1Q3lILEVBQUEzRixFQUFPMkYsSUFDOUM1QixFQUFBOUYsVUFBQTBILEdBQUFxeEMsRUFFQSxPQUFBaDJDLEdBV0EsUUFBQW9vQyxHQUFBcnJDLEVBQUFDLEVBQUEyeUMsR0FRQSxNQVBBNXNDLEdBQUEvRixFQUFBLFNBQUFtSCxFQUFBM0YsR0FDQW14QyxHQUFBLGtCQUFBeHJDLEdBQ0FwSCxFQUFBeUIsR0FBQWlGLEVBQUFVLEVBQUF3ckMsR0FFQTV5QyxFQUFBeUIsR0FBQTJGLElBR0FwSCxFQXBSQSxHQUFBMEcsR0FBQXBJLEVBQUEsSUFDQTQ2QyxFQUFBNTZDLEVBQUEsSUFNQThGLEVBQUFILE9BQUFpQixVQUFBZCxRQWdSQTFGLEdBQUFELFNBQ0FtRixVQUNBOHpDLGdCQUNBd0IsV0FDQXZCLGFBQ0FFLG9CQUNBSSxXQUNBQyxXQUNBOUQsV0FDQStELGNBQ0FDLFNBQ0FDLFNBQ0FDLFNBQ0FDLGFBQ0FDLFdBQ0FFLG9CQUNBRyx1QkFDQTd5QyxVQUNBa3hDLFFBQ0E3TCxTQUNBaGYsU2xDbXBETSxTQUFVM3RCLEVBQVFELEdtQ2g4RHhCLFlBRUFDLEdBQUFELFFBQUEsU0FBQXU2QyxFQUFBcEcsR0FDQSxrQkFFQSxPQURBRixHQUFBLEdBQUExd0MsT0FBQTlCLFVBQUFDLFFBQ0F5SCxFQUFBLEVBQW1CQSxFQUFBOHFDLEVBQUF2eUMsT0FBaUJ5SCxJQUNwQzhxQyxFQUFBOXFDLEdBQUExSCxVQUFBMEgsRUFFQSxPQUFBb3hDLEdBQUF6dUMsTUFBQXFvQyxFQUFBRixNbkN5OERNLFNBQVVoMEMsRUFBUUQsR29DcDhEeEIsUUFBQXk2QyxHQUFBaDZDLEdBQ0EsUUFBQUEsRUFBQXFHLGFBQUEsa0JBQUFyRyxHQUFBcUcsWUFBQTJ6QyxVQUFBaDZDLEVBQUFxRyxZQUFBMnpDLFNBQUFoNkMsR0FJQSxRQUFBaTZDLEdBQUFqNkMsR0FDQSx3QkFBQUEsR0FBQWs2QyxhQUFBLGtCQUFBbDZDLEdBQUE4SyxPQUFBa3ZDLEVBQUFoNkMsRUFBQThLLE1BQUE7Ozs7OztBQVZBdEwsRUFBQUQsUUFBQSxTQUFBUyxHQUNBLGFBQUFBLElBQUFnNkMsRUFBQWg2QyxJQUFBaTZDLEVBQUFqNkMsUUFBQW02QyxhcENrK0RNLFNBQVUzNkMsRUFBUUQsRUFBU0gsR3FDNStEakMsWUFZQSxTQUFBczRDLEdBQUFLLEdBQ0F2MkMsS0FBQXEyQyxTQUFBRSxFQUNBdjJDLEtBQUE0NEMsY0FDQXpDLFFBQUEsR0FBQTBDLEdBQ0E5QyxTQUFBLEdBQUE4QyxJQWRBLEdBQUF4QyxHQUFBejRDLEVBQUEsSUFDQXc0QyxFQUFBeDRDLEVBQUEsSUFDQWk3QyxFQUFBajdDLEVBQUEsSUFDQWs3QyxFQUFBbDdDLEVBQUEsR0FvQkFzNEMsR0FBQTF4QyxVQUFBMnhDLFFBQUEsU0FBQTRDLEdBR0EsZ0JBQUFBLEtBQ0FBLEVBQUEzQyxFQUFBSSxPQUNBNWUsSUFBQXA0QixVQUFBLElBQ0tBLFVBQUEsS0FHTHU1QyxFQUFBM0MsRUFBQUksTUFBQUgsR0FBa0MyQyxPQUFBLE9BQWNoNUMsS0FBQXEyQyxTQUFBMEMsR0FDaERBLEVBQUFDLE9BQUFELEVBQUFDLE9BQUEzdkMsYUFHQSxJQUFBNHZDLElBQUFILEVBQUFueUMsUUFDQXV5QyxFQUFBcEMsUUFBQXFDLFFBQUFKLEVBVUEsS0FSQS80QyxLQUFBNDRDLGFBQUF6QyxRQUFBN3dDLFFBQUEsU0FBQTh6QyxHQUNBSCxFQUFBSSxRQUFBRCxFQUFBRSxVQUFBRixFQUFBRyxZQUdBdjVDLEtBQUE0NEMsYUFBQTdDLFNBQUF6d0MsUUFBQSxTQUFBOHpDLEdBQ0FILEVBQUFyMkMsS0FBQXcyQyxFQUFBRSxVQUFBRixFQUFBRyxZQUdBTixFQUFBeDVDLFFBQ0F5NUMsSUFBQXpILEtBQUF3SCxFQUFBTyxRQUFBUCxFQUFBTyxRQUdBLE9BQUFOLElBSUE5QyxFQUFBOXdDLFNBQUEsMENBQUEwekMsR0FFQTlDLEVBQUExeEMsVUFBQXcwQyxHQUFBLFNBQUFwaEIsRUFBQW1oQixHQUNBLE1BQUEvNEMsTUFBQW0yQyxRQUFBQyxFQUFBSSxNQUFBdUMsT0FDQUMsU0FDQXBoQixZQUtBd2UsRUFBQTl3QyxTQUFBLCtCQUFBMHpDLEdBRUE5QyxFQUFBMXhDLFVBQUF3MEMsR0FBQSxTQUFBcGhCLEVBQUF0b0IsRUFBQXlwQyxHQUNBLE1BQUEvNEMsTUFBQW0yQyxRQUFBQyxFQUFBSSxNQUFBdUMsT0FDQUMsU0FDQXBoQixNQUNBdG9CLGFBS0F0UixFQUFBRCxRQUFBbTRDLEdyQ20vRE0sU0FBVWw0QyxFQUFRRCxFQUFTSCxJc0Nqa0VqQyxTQUFBNjdDLEdBQUEsWUFTQSxTQUFBQyxHQUFBQyxFQUFBcjJDLElBQ0E4eUMsRUFBQXFCLFlBQUFrQyxJQUFBdkQsRUFBQXFCLFlBQUFrQyxFQUFBLG1CQUNBQSxFQUFBLGdCQUFBcjJDLEdBSUEsUUFBQXMyQyxLQUNBLEdBQUFDLEVBUUEsT0FQQSxtQkFBQUMsZ0JBRUFELEVBQUFqOEMsRUFBQSxJQUNHLG1CQUFBNjdDLEtBRUhJLEVBQUFqOEMsRUFBQSxLQUVBaThDLEVBdEJBLEdBQUF6RCxHQUFBeDRDLEVBQUEsSUFDQW04QyxFQUFBbjhDLEVBQUEsSUFFQW84QyxHQUNBQyxlQUFBLHFDQXFCQTVELEdBQ0F3RCxRQUFBRCxJQUVBTSxrQkFBQSxTQUFBNXFDLEVBQUFxcUMsR0FFQSxNQURBSSxHQUFBSixFQUFBLGdCQUNBdkQsRUFBQWEsV0FBQTNuQyxJQUNBOG1DLEVBQUFZLGNBQUExbkMsSUFDQThtQyxFQUFBb0MsU0FBQWxwQyxJQUNBOG1DLEVBQUEwQixTQUFBeG9DLElBQ0E4bUMsRUFBQXVCLE9BQUFyb0MsSUFDQThtQyxFQUFBd0IsT0FBQXRvQyxHQUVBQSxFQUVBOG1DLEVBQUFlLGtCQUFBN25DLEdBQ0FBLEVBQUFnb0MsT0FFQWxCLEVBQUE0QixrQkFBQTFvQyxJQUNBb3FDLEVBQUFDLEVBQUEsbURBQ0FycUMsRUFBQTVMLFlBRUEweUMsRUFBQTFDLFNBQUFwa0MsSUFDQW9xQyxFQUFBQyxFQUFBLGtDQUNBelAsS0FBQUMsVUFBQTc2QixJQUVBQSxJQUdBNnFDLG1CQUFBLFNBQUE3cUMsR0FFQSxtQkFBQUEsR0FDQSxJQUNBQSxFQUFBNDZCLEtBQUFrUSxNQUFBOXFDLEdBQ08sTUFBQTVQLElBRVAsTUFBQTRQLEtBT0ErVyxRQUFBLEVBRUFnMEIsZUFBQSxhQUNBQyxlQUFBLGVBRUFDLGtCQUFBLEVBRUFDLGVBQUEsU0FBQUMsR0FDQSxNQUFBQSxJQUFBLEtBQUFBLEVBQUEsS0FJQXBFLEdBQUFzRCxTQUNBZSxRQUNBQyxPQUFBLHNDQUlBdkUsRUFBQTl3QyxTQUFBLGdDQUFBMHpDLEdBQ0EzQyxFQUFBc0QsUUFBQVgsUUFHQTVDLEVBQUE5d0MsU0FBQSwrQkFBQTB6QyxHQUNBM0MsRUFBQXNELFFBQUFYLEdBQUE1QyxFQUFBSSxNQUFBd0QsS0FHQWg4QyxFQUFBRCxRQUFBczRDLEl0Q3FrRThCbDRDLEtBQUtKLEVBQVNILEVBQW9CLE1BSTFELFNBQVVJLEVBQVFELEd1QzdwRXhCLFFBQUE2OEMsS0FDQSxTQUFBaDdDLE9BQUEsbUNBRUEsUUFBQWk3QyxLQUNBLFNBQUFqN0MsT0FBQSxxQ0FzQkEsUUFBQWs3QyxHQUFBQyxHQUNBLEdBQUFDLElBQUFoVyxXQUVBLE1BQUFBLFlBQUErVixFQUFBLEVBR0EsS0FBQUMsSUFBQUosSUFBQUksSUFBQWhXLFdBRUEsTUFEQWdXLEdBQUFoVyxXQUNBQSxXQUFBK1YsRUFBQSxFQUVBLEtBRUEsTUFBQUMsR0FBQUQsRUFBQSxHQUNLLE1BQUFyN0MsR0FDTCxJQUVBLE1BQUFzN0MsR0FBQTc4QyxLQUFBLEtBQUE0OEMsRUFBQSxHQUNTLE1BQUFyN0MsR0FFVCxNQUFBczdDLEdBQUE3OEMsS0FBQTZCLEtBQUErNkMsRUFBQSxLQU1BLFFBQUFFLEdBQUFDLEdBQ0EsR0FBQUMsSUFBQWpXLGFBRUEsTUFBQUEsY0FBQWdXLEVBR0EsS0FBQUMsSUFBQU4sSUFBQU0sSUFBQWpXLGFBRUEsTUFEQWlXLEdBQUFqVyxhQUNBQSxhQUFBZ1csRUFFQSxLQUVBLE1BQUFDLEdBQUFELEdBQ0ssTUFBQXg3QyxHQUNMLElBRUEsTUFBQXk3QyxHQUFBaDlDLEtBQUEsS0FBQSs4QyxHQUNTLE1BQUF4N0MsR0FHVCxNQUFBeTdDLEdBQUFoOUMsS0FBQTZCLEtBQUFrN0MsS0FZQSxRQUFBRSxLQUNBQyxHQUFBQyxJQUdBRCxHQUFBLEVBQ0FDLEVBQUE3N0MsT0FDQTg3QyxFQUFBRCxFQUFBaHdDLE9BQUFpd0MsR0FFQUMsR0FBQSxFQUVBRCxFQUFBOTdDLFFBQ0FnOEMsS0FJQSxRQUFBQSxLQUNBLElBQUFKLEVBQUEsQ0FHQSxHQUFBaDFCLEdBQUF5MEIsRUFBQU0sRUFDQUMsSUFBQSxDQUdBLEtBREEsR0FBQUssR0FBQUgsRUFBQTk3QyxPQUNBaThDLEdBQUEsQ0FHQSxJQUZBSixFQUFBQyxFQUNBQSxPQUNBQyxFQUFBRSxHQUNBSixHQUNBQSxFQUFBRSxHQUFBRyxLQUdBSCxJQUFBLEVBQ0FFLEVBQUFILEVBQUE5N0MsT0FFQTY3QyxFQUFBLEtBQ0FELEdBQUEsRUFDQUosRUFBQTUwQixJQWlCQSxRQUFBdTFCLEdBQUFiLEVBQUFjLEdBQ0E3N0MsS0FBQSs2QyxNQUNBLzZDLEtBQUE2N0MsUUFZQSxRQUFBQyxNQWhLQSxHQU9BZCxHQUNBRyxFQVJBMUIsRUFBQXo3QyxFQUFBRCxZQWdCQSxXQUNBLElBRUFpOUMsRUFEQSxrQkFBQWhXLFlBQ0FBLFdBRUE0VixFQUVLLE1BQUFsN0MsR0FDTHM3QyxFQUFBSixFQUVBLElBRUFPLEVBREEsa0JBQUFqVyxjQUNBQSxhQUVBMlYsRUFFSyxNQUFBbjdDLEdBQ0x5N0MsRUFBQU4sS0F1REEsSUFFQVMsR0FGQUMsS0FDQUYsR0FBQSxFQUVBRyxHQUFBLENBeUNBL0IsR0FBQXNDLFNBQUEsU0FBQWhCLEdBQ0EsR0FBQS9JLEdBQUEsR0FBQTF3QyxPQUFBOUIsVUFBQUMsT0FBQSxFQUNBLElBQUFELFVBQUFDLE9BQUEsRUFDQSxPQUFBeUgsR0FBQSxFQUF1QkEsRUFBQTFILFVBQUFDLE9BQXNCeUgsSUFDN0M4cUMsRUFBQTlxQyxFQUFBLEdBQUExSCxVQUFBMEgsRUFHQXEwQyxHQUFBMzRDLEtBQUEsR0FBQWc1QyxHQUFBYixFQUFBL0ksSUFDQSxJQUFBdUosRUFBQTk3QyxRQUFBNDdDLEdBQ0FQLEVBQUFXLElBU0FHLEVBQUFwM0MsVUFBQW0zQyxJQUFBLFdBQ0EzN0MsS0FBQSs2QyxJQUFBbHhDLE1BQUEsS0FBQTdKLEtBQUE2N0MsUUFFQXBDLEVBQUF1QyxNQUFBLFVBQ0F2QyxFQUFBd0MsU0FBQSxFQUNBeEMsRUFBQXlDLE9BQ0F6QyxFQUFBMEMsUUFDQTFDLEVBQUF2ekMsUUFBQSxHQUNBdXpDLEVBQUEyQyxZQUlBM0MsRUFBQTRDLEdBQUFQLEVBQ0FyQyxFQUFBNkMsWUFBQVIsRUFDQXJDLEVBQUE4QyxLQUFBVCxFQUNBckMsRUFBQStDLElBQUFWLEVBQ0FyQyxFQUFBZ0QsZUFBQVgsRUFDQXJDLEVBQUFpRCxtQkFBQVosRUFDQXJDLEVBQUFrRCxLQUFBYixFQUNBckMsRUFBQW1ELGdCQUFBZCxFQUNBckMsRUFBQW9ELG9CQUFBZixFQUVBckMsRUFBQXFELFVBQUEsU0FBQWo5QyxHQUFxQyxVQUVyQzQ1QyxFQUFBc0QsUUFBQSxTQUFBbDlDLEdBQ0EsU0FBQUQsT0FBQSxxQ0FHQTY1QyxFQUFBdUQsSUFBQSxXQUEyQixXQUMzQnZELEVBQUF3RCxNQUFBLFNBQUFDLEdBQ0EsU0FBQXQ5QyxPQUFBLG1DQUVBNjVDLEVBQUEwRCxNQUFBLFdBQTRCLFd2QytxRXRCLFNBQVVuL0MsRUFBUUQsRUFBU0gsR3dDdDJFakMsWUFFQSxJQUFBdzRDLEdBQUF4NEMsRUFBQSxHQUVBSSxHQUFBRCxRQUFBLFNBQUE0N0MsRUFBQXlELEdBQ0FoSCxFQUFBOXdDLFFBQUFxMEMsRUFBQSxTQUFBcjJDLEVBQUF6RCxHQUNBQSxJQUFBdTlDLEdBQUF2OUMsRUFBQTRKLGdCQUFBMnpDLEVBQUEzekMsZ0JBQ0Frd0MsRUFBQXlELEdBQUE5NUMsUUFDQXEyQyxHQUFBOTVDLFF4Q2czRU0sU0FBVTdCLEVBQVFELEVBQVNILEd5Q3gzRWpDLFlBRUEsSUFBQXc0QyxHQUFBeDRDLEVBQUEsSUFDQXkvQyxFQUFBei9DLEVBQUEsSUFDQTAvQyxFQUFBMS9DLEVBQUEsSUFDQTIvQyxFQUFBMy9DLEVBQUEsSUFDQTQvQyxFQUFBNS9DLEVBQUEsSUFDQTYvQyxFQUFBNy9DLEVBQUEsSUFDQTgvQyxFQUFBLG1CQUFBdnNDLGdCQUFBdXNDLE1BQUF2c0MsT0FBQXVzQyxLQUFBMTNDLEtBQUFtTCxTQUFBdlQsRUFBQSxHQUVBSSxHQUFBRCxRQUFBLFNBQUFnN0MsR0FDQSxVQUFBakMsU0FBQSxTQUFBcUMsRUFBQXdFLEdBQ0EsR0FBQUMsR0FBQTdFLEVBQUF6cEMsS0FDQXV1QyxFQUFBOUUsRUFBQVksT0FFQXZELEdBQUFhLFdBQUEyRyxVQUNBQyxHQUFBLGVBR0EsSUFBQTFILEdBQUEsR0FBQTJELGdCQUNBZ0UsRUFBQSxxQkFDQUMsR0FBQSxDQWlCQSxJQVhBLG1CQUFBNXNDLFVBQ0FBLE9BQUE2c0MsZ0JBQUEsbUJBQUE3SCxJQUNBcUgsRUFBQXpFLEVBQUFuaEIsT0FDQXVlLEVBQUEsR0FBQWhsQyxRQUFBNnNDLGVBQ0FGLEVBQUEsU0FDQUMsR0FBQSxFQUNBNUgsRUFBQThILFdBQUEsYUFDQTlILEVBQUErSCxVQUFBLGNBSUFuRixFQUFBb0YsS0FBQSxDQUNBLEdBQUFDLEdBQUFyRixFQUFBb0YsS0FBQUMsVUFBQSxHQUNBOW1CLEVBQUF5aEIsRUFBQW9GLEtBQUE3bUIsVUFBQSxFQUNBdW1CLEdBQUFRLGNBQUEsU0FBQVgsRUFBQVUsRUFBQSxJQUFBOW1CLEdBK0RBLEdBNURBNmUsRUFBQTdsQixLQUFBeW9CLEVBQUFDLE9BQUF2dkMsY0FBQTZ6QyxFQUFBdkUsRUFBQW5oQixJQUFBbWhCLEVBQUFsRCxPQUFBa0QsRUFBQXVGLG1CQUFBLEdBR0FuSSxFQUFBOXZCLFFBQUEweUIsRUFBQTF5QixRQUdBOHZCLEVBQUEySCxHQUFBLFdBQ0EsR0FBQTNILElBQUEsSUFBQUEsRUFBQW9JLFlBQUFSLEtBUUEsSUFBQTVILEVBQUFzRSxRQUFBdEUsRUFBQXFJLGFBQUEsSUFBQXJJLEVBQUFxSSxZQUFBcDBDLFFBQUEsV0FLQSxHQUFBcTBDLEdBQUEseUJBQUF0SSxHQUFBb0gsRUFBQXBILEVBQUF1SSx5QkFBQSxLQUNBQyxFQUFBNUYsRUFBQTZGLGNBQUEsU0FBQTdGLEVBQUE2RixhQUFBekksRUFBQUosU0FBQUksRUFBQTBJLGFBQ0E5SSxHQUNBem1DLEtBQUFxdkMsRUFFQWxFLE9BQUEsT0FBQXRFLEVBQUFzRSxPQUFBLElBQUF0RSxFQUFBc0UsT0FDQXFFLFdBQUEsT0FBQTNJLEVBQUFzRSxPQUFBLGFBQUF0RSxFQUFBMkksV0FDQW5GLFFBQUE4RSxFQUNBMUYsU0FDQTVDLFVBR0FrSCxHQUFBbEUsRUFBQXdFLEVBQUE1SCxHQUdBSSxFQUFBLE9BSUFBLEVBQUE0SSxRQUFBLFdBR0FwQixFQUFBRixFQUFBLGdCQUFBMUUsRUFBQSxLQUFBNUMsSUFHQUEsRUFBQSxNQUlBQSxFQUFBK0gsVUFBQSxXQUNBUCxFQUFBRixFQUFBLGNBQUExRSxFQUFBMXlCLFFBQUEsY0FBQTB5QixFQUFBLGVBQ0E1QyxJQUdBQSxFQUFBLE1BTUFDLEVBQUErQix1QkFBQSxDQUNBLEdBQUE2RyxHQUFBcGhELEVBQUEsSUFHQXFoRCxHQUFBbEcsRUFBQW1HLGlCQUFBMUIsRUFBQXpFLEVBQUFuaEIsT0FBQW1oQixFQUFBc0IsZUFDQTJFLEVBQUFHLEtBQUFwRyxFQUFBc0IsZ0JBQ0ExekMsTUFFQXM0QyxLQUNBcEIsRUFBQTlFLEVBQUF1QixnQkFBQTJFLEdBdUJBLEdBbEJBLG9CQUFBOUksSUFDQUMsRUFBQTl3QyxRQUFBdTRDLEVBQUEsU0FBQW4zQyxFQUFBM0YsR0FDQSxtQkFBQTY4QyxJQUFBLGlCQUFBNzhDLEVBQUFzSSxvQkFFQXcwQyxHQUFBOThDLEdBR0FvMUMsRUFBQWlKLGlCQUFBcitDLEVBQUEyRixLQU1BcXlDLEVBQUFtRyxrQkFDQS9JLEVBQUErSSxpQkFBQSxHQUlBbkcsRUFBQTZGLGFBQ0EsSUFDQXpJLEVBQUF5SSxhQUFBN0YsRUFBQTZGLGFBQ08sTUFBQWwvQyxHQUdQLFlBQUFxNUMsRUFBQTZGLGFBQ0EsS0FBQWwvQyxHQU1BLGtCQUFBcTVDLEdBQUFzRyxvQkFDQWxKLEVBQUF2UixpQkFBQSxXQUFBbVUsRUFBQXNHLG9CQUlBLGtCQUFBdEcsR0FBQXVHLGtCQUFBbkosRUFBQW9KLFFBQ0FwSixFQUFBb0osT0FBQTNhLGlCQUFBLFdBQUFtVSxFQUFBdUcsa0JBR0F2RyxFQUFBeUcsYUFFQXpHLEVBQUF5RyxZQUFBdEcsUUFBQXpILEtBQUEsU0FBQTJCLEdBQ0ErQyxJQUlBQSxFQUFBc0osUUFDQTlCLEVBQUF2SyxHQUVBK0MsRUFBQSxRQUlBeHZDLFNBQUFpM0MsSUFDQUEsRUFBQSxNQUlBekgsRUFBQXVKLEtBQUE5QixPekNpNEVNLFNBQVU1L0MsRUFBUUQsRUFBU0gsRzBDbGpGakMsWUFFQSxJQUFBNi9DLEdBQUE3L0MsRUFBQSxHQVNBSSxHQUFBRCxRQUFBLFNBQUFvN0MsRUFBQXdFLEVBQUE1SCxHQUNBLEdBQUF5RSxHQUFBekUsRUFBQWdELE9BQUF5QixjQUVBekUsR0FBQTBFLFFBQUFELE1BQUF6RSxFQUFBMEUsUUFHQWtELEVBQUFGLEVBQ0EsbUNBQUExSCxFQUFBMEUsT0FDQTFFLEVBQUFnRCxPQUNBLEtBQ0FoRCxFQUFBSSxRQUNBSixJQVBBb0QsRUFBQXBELEsxQ21rRk0sU0FBVS8zQyxFQUFRRCxFQUFTSCxHMkNsbEZqQyxZQUVBLElBQUEraEQsR0FBQS9oRCxFQUFBLEdBWUFJLEdBQUFELFFBQUEsU0FBQTZoRCxFQUFBN0csRUFBQThHLEVBQUExSixFQUFBSixHQUNBLEdBQUFsdEMsR0FBQSxHQUFBakosT0FBQWdnRCxFQUNBLE9BQUFELEdBQUE5MkMsRUFBQWt3QyxFQUFBOEcsRUFBQTFKLEVBQUFKLEszQzBsRk0sU0FBVS8zQyxFQUFRRCxHNEMxbUZ4QixZQVlBQyxHQUFBRCxRQUFBLFNBQUE4SyxFQUFBa3dDLEVBQUE4RyxFQUFBMUosRUFBQUosR0FPQSxNQU5BbHRDLEdBQUFrd0MsU0FDQThHLElBQ0FoM0MsRUFBQWczQyxRQUVBaDNDLEVBQUFzdEMsVUFDQXR0QyxFQUFBa3RDLFdBQ0FsdEMsSTVDa25GTSxTQUFVN0ssRUFBUUQsRUFBU0gsRzZDcm9GakMsWUFJQSxTQUFBa2lELEdBQUFwNUMsR0FDQSxNQUFBL0csb0JBQUErRyxHQUNBdkUsUUFBQSxhQUNBQSxRQUFBLGFBQ0FBLFFBQUEsWUFDQUEsUUFBQSxhQUNBQSxRQUFBLFlBQ0FBLFFBQUEsYUFDQUEsUUFBQSxhQVZBLEdBQUFpMEMsR0FBQXg0QyxFQUFBLEdBb0JBSSxHQUFBRCxRQUFBLFNBQUE2NUIsRUFBQWllLEVBQUF5SSxHQUVBLElBQUF6SSxFQUNBLE1BQUFqZSxFQUdBLElBQUFtb0IsRUFDQSxJQUFBekIsRUFDQXlCLEVBQUF6QixFQUFBekksT0FDRyxJQUFBTyxFQUFBNEIsa0JBQUFuQyxHQUNIa0ssRUFBQWxLLEVBQUFueUMsZUFDRyxDQUNILEdBQUFzOEMsS0FFQTVKLEdBQUE5d0MsUUFBQXV3QyxFQUFBLFNBQUFudkMsRUFBQTNGLEdBQ0EsT0FBQTJGLEdBQUEsbUJBQUFBLEtBSUEwdkMsRUFBQWx6QyxRQUFBd0QsR0FDQTNGLEdBQUEsS0FFQTJGLE1BR0EwdkMsRUFBQTl3QyxRQUFBb0IsRUFBQSxTQUFBMUQsR0FDQW96QyxFQUFBc0IsT0FBQTEwQyxHQUNBQSxJQUFBaTlDLGNBQ1M3SixFQUFBMUMsU0FBQTF3QyxLQUNUQSxFQUFBa25DLEtBQUFDLFVBQUFubkMsSUFFQWc5QyxFQUFBcDlDLEtBQUFrOUMsRUFBQS8rQyxHQUFBLElBQUErK0MsRUFBQTk4QyxTQUlBKzhDLEVBQUFDLEVBQUF2OEMsS0FBQSxLQU9BLE1BSkFzOEMsS0FDQW5vQixNQUFBeHRCLFFBQUEsbUJBQUEyMUMsR0FHQW5vQixJN0M2b0ZNLFNBQVU1NUIsRUFBUUQsRUFBU0gsRzhDN3NGakMsWUFFQSxJQUFBdzRDLEdBQUF4NEMsRUFBQSxJQUlBc2lELEdBQ0EsNkRBQ0Esa0VBQ0EsZ0VBQ0EscUNBZ0JBbGlELEdBQUFELFFBQUEsU0FBQTQ3QyxHQUNBLEdBQ0E1NEMsR0FDQTJGLEVBQ0FRLEVBSEFpNUMsSUFLQSxPQUFBeEcsSUFFQXZELEVBQUE5d0MsUUFBQXEwQyxFQUFBcnlDLE1BQUEsZUFBQTg0QyxHQUtBLEdBSkFsNUMsRUFBQWs1QyxFQUFBaDJDLFFBQUEsS0FDQXJKLEVBQUFxMUMsRUFBQXpxQixLQUFBeTBCLEVBQUFDLE9BQUEsRUFBQW41QyxJQUFBbUMsY0FDQTNDLEVBQUEwdkMsRUFBQXpxQixLQUFBeTBCLEVBQUFDLE9BQUFuNUMsRUFBQSxJQUVBbkcsRUFBQSxDQUNBLEdBQUFvL0MsRUFBQXAvQyxJQUFBbS9DLEVBQUE5MUMsUUFBQXJKLElBQUEsRUFDQSxNQUVBLGdCQUFBQSxFQUNBby9DLEVBQUFwL0MsSUFBQW8vQyxFQUFBcC9DLEdBQUFvL0MsRUFBQXAvQyxPQUFBdUssUUFBQTVFLElBRUF5NUMsRUFBQXAvQyxHQUFBby9DLEVBQUFwL0MsR0FBQW8vQyxFQUFBcC9DLEdBQUEsS0FBQTJGLE9BS0F5NUMsR0FuQmlCQSxJOUN3dUZYLFNBQVVuaUQsRUFBUUQsRUFBU0gsRytDeHdGakMsWUFFQSxJQUFBdzRDLEdBQUF4NEMsRUFBQSxHQUVBSSxHQUFBRCxRQUNBcTRDLEVBQUErQix1QkFJQSxXQVdBLFFBQUFtSSxHQUFBMW9CLEdBQ0EsR0FBQTJvQixHQUFBM29CLENBV0EsT0FUQTRvQixLQUVBQyxFQUFBbHZDLGFBQUEsT0FBQWd2QyxHQUNBQSxFQUFBRSxFQUFBRixNQUdBRSxFQUFBbHZDLGFBQUEsT0FBQWd2QyxJQUlBQSxLQUFBRSxFQUFBRixLQUNBRyxTQUFBRCxFQUFBQyxTQUFBRCxFQUFBQyxTQUFBditDLFFBQUEsWUFDQXcrQyxLQUFBRixFQUFBRSxLQUNBbnBCLE9BQUFpcEIsRUFBQWpwQixPQUFBaXBCLEVBQUFqcEIsT0FBQXIxQixRQUFBLGFBQ0F5K0MsS0FBQUgsRUFBQUcsS0FBQUgsRUFBQUcsS0FBQXorQyxRQUFBLFlBQ0EwK0MsU0FBQUosRUFBQUksU0FDQUMsS0FBQUwsRUFBQUssS0FDQUMsU0FBQSxNQUFBTixFQUFBTSxTQUFBMVksT0FBQSxHQUNBb1ksRUFBQU0sU0FDQSxJQUFBTixFQUFBTSxVQWhDQSxHQUVBQyxHQUZBUixFQUFBLGtCQUFBaDRCLEtBQUE0dkIsVUFBQTZJLFdBQ0FSLEVBQUF0aEQsU0FBQUQsY0FBQSxJQTJDQSxPQVJBOGhELEdBQUFWLEVBQUFudkMsT0FBQTh3QixTQUFBc2UsTUFRQSxTQUFBVyxHQUNBLEdBQUFmLEdBQUEvSixFQUFBbUIsU0FBQTJKLEdBQUFaLEVBQUFZLElBQ0EsT0FBQWYsR0FBQU8sV0FBQU0sRUFBQU4sVUFDQVAsRUFBQVEsT0FBQUssRUFBQUwsU0FLQSxXQUNBLGtCQUNBLGMvQ2t4Rk0sU0FBVTNpRCxFQUFRRCxHZ0RsMUZ4QixZQU1BLFNBQUEwQyxLQUNBVCxLQUFBNC9DLFFBQUEsdUNBTUEsUUFBQWxDLEdBQUEzVSxHQUdBLElBRUEsR0FBQW9ZLEdBQUFocEMsRUFKQSsvQixFQUFBbnhDLE9BQUFnaUMsR0FDQXFZLEVBQUEsR0FHQUMsRUFBQSxFQUFBaDhDLEVBQUFpOEMsRUFJQXBKLEVBQUE3UCxPQUFBLEVBQUFnWixLQUFBaDhDLEVBQUEsSUFBQWc4QyxFQUFBLEdBRUFELEdBQUEvN0MsRUFBQWdqQyxPQUFBLEdBQUE4WSxHQUFBLEVBQUFFLEVBQUEsS0FDQSxDQUVBLEdBREFscEMsRUFBQSsvQixFQUFBcUosV0FBQUYsR0FBQSxLQUNBbHBDLEVBQUEsSUFDQSxTQUFBMVgsRUFFQTBnRCxNQUFBLEVBQUFocEMsRUFFQSxNQUFBaXBDLEdBNUJBLEdBQUFFLEdBQUEsbUVBS0E3Z0QsR0FBQStELFVBQUEsR0FBQTVFLE9BQ0FhLEVBQUErRCxVQUFBcTdDLEtBQUEsRUFDQXAvQyxFQUFBK0QsVUFBQTNFLEtBQUEsd0JBd0JBN0IsRUFBQUQsUUFBQTIvQyxHaER5MUZNLFNBQVUxL0MsRUFBUUQsRUFBU0gsR2lENTNGakMsWUFFQSxJQUFBdzRDLEdBQUF4NEMsRUFBQSxHQUVBSSxHQUFBRCxRQUNBcTRDLEVBQUErQix1QkFHQSxXQUNBLE9BQ0FxSixNQUFBLFNBQUEzaEQsRUFBQXlELEVBQUFtK0MsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBQyxLQUNBQSxHQUFBai9DLEtBQUEvQyxFQUFBLElBQUFGLG1CQUFBMkQsSUFFQTh5QyxFQUFBb0IsU0FBQWlLLElBQ0FJLEVBQUFqL0MsS0FBQSxjQUFBd3lCLE1BQUFxc0IsR0FBQUssZUFHQTFMLEVBQUFtQixTQUFBbUssSUFDQUcsRUFBQWovQyxLQUFBLFFBQUE4K0MsR0FHQXRMLEVBQUFtQixTQUFBb0ssSUFDQUUsRUFBQWovQyxLQUFBLFVBQUErK0MsR0FHQUMsS0FBQSxHQUNBQyxFQUFBai9DLEtBQUEsVUFHQXpELFNBQUEwaUQsU0FBQXArQyxLQUFBLE9BR0EwN0MsS0FBQSxTQUFBdC9DLEdBQ0EsR0FBQWtpRCxHQUFBNWlELFNBQUEwaUQsT0FBQUUsTUFBQSxHQUFBQyxRQUFBLGFBQTBEbmlELEVBQUEsYUFDMUQsT0FBQWtpRCxHQUFBRSxtQkFBQUYsRUFBQSxVQUdBclUsT0FBQSxTQUFBN3RDLEdBQ0FHLEtBQUF3aEQsTUFBQTNoRCxFQUFBLEdBQUF1MUIsS0FBQXRPLE1BQUEsWUFNQSxXQUNBLE9BQ0EwNkIsTUFBQSxhQUNBckMsS0FBQSxXQUE2QixhQUM3QnpSLE9BQUEsa0JqRHM0Rk0sU0FBVTF2QyxFQUFRRCxFQUFTSCxHa0R2N0ZqQyxZQUlBLFNBQUFpN0MsS0FDQTc0QyxLQUFBa2lELFlBSEEsR0FBQTlMLEdBQUF4NEMsRUFBQSxHQWNBaTdDLEdBQUFyMEMsVUFBQTI5QyxJQUFBLFNBQUE3SSxFQUFBQyxHQUtBLE1BSkF2NUMsTUFBQWtpRCxTQUFBdC9DLE1BQ0EwMkMsWUFDQUMsYUFFQXY1QyxLQUFBa2lELFNBQUF6aUQsT0FBQSxHQVFBbzVDLEVBQUFyMEMsVUFBQTQ5QyxNQUFBLFNBQUFua0QsR0FDQStCLEtBQUFraUQsU0FBQWprRCxLQUNBK0IsS0FBQWtpRCxTQUFBamtELEdBQUEsT0FZQTQ2QyxFQUFBcjBDLFVBQUFjLFFBQUEsU0FBQWd6QyxHQUNBbEMsRUFBQTl3QyxRQUFBdEYsS0FBQWtpRCxTQUFBLFNBQUE3Z0QsR0FDQSxPQUFBQSxHQUNBaTNDLEVBQUFqM0MsTUFLQXJELEVBQUFELFFBQUE4NkMsR2xEODdGTSxTQUFVNzZDLEVBQVFELEVBQVNILEdtRGovRmpDLFlBWUEsU0FBQXlrRCxHQUFBdEosR0FDQUEsRUFBQXlHLGFBQ0F6RyxFQUFBeUcsWUFBQThDLG1CQVpBLEdBQUFsTSxHQUFBeDRDLEVBQUEsSUFDQTJrRCxFQUFBM2tELEVBQUEsSUFDQSs0QyxFQUFBLzRDLEVBQUEsSUFDQXk0QyxFQUFBejRDLEVBQUEsSUFDQTRrRCxFQUFBNWtELEVBQUEsSUFDQTZrRCxFQUFBN2tELEVBQUEsR0FpQkFJLEdBQUFELFFBQUEsU0FBQWc3QyxHQUNBc0osRUFBQXRKLEdBR0FBLEVBQUEySixVQUFBRixFQUFBekosRUFBQW5oQixPQUNBbWhCLEVBQUFuaEIsSUFBQTZxQixFQUFBMUosRUFBQTJKLFFBQUEzSixFQUFBbmhCLE1BSUFtaEIsRUFBQVksUUFBQVosRUFBQVksWUFHQVosRUFBQXpwQyxLQUFBaXpDLEVBQ0F4SixFQUFBenBDLEtBQ0F5cEMsRUFBQVksUUFDQVosRUFBQW1CLGtCQUlBbkIsRUFBQVksUUFBQXZELEVBQUFJLE1BQ0F1QyxFQUFBWSxRQUFBZSxXQUNBM0IsRUFBQVksUUFBQVosRUFBQUMsWUFDQUQsRUFBQVksYUFHQXZELEVBQUE5d0MsU0FDQSxxREFDQSxTQUFBMHpDLFNBQ0FELEdBQUFZLFFBQUFYLElBSUEsSUFBQWEsR0FBQWQsRUFBQWMsU0FBQXhELEVBQUF3RCxPQUVBLE9BQUFBLEdBQUFkLEdBQUF0SCxLQUFBLFNBQUFzRSxHQVVBLE1BVEFzTSxHQUFBdEosR0FHQWhELEVBQUF6bUMsS0FBQWl6QyxFQUNBeE0sRUFBQXptQyxLQUNBeW1DLEVBQUE0RCxRQUNBWixFQUFBb0IsbUJBR0FwRSxHQUNHLFNBQUE0TSxHQWNILE1BYkFoTSxHQUFBZ00sS0FDQU4sRUFBQXRKLEdBR0E0SixLQUFBNU0sV0FDQTRNLEVBQUE1TSxTQUFBem1DLEtBQUFpekMsRUFDQUksRUFBQTVNLFNBQUF6bUMsS0FDQXF6QyxFQUFBNU0sU0FBQTRELFFBQ0FaLEVBQUFvQixxQkFLQXJELFFBQUE2RyxPQUFBZ0YsT25EMC9GTSxTQUFVM2tELEVBQVFELEVBQVNILEdvRDdrR2pDLFlBRUEsSUFBQXc0QyxHQUFBeDRDLEVBQUEsR0FVQUksR0FBQUQsUUFBQSxTQUFBdVIsRUFBQXFxQyxFQUFBaUosR0FNQSxNQUpBeE0sR0FBQTl3QyxRQUFBczlDLEVBQUEsU0FBQXRLLEdBQ0FocEMsRUFBQWdwQyxFQUFBaHBDLEVBQUFxcUMsS0FHQXJxQyxJcERxbEdNLFNBQVV0UixFQUFRRCxHcUR2bUd4QixZQUVBQyxHQUFBRCxRQUFBLFNBQUF1RixHQUNBLFNBQUFBLE1BQUF1L0MsY3JEK21HTSxTQUFVN2tELEVBQVFELEdzRGxuR3hCLFlBUUFDLEdBQUFELFFBQUEsU0FBQTY1QixHQUlBLHNDQUFBcFAsS0FBQW9QLEt0RDBuR00sU0FBVTU1QixFQUFRRCxHdUR0b0d4QixZQVNBQyxHQUFBRCxRQUFBLFNBQUEya0QsRUFBQUksR0FDQSxNQUFBQSxHQUNBSixFQUFBdmdELFFBQUEsZUFBQTJnRCxFQUFBM2dELFFBQUEsV0FDQXVnRCxJdkQ4b0dNLFNBQVUxa0QsRUFBUUQsR3dEMXBHeEIsWUFRQSxTQUFBMDRDLEdBQUFtSixHQUNBNS9DLEtBQUE0L0MsVUFHQW5KLEVBQUFqeUMsVUFBQWQsU0FBQSxXQUNBLGdCQUFBMUQsS0FBQTQvQyxRQUFBLEtBQUE1L0MsS0FBQTQvQyxRQUFBLEtBR0FuSixFQUFBanlDLFVBQUFxK0MsWUFBQSxFQUVBN2tELEVBQUFELFFBQUEwNEMsR3hEaXFHTSxTQUFVejRDLEVBQVFELEVBQVNILEd5RG5yR2pDLFlBVUEsU0FBQTg0QyxHQUFBcU0sR0FDQSxxQkFBQUEsR0FDQSxTQUFBbjhDLFdBQUEsK0JBR0EsSUFBQW84QyxFQUNBaGpELE1BQUFrNUMsUUFBQSxHQUFBcEMsU0FBQSxTQUFBcUMsR0FDQTZKLEVBQUE3SixHQUdBLElBQUE4SixHQUFBampELElBQ0EraUQsR0FBQSxTQUFBbkQsR0FDQXFELEVBQUFOLFNBS0FNLEVBQUFOLE9BQUEsR0FBQWxNLEdBQUFtSixHQUNBb0QsRUFBQUMsRUFBQU4sV0ExQkEsR0FBQWxNLEdBQUE3NEMsRUFBQSxHQWlDQTg0QyxHQUFBbHlDLFVBQUE4OUMsaUJBQUEsV0FDQSxHQUFBdGlELEtBQUEyaUQsT0FDQSxLQUFBM2lELE1BQUEyaUQsUUFRQWpNLEVBQUE3dUMsT0FBQSxXQUNBLEdBQUF1ckMsR0FDQTZQLEVBQUEsR0FBQXZNLEdBQUEsU0FBQXI0QyxHQUNBKzBDLEVBQUEvMEMsR0FFQSxRQUNBNGtELFFBQ0E3UCxXQUlBcDFDLEVBQUFELFFBQUEyNEMsR3pEMHJHTSxTQUFVMTRDLEVBQVFELEcwRGx2R3hCLFlBc0JBQyxHQUFBRCxRQUFBLFNBQUEyZSxHQUNBLGdCQUFBd21DLEdBQ0EsTUFBQXhtQyxHQUFBN1MsTUFBQSxLQUFBcTVDLE0xRDJ2R00sU0FBVWxsRCxFQUFRRCxFQUFTSCxHQUVoQyxZQWtCQSxTQUFTVyxHQUF1QkMsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRRSxRQUFTRixHQWhCdkYrRSxPQUFPeU8sZUFBZWpVLEVBQVMsY0FDN0J1RixPQUFPLEcyRHh4R1YsSUFBQTNFLEdBQUFmLEVBQUEsRzNENnhHS2dCLEVBQVVMLEVBQXVCSSxHMkQ1eEd0Q3drRCxFQUFBdmxELEVBQUEsSTNEZ3lHS3dsRCxFQUFjN2tELEVBQXVCNGtELEcyRC94RzFDRSxFQUFBemxELEVBQUEsSTNEbXlHSzBsRCxFQUFZL2tELEVBQXVCOGtELEcyRGp5R2xDRSxFQUFjLFNBQUFDLEdBQW9CLEdBQUFDLEdBQUFELEVBQWpCOVIsUUFBaUIvcUMsU0FBQTg4QyxNQUN0QyxLQUFJLEVBQUFILEVBQUE1a0QsU0FBUWd6QyxHQUNWLE1BQU85eUMsR0FBQUYsUUFBQVEsY0FBQSx3QkFGNkIsSUFJOUJ3a0QsR0FBWWhTLEVBQU16ekMsR0FBbEJ5bEQsUUFDRjlyQixtQ0FBdUM4ckIsQ0FFN0MsT0FDRTlrRCxHQUFBRixRQUFBUSxjQUFBLE9BQUtteUIsVUFBVSx5QkFDYnp5QixFQUFBRixRQUFBUSxjQUFBLE9BQUtteUIsVUFBVSwyQ0FDYnp5QixFQUFBRixRQUFBUSxjQUFBLFVBQVE4OEMsTUFBTSxzQkFBc0IzcUIsVUFBVSx3QkFBd0JzeUIsSUFBSy9yQixLQUU3RWg1QixFQUFBRixRQUFBUSxjQUFBLE9BQUtteUIsVUFBVSxXQUNienlCLEVBQUFGLFFBQUFRLGNBQUEsV0FBTXd5QyxFQUFNa1MsUUFBUTVILE9BQ3BCcDlDLEVBQUFGLFFBQUFRLGNBQUEsV0FBTXd5QyxFQUFNa1MsUUFBUUMsZUFNNUJOLEdBQVlPLFdBQ1ZwUyxNQUFPMFIsRUFBQTFrRCxRQUFVcWxELE9BQ2ZILFFBQVNSLEVBQUExa0QsUUFBVXFsRCxPQUNqQi9ILE1BQU9vSCxFQUFBMWtELFFBQVVzbEQsT0FDakJILFlBQWFULEVBQUExa0QsUUFBVXNsRCxZQUs3QlQsRUFBWS9oRCxjQUNWa3dDLFUzRDR6R0QzekMsRUFBUVcsUTJEenpHTTZrRCxHM0Q2ekdULFNBQVV2bEQsRUFBUUQsRUFBU0gsRzREeDBHakNJLEVBQUFELFFBQUFILEVBQUEsTzVEMDJHTSxTQUFVSSxFQUFRRCxFQUFTSCxHNkQ3M0dqQyxZQUVBLElBQUF5SyxHQUFBekssRUFBQSxHQUNBcW1ELEVBQUFybUQsRUFBQSxJQUNBc21ELEVBQUF0bUQsRUFBQSxHQUVBSSxHQUFBRCxRQUFBLFdBQ0EsUUFBQW9tRCxHQUFBbGtELEVBQUFta0QsRUFBQXgvQixFQUFBcWQsRUFBQW9pQixFQUFBQyxHQUNBQSxJQUFBSixHQUlBRCxHQUNBLEVBQ0EsbUxBTUEsUUFBQU0sS0FDQSxNQUFBSixHQUZBQSxFQUFBSyxXQUFBTCxDQU1BLElBQUFNLElBQ0E1SSxNQUFBc0ksRUFDQU8sS0FBQVAsRUFDQTFoRCxLQUFBMGhELEVBQ0E5c0IsT0FBQThzQixFQUNBeFYsT0FBQXdWLEVBQ0FILE9BQUFHLEVBQ0FRLE9BQUFSLEVBRUFTLElBQUFULEVBQ0FVLFFBQUFOLEVBQ0FubEMsUUFBQStrQyxFQUNBVyxXQUFBUCxFQUNBL3RDLEtBQUEydEMsRUFDQVksU0FBQVIsRUFDQVMsTUFBQVQsRUFDQVUsVUFBQVYsRUFDQVIsTUFBQVEsRUFDQVcsTUFBQVgsRUFNQSxPQUhBRSxHQUFBVSxlQUFBOThDLEVBQ0FvOEMsRUFBQVcsVUFBQVgsRUFFQUEsSTdENDRHTSxTQUFVem1ELEVBQVFELEVBQVNILEc4RDU3R2pDLFlBdUJBLFNBQUFxbUQsR0FBQW9CLEVBQUFDLEVBQUFobUQsRUFBQUMsRUFBQWxCLEVBQUFzQyxFQUFBakIsRUFBQXlCLEdBR0EsR0FGQW9rRCxFQUFBRCxJQUVBRCxFQUFBLENBQ0EsR0FBQXg4QyxFQUNBLElBQUFsQyxTQUFBMitDLEVBQ0F6OEMsRUFBQSxHQUFBakosT0FBQSxxSUFDSyxDQUNMLEdBQUFveUMsSUFBQTF5QyxFQUFBQyxFQUFBbEIsRUFBQXNDLEVBQUFqQixFQUFBeUIsR0FDQXFrRCxFQUFBLENBQ0EzOEMsR0FBQSxHQUFBakosT0FBQTBsRCxFQUFBbmpELFFBQUEsaUJBQ0EsTUFBQTZ2QyxHQUFBd1QsUUFFQTM4QyxFQUFBaEosS0FBQSxzQkFJQSxLQURBZ0osR0FBQS9JLFlBQUEsRUFDQStJLEdBM0JBLEdBQUEwOEMsR0FBQSxTQUFBRCxJQStCQXRuRCxHQUFBRCxRQUFBa21ELEc5RDA4R00sU0FBVWptRCxFQUFRRCxHK0R2L0d4QixZQUVBLElBQUFtbUQsR0FBQSw4Q0FFQWxtRCxHQUFBRCxRQUFBbW1ELEcvRHFnSE0sU0FBVWxtRCxFQUFRRCxFQUFTSCxHZ0U1OUdqQyxRQUFBNm5ELEdBQUFuaUQsR0FDQSxTQUFBQSxFQUNBLFFBRUEsSUFBQW9pRCxFQUFBcGlELEtBQ0FKLEVBQUFJLElBQUEsZ0JBQUFBLElBQUEsa0JBQUFBLEdBQUFxaUQsUUFDQW5OLEVBQUFsMUMsSUFBQXNpRCxFQUFBdGlELElBQUF1aUQsRUFBQXZpRCxJQUNBLE9BQUFBLEVBQUE3RCxNQUVBLElBQUFrTixHQUFBbTVDLEVBQUF4aUQsRUFDQSxJQUFBcUosR0FBQW81QyxHQUFBcDVDLEdBQUFxNUMsRUFDQSxPQUFBMWlELEVBQUF5dEIsSUFFQSxJQUFBazFCLEVBQUEzaUQsR0FDQSxPQUFBNGlELEVBQUE1aUQsR0FBQTdELE1BRUEsUUFBQXNCLEtBQUF1QyxHQUNBLEdBQUFwQyxFQUFBL0MsS0FBQW1GLEVBQUF2QyxHQUNBLFFBR0EsVUF6RUEsR0FBQW1sRCxHQUFBdG9ELEVBQUEsSUFDQWtvRCxFQUFBbG9ELEVBQUEsSUFDQWlvRCxFQUFBam9ELEVBQUEsSUFDQXNGLEVBQUF0RixFQUFBLElBQ0E4bkQsRUFBQTluRCxFQUFBLElBQ0E0NkMsRUFBQTU2QyxFQUFBLElBQ0Fxb0QsRUFBQXJvRCxFQUFBLElBQ0Fnb0QsRUFBQWhvRCxFQUFBLElBR0Ftb0QsRUFBQSxlQUNBQyxFQUFBLGVBR0F6USxFQUFBaHlDLE9BQUFpQixVQUdBdEQsRUFBQXEwQyxFQUFBcjBDLGNBMkRBbEQsR0FBQUQsUUFBQTBuRCxHaEV1aEhNLFNBQVV6bkQsRUFBUUQsRUFBU0gsR2lFbmxIakMsUUFBQXNvRCxHQUFBdlgsR0FDQSxJQUFBc1gsRUFBQXRYLEdBQ0EsTUFBQXdYLEdBQUF4WCxFQUVBLElBQUFwc0MsS0FDQSxRQUFBeEIsS0FBQXdDLFFBQUFvckMsR0FDQXp0QyxFQUFBL0MsS0FBQXd3QyxFQUFBNXRDLElBQUEsZUFBQUEsR0FDQXdCLEVBQUFLLEtBQUE3QixFQUdBLE9BQUF3QixHQTFCQSxHQUFBMGpELEdBQUFyb0QsRUFBQSxJQUNBdW9ELEVBQUF2b0QsRUFBQSxJQUdBMjNDLEVBQUFoeUMsT0FBQWlCLFVBR0F0RCxFQUFBcTBDLEVBQUFyMEMsY0FzQkFsRCxHQUFBRCxRQUFBbW9ELEdqRTBtSE0sU0FBVWxvRCxFQUFRRCxHa0U3bkh4QixRQUFBa29ELEdBQUEzaUQsR0FDQSxHQUFBOGlELEdBQUE5aUQsS0FBQXVCLFlBQ0F3aEQsRUFBQSxrQkFBQUQsTUFBQTVoRCxXQUFBK3dDLENBRUEsT0FBQWp5QyxLQUFBK2lELEVBYkEsR0FBQTlRLEdBQUFoeUMsT0FBQWlCLFNBZ0JBeEcsR0FBQUQsUUFBQWtvRCxHbEU4b0hNLFNBQVVqb0QsRUFBUUQsRUFBU0gsR21FL3BIakMsR0FBQTBvRCxHQUFBMW9ELEVBQUEsSUFHQXVvRCxFQUFBRyxFQUFBL2lELE9BQUFDLEtBQUFELE9BRUF2RixHQUFBRCxRQUFBb29ELEduRXNxSE0sU0FBVW5vRCxFQUFRRCxHb0VucUh4QixRQUFBdW9ELEdBQUE3akQsRUFBQThqRCxHQUNBLGdCQUFBbitDLEdBQ0EsTUFBQTNGLEdBQUE4akQsRUFBQW4rQyxLQUlBcEssRUFBQUQsUUFBQXVvRCxHcEVrckhNLFNBQVV0b0QsRUFBUUQsRUFBU0gsR3FFaHNIakMsR0FBQTRvRCxHQUFBNW9ELEVBQUEsSUFDQW1nQixFQUFBbmdCLEVBQUEsSUFDQWs1QyxFQUFBbDVDLEVBQUEsSUFDQTBtQixFQUFBMW1CLEVBQUEsSUFDQTZvRCxFQUFBN29ELEVBQUEsSUFDQWczQyxFQUFBaDNDLEVBQUEsSUFDQThvRCxFQUFBOW9ELEVBQUEsSUFHQW1vRCxFQUFBLGVBQ0FZLEVBQUEsa0JBQ0FDLEVBQUEsbUJBQ0FaLEVBQUEsZUFDQWEsRUFBQSxtQkFFQUMsRUFBQSxvQkFHQUMsRUFBQUwsRUFBQUYsR0FDQVEsRUFBQU4sRUFBQTNvQyxHQUNBa3BDLEVBQUFQLEVBQUE1UCxHQUNBb1EsRUFBQVIsRUFBQXBpQyxHQUNBNmlDLEVBQUFULEVBQUFELEdBU0FYLEVBQUFsUixHQUdBNFIsR0FBQVYsRUFBQSxHQUFBVSxHQUFBLEdBQUFwUCxhQUFBLE1BQUEwUCxHQUNBL29DLEdBQUErbkMsRUFBQSxHQUFBL25DLEtBQUFnb0MsR0FDQWpQLEdBQUFnUCxFQUFBaFAsRUFBQXFDLFlBQUF5TixHQUNBdGlDLEdBQUF3aEMsRUFBQSxHQUFBeGhDLEtBQUEwaEMsR0FDQVMsR0FBQVgsRUFBQSxHQUFBVyxLQUFBSSxLQUNBZixFQUFBLFNBQUF4aUQsR0FDQSxHQUFBZixHQUFBcXlDLEVBQUF0eEMsR0FDQThpRCxFQUFBN2pELEdBQUFva0QsRUFBQXJqRCxFQUFBdUIsWUFBQThCLE9BQ0F5Z0QsRUFBQWhCLEVBQUFNLEVBQUFOLEdBQUEsRUFFQSxJQUFBZ0IsRUFDQSxPQUFBQSxHQUNBLElBQUFMLEdBQUEsTUFBQUQsRUFDQSxLQUFBRSxHQUFBLE1BQUFqQixFQUNBLEtBQUFrQixHQUFBLE1BQUFMLEVBQ0EsS0FBQU0sR0FBQSxNQUFBbEIsRUFDQSxLQUFBbUIsR0FBQSxNQUFBTixHQUdBLE1BQUF0a0QsS0FJQXZFLEVBQUFELFFBQUErbkQsR3JFdXNITSxTQUFVOW5ELEVBQVFELEVBQVNILEdzRWh3SGpDLEdBQUF5cEQsR0FBQXpwRCxFQUFBLElBQ0FnMkMsRUFBQWgyQyxFQUFBLElBR0E0b0QsRUFBQWEsRUFBQXpULEVBQUEsV0FFQTUxQyxHQUFBRCxRQUFBeW9ELEd0RXV3SE0sU0FBVXhvRCxFQUFRRCxFQUFTSCxHdUVsd0hqQyxRQUFBeXBELEdBQUExWSxFQUFBNXRDLEdBQ0EsR0FBQXVDLEdBQUE2TyxFQUFBdzhCLEVBQUE1dEMsRUFDQSxPQUFBdW1ELEdBQUFoa0QsS0FBQXFELE9BYkEsR0FBQTJnRCxHQUFBMXBELEVBQUEsSUFDQXVVLEVBQUF2VSxFQUFBLEdBZUFJLEdBQUFELFFBQUFzcEQsR3ZFb3hITSxTQUFVcnBELEVBQVFELEVBQVNILEd3RTl2SGpDLFFBQUEwcEQsR0FBQWhrRCxHQUNBLElBQUFvd0MsRUFBQXB3QyxJQUFBaWtELEVBQUFqa0QsR0FDQSxRQUVBLElBQUFra0QsR0FBQTNQLEVBQUF2MEMsR0FBQW1rRCxFQUFBQyxDQUNBLE9BQUFGLEdBQUFoL0IsS0FBQWsrQixFQUFBcGpELElBM0NBLEdBQUF1MEMsR0FBQWo2QyxFQUFBLElBQ0EycEQsRUFBQTNwRCxFQUFBLElBQ0E4MUMsRUFBQTkxQyxFQUFBLElBQ0E4b0QsRUFBQTlvRCxFQUFBLElBTUErcEQsRUFBQSxzQkFHQUQsRUFBQSw4QkFHQUUsRUFBQTdULFNBQUF2dkMsVUFDQSt3QyxFQUFBaHlDLE9BQUFpQixVQUdBcWpELEVBQUFELEVBQUFsa0QsU0FHQXhDLEVBQUFxMEMsRUFBQXIwQyxlQUdBdW1ELEVBQUF6RixPQUFBLElBQ0E2RixFQUFBMXBELEtBQUErQyxHQUFBaUIsUUFBQXdsRCxFQUFBLFFBQ0F4bEQsUUFBQSxzRUFtQkFuRSxHQUFBRCxRQUFBdXBELEd4RTJ5SE0sU0FBVXRwRCxFQUFRRCxFQUFTSCxHeUUvekhqQyxRQUFBaTZDLEdBQUF2MEMsR0FDQSxJQUFBb3dDLEVBQUFwd0MsR0FDQSxRQUlBLElBQUFxSixHQUFBaW9DLEVBQUF0eEMsRUFDQSxPQUFBcUosSUFBQW03QyxHQUFBbjdDLEdBQUFvN0MsR0FBQXA3QyxHQUFBcTdDLEdBQUFyN0MsR0FBQXM3QyxFQWpDQSxHQUFBclQsR0FBQWgzQyxFQUFBLElBQ0E4MUMsRUFBQTkxQyxFQUFBLElBR0FvcUQsRUFBQSx5QkFDQUYsRUFBQSxvQkFDQUMsRUFBQSw2QkFDQUUsRUFBQSxnQkE2QkFqcUQsR0FBQUQsUUFBQTg1QyxHekVnMkhNLFNBQVU3NUMsRUFBUUQsRUFBU0gsRzBFcjNIakMsUUFBQTJwRCxHQUFBOWtELEdBQ0EsUUFBQXlsRCxPQUFBemxELEdBaEJBLEdBQUEwbEQsR0FBQXZxRCxFQUFBLElBR0FzcUQsRUFBQSxXQUNBLEdBQUFFLEdBQUEsU0FBQUMsS0FBQUYsS0FBQTNrRCxNQUFBMmtELEVBQUEza0QsS0FBQThrRCxVQUFBLEdBQ0EsT0FBQUYsR0FBQSxpQkFBQUEsRUFBQSxLQWNBcHFELEdBQUFELFFBQUF3cEQsRzFFMjRITSxTQUFVdnBELEVBQVFELEVBQVNILEcyRTk1SGpDLEdBQUFnMkMsR0FBQWgyQyxFQUFBLElBR0F1cUQsRUFBQXZVLEVBQUEscUJBRUE1MUMsR0FBQUQsUUFBQW9xRCxHM0VxNkhNLFNBQVVucUQsRUFBUUQsRzRFNzVIeEIsUUFBQTJvRCxHQUFBamtELEdBQ0EsU0FBQUEsRUFBQSxDQUNBLElBQ0EsTUFBQW9sRCxHQUFBMXBELEtBQUFzRSxHQUNLLE1BQUEvQyxJQUNMLElBQ0EsTUFBQStDLEdBQUEsR0FDSyxNQUFBL0MsS0FFTCxTQXJCQSxHQUFBa29ELEdBQUE3VCxTQUFBdnZDLFVBR0FxakQsRUFBQUQsRUFBQWxrRCxRQXFCQTFGLEdBQUFELFFBQUEyb0QsRzVFaTdITSxTQUFVMW9ELEVBQVFELEc2RWw4SHhCLFFBQUFvVSxHQUFBdzhCLEVBQUE1dEMsR0FDQSxhQUFBNHRDLEVBQUFob0MsT0FBQWdvQyxFQUFBNXRDLEdBR0EvQyxFQUFBRCxRQUFBb1UsRzdFaTlITSxTQUFVblUsRUFBUUQsRUFBU0gsRzhFNzlIakMsR0FBQXlwRCxHQUFBenBELEVBQUEsSUFDQWcyQyxFQUFBaDJDLEVBQUEsSUFHQW1nQixFQUFBc3BDLEVBQUF6VCxFQUFBLE1BRUE1MUMsR0FBQUQsUUFBQWdnQixHOUVvK0hNLFNBQVUvZixFQUFRRCxFQUFTSCxHK0UxK0hqQyxHQUFBeXBELEdBQUF6cEQsRUFBQSxJQUNBZzJDLEVBQUFoMkMsRUFBQSxJQUdBazVDLEVBQUF1USxFQUFBelQsRUFBQSxVQUVBNTFDLEdBQUFELFFBQUErNEMsRy9FaS9ITSxTQUFVOTRDLEVBQVFELEVBQVNILEdnRnYvSGpDLEdBQUF5cEQsR0FBQXpwRCxFQUFBLElBQ0FnMkMsRUFBQWgyQyxFQUFBLElBR0EwbUIsRUFBQStpQyxFQUFBelQsRUFBQSxNQUVBNTFDLEdBQUFELFFBQUF1bUIsR2hGOC9ITSxTQUFVdG1CLEVBQVFELEVBQVNILEdpRnBnSWpDLEdBQUF5cEQsR0FBQXpwRCxFQUFBLElBQ0FnMkMsRUFBQWgyQyxFQUFBLElBR0E2b0QsRUFBQVksRUFBQXpULEVBQUEsVUFFQTUxQyxHQUFBRCxRQUFBMG9ELEdqRjJnSU0sU0FBVXpvRCxFQUFRRCxFQUFTSCxHa0ZqaElqQyxHQUFBMnFELEdBQUEzcUQsRUFBQSxJQUNBKzJDLEVBQUEvMkMsRUFBQSxJQUdBMjNDLEVBQUFoeUMsT0FBQWlCLFVBR0F0RCxFQUFBcTBDLEVBQUFyMEMsZUFHQXlHLEVBQUE0dEMsRUFBQTV0QyxxQkFvQkFrK0MsRUFBQTBDLEVBQUEsV0FBOEMsTUFBQS9vRCxlQUFvQitvRCxFQUFBLFNBQUFqbEQsR0FDbEUsTUFBQXF4QyxHQUFBcnhDLElBQUFwQyxFQUFBL0MsS0FBQW1GLEVBQUEsWUFDQXFFLEVBQUF4SixLQUFBbUYsRUFBQSxVQUdBdEYsR0FBQUQsUUFBQThuRCxHbEZ3aElNLFNBQVU3bkQsRUFBUUQsRUFBU0gsR21GOWlJakMsUUFBQTJxRCxHQUFBamxELEdBQ0EsTUFBQXF4QyxHQUFBcnhDLElBQUFzeEMsRUFBQXR4QyxJQUFBa2xELEVBZEEsR0FBQTVULEdBQUFoM0MsRUFBQSxJQUNBKzJDLEVBQUEvMkMsRUFBQSxJQUdBNHFELEVBQUEsb0JBYUF4cUQsR0FBQUQsUUFBQXdxRCxHbkZra0lNLFNBQVV2cUQsRUFBUUQsR29GNWpJeEIsR0FBQW1GLEdBQUE1QixNQUFBNEIsT0FFQWxGLEdBQUFELFFBQUFtRixHcEYwbElNLFNBQVVsRixFQUFRRCxFQUFTSCxHcUZ2bElqQyxRQUFBOG5ELEdBQUFwaUQsR0FDQSxhQUFBQSxHQUFBbWxELEVBQUFubEQsRUFBQTdELFVBQUFvNEMsRUFBQXYwQyxHQTdCQSxHQUFBdTBDLEdBQUFqNkMsRUFBQSxJQUNBNnFELEVBQUE3cUQsRUFBQSxHQStCQUksR0FBQUQsUUFBQTJuRCxHckYwbklNLFNBQVUxbkQsRUFBUUQsR3NGN25JeEIsUUFBQTBxRCxHQUFBbmxELEdBQ0Esc0JBQUFBLElBQ0FBLEdBQUEsR0FBQUEsRUFBQSxNQUFBQSxHQUFBb2xELEVBOUJBLEdBQUFBLEdBQUEsZ0JBaUNBMXFELEdBQUFELFFBQUEwcUQsR3RGaXFJTSxTQUFVenFELEVBQVFELEVBQVNILEl1Rm5zSWpDLFNBQUFJLEdBQUEsR0FBQTQxQyxHQUFBaDJDLEVBQUEsSUFDQStxRCxFQUFBL3FELEVBQUEsSUFHQWdyRCxFQUFBLGdCQUFBN3FELFVBQUFzVCxVQUFBdFQsRUFHQThxRCxFQUFBRCxHQUFBLGdCQUFBNXFELFVBQUFxVCxVQUFBclQsRUFHQThxRCxFQUFBRCxLQUFBOXFELFVBQUE2cUQsRUFHQUcsRUFBQUQsRUFBQWxWLEVBQUFtVixPQUFBcGlELE9BR0FxaUQsRUFBQUQsSUFBQXZRLFNBQUE3eEMsT0FtQkE2eEMsRUFBQXdRLEdBQUFMLENBRUEzcUQsR0FBQUQsUUFBQXk2QyxJdkZ1c0k4QnI2QyxLQUFLSixFQUFTSCxFQUFvQixJQUFJSSxLQUk5RCxTQUFVQSxFQUFRRCxHd0Zodkl4QkMsRUFBQUQsUUFBQSxTQUFBQyxHQVFBLE1BUEFBLEdBQUFpckQsa0JBQ0FqckQsRUFBQWtyRCxVQUFBLGFBQ0FsckQsRUFBQW1yRCxTQUVBbnJELEVBQUFvRCxZQUNBcEQsRUFBQWlyRCxnQkFBQSxHQUVBanJELEl4Rnd2SU0sU0FBVUEsRUFBUUQsR3lGbnZJeEIsUUFBQTRxRCxLQUNBLFNBR0EzcUQsRUFBQUQsUUFBQTRxRCxHekZ1d0lNLFNBQVUzcUQsRUFBUUQsRUFBU0gsRzBGeHhJakMsR0FBQXdyRCxHQUFBeHJELEVBQUEsSUFDQXlyRCxFQUFBenJELEVBQUEsSUFDQTByRCxFQUFBMXJELEVBQUEsSUFHQTJyRCxFQUFBRCxLQUFBMUQsYUFtQkFBLEVBQUEyRCxFQUFBRixFQUFBRSxHQUFBSCxDQUVBcHJELEdBQUFELFFBQUE2bkQsRzFGK3hJTSxTQUFVNW5ELEVBQVFELEVBQVNILEcyRm53SWpDLFFBQUF3ckQsR0FBQTlsRCxHQUNBLE1BQUFxeEMsR0FBQXJ4QyxJQUNBbWxELEVBQUFubEQsRUFBQTdELFdBQUErcEQsRUFBQTVVLEVBQUF0eEMsSUF4REEsR0FBQXN4QyxHQUFBaDNDLEVBQUEsSUFDQTZxRCxFQUFBN3FELEVBQUEsSUFDQSsyQyxFQUFBLzJDLEVBQUEsSUFHQTRxRCxFQUFBLHFCQUNBaUIsRUFBQSxpQkFDQUMsRUFBQSxtQkFDQUMsRUFBQSxnQkFDQUMsRUFBQSxpQkFDQTlCLEVBQUEsb0JBQ0EvQixFQUFBLGVBQ0E4RCxFQUFBLGtCQUNBbEQsRUFBQSxrQkFDQW1ELEVBQUEsa0JBQ0E5RCxFQUFBLGVBQ0ErRCxFQUFBLGtCQUNBbEQsRUFBQSxtQkFFQW1ELEVBQUEsdUJBQ0FsRCxFQUFBLG9CQUNBbUQsRUFBQSx3QkFDQUMsRUFBQSx3QkFDQUMsRUFBQSxxQkFDQUMsRUFBQSxzQkFDQUMsRUFBQSxzQkFDQUMsRUFBQSxzQkFDQUMsRUFBQSw2QkFDQUMsRUFBQSx1QkFDQUMsRUFBQSx1QkFHQWpCLElBQ0FBLEdBQUFTLEdBQUFULEVBQUFVLEdBQ0FWLEVBQUFXLEdBQUFYLEVBQUFZLEdBQ0FaLEVBQUFhLEdBQUFiLEVBQUFjLEdBQ0FkLEVBQUFlLEdBQUFmLEVBQUFnQixHQUNBaEIsRUFBQWlCLElBQUEsRUFDQWpCLEVBQUFoQixHQUFBZ0IsRUFBQUMsR0FDQUQsRUFBQVEsR0FBQVIsRUFBQUUsR0FDQUYsRUFBQTFDLEdBQUEwQyxFQUFBRyxHQUNBSCxFQUFBSSxHQUFBSixFQUFBMUIsR0FDQTBCLEVBQUF6RCxHQUFBeUQsRUFBQUssR0FDQUwsRUFBQTdDLEdBQUE2QyxFQUFBTSxHQUNBTixFQUFBeEQsR0FBQXdELEVBQUFPLEdBQ0FQLEVBQUEzQyxJQUFBLEVBY0E3b0QsRUFBQUQsUUFBQXFyRCxHM0ZnMElNLFNBQVVwckQsRUFBUUQsRzRGcDNJeEIsUUFBQXNyRCxHQUFBNW1ELEdBQ0EsZ0JBQUFhLEdBQ0EsTUFBQWIsR0FBQWEsSUFJQXRGLEVBQUFELFFBQUFzckQsRzVGazRJTSxTQUFVcnJELEVBQVFELEVBQVNILEk2Ri80SWpDLFNBQUFJLEdBQUEsR0FBQTYxQyxHQUFBajJDLEVBQUEsSUFHQWdyRCxFQUFBLGdCQUFBN3FELFVBQUFzVCxVQUFBdFQsRUFHQThxRCxFQUFBRCxHQUFBLGdCQUFBNXFELFVBQUFxVCxVQUFBclQsRUFHQThxRCxFQUFBRCxLQUFBOXFELFVBQUE2cUQsRUFHQThCLEVBQUE1QixHQUFBalYsRUFBQTRGLFFBR0E2UCxFQUFBLFdBQ0EsSUFDQSxNQUFBb0IsTUFBQTNOLFNBQUEyTixFQUFBM04sUUFBQSxRQUNHLE1BQUFyOUMsT0FHSDFCLEdBQUFELFFBQUF1ckQsSTdGbTVJOEJuckQsS0FBS0osRUFBU0gsRUFBb0IsSUFBSUksS0FJOUQsU0FBVUEsRUFBUUQsRUFBU0gsR0FFaEMsWUFrQkEsU0FBU1csR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR0FoQnZGK0UsT0FBT3lPLGVBQWVqVSxFQUFTLGNBQzdCdUYsT0FBTyxHOEZqN0lWLElBQUEzRSxHQUFBZixFQUFBLEc5RnM3SUtnQixFQUFVTCxFQUF1QkksRzhGcjdJdEN3a0QsRUFBQXZsRCxFQUFBLEk5Rnk3SUt3bEQsRUFBYzdrRCxFQUF1QjRrRCxHOEZ2N0kxQ3dILEVBQUEvc0QsRUFBQSxJOUYyN0lLZ3RELEVBQWtCcnNELEVBQXVCb3NELEc4Rno3SXhDRSxFQUFZLFNBQUFySCxHQUErQixHQUE1QnpTLEdBQTRCeVMsRUFBNUJ6UyxPQUFRYSxFQUFvQjRSLEVBQXBCNVIsY0FDckJrWixFQUFhL1osRUFBTzFyQyxJQUFJLFNBQUFxc0MsR0FBQSxNQUM1Qjl5QyxHQUFBRixRQUFBUSxjQUFBMHJELEVBQUFsc0QsU0FDRWt6QyxjQUFlQSxFQUNmN3dDLElBQUsyd0MsRUFBTXFaLEtBQ1hyWixNQUFPQSxLQUlYLE9BQ0U5eUMsR0FBQUYsUUFBQVEsY0FBQSxNQUFJbXlCLFVBQVUsdUJBQ1h5NUIsR0FLUEQsR0FBVS9HLFdBQ1IvUyxPQUFRcVMsRUFBQTFrRCxRQUFVbW1ELFFBQVF6QixFQUFBMWtELFFBQVVxbEQsT0FDbENnSCxLQUFNM0gsRUFBQTFrRCxRQUFVc2xELFVBRWxCcFMsY0FBZXdSLEVBQUExa0QsUUFBVStELE1BRzNCb29ELEVBQVVycEQsY0FDUnV2QyxVQUNBYSxjQUFlLGM5Rm04SWhCN3pDLEVBQVFXLFE4Rmg4SU1tc0QsRzlGbzhJVCxTQUFVN3NELEVBQVFELEVBQVNILEdBRWhDLFlBZ0JBLFNBQVNXLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFFBQVNGLEdBRXZGLFFBQVNzd0MsR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSXBvQyxXQUFVLHFDQUVoSCxRQUFTcW9DLEdBQTJCQyxFQUFNL3dDLEdBQVEsSUFBSyt3QyxFQUFRLEtBQU0sSUFBSUMsZ0JBQWUsNERBQWdFLFFBQU9oeEMsR0FBeUIsZ0JBQVRBLElBQXFDLGtCQUFUQSxHQUE4Qit3QyxFQUFQL3dDLEVBRWxPLFFBQVNpeEMsR0FBVUMsRUFBVUMsR0FBYyxHQUEwQixrQkFBZkEsSUFBNEMsT0FBZkEsRUFBdUIsS0FBTSxJQUFJMW9DLFdBQVUsaUVBQW9FMG9DLEdBQWVELEdBQVM3cUMsVUFBWWpCLE9BQU9nc0MsT0FBT0QsR0FBY0EsRUFBVzlxQyxXQUFhSyxhQUFldkIsTUFBTytyQyxFQUFVcDlCLFlBQVksRUFBT3U5QixVQUFVLEVBQU10OUIsY0FBYyxLQUFlbzlCLElBQVkvckMsT0FBT2tzQyxlQUFpQmxzQyxPQUFPa3NDLGVBQWVKLEVBQVVDLEdBQWNELEVBQVNLLFVBQVlKLEdBcEJqZS9yQyxPQUFPeU8sZUFBZWpVLEVBQVMsY0FDN0J1RixPQUFPLEdBR1QsSUFBSXFzQyxHQUFlLFdBQWMsUUFBU0MsR0FBaUJob0MsRUFBUTNILEdBQVMsSUFBSyxHQUFJaUgsR0FBSSxFQUFHQSxFQUFJakgsRUFBTVIsT0FBUXlILElBQUssQ0FBRSxHQUFJMm9DLEdBQWE1dkMsRUFBTWlILEVBQUkyb0MsR0FBVzU5QixXQUFhNDlCLEVBQVc1OUIsYUFBYyxFQUFPNDlCLEVBQVczOUIsY0FBZSxFQUFVLFNBQVcyOUIsS0FBWUEsRUFBV0wsVUFBVyxHQUFNanNDLE9BQU95TyxlQUFlcEssRUFBUWlvQyxFQUFXOXVDLElBQUs4dUMsSUFBaUIsTUFBTyxVQUFVYixFQUFhYyxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWUYsRUFBaUJaLEVBQVl4cUMsVUFBV3NyQyxHQUFpQkMsR0FBYUgsRUFBaUJaLEVBQWFlLEdBQXFCZixNK0Y3K0lqaUJyd0MsRUFBQWYsRUFBQSxHL0ZpL0lLZ0IsRUFBVUwsRUFBdUJJLEcrRmgvSXRDd2tELEVBQUF2bEQsRUFBQSxJL0ZvL0lLd2xELEVBQWM3a0QsRUFBdUI0a0QsRytGbC9JcEM2SCxFL0Y0L0llLFNBQVVDLEcrRjMvSTdCLFFBQUFELEtBQWNsYyxFQUFBOXVDLEtBQUFnckQsRUFBQSxJQUFBbmEsR0FBQTVCLEVBQUFqdkMsTUFBQWdyRCxFQUFBdGIsV0FBQW5zQyxPQUFBdXRDLGVBQUFrYSxJQUFBN3NELEtBQUE2QixNQUFBLE9BRVo2d0MsR0FBS3FhLFlBQWNyYSxFQUFLcWEsWUFBWWxsRCxLQUFqQjZxQyxHQUZQQSxFL0YraUpiLE1BbkRBekIsR0FBVTRiLEVBQWVDLEdBV3pCdGIsRUFBYXFiLElBQ1hqcUQsSUFBSyxjQUNMdUMsTUFBTyxXK0ZwZ0pJLEdBQUE2bkQsR0FDcUJuckQsS0FBS0MsTUFBOUJ5eEMsRUFESXlaLEVBQ0p6WixNQUFPRSxFQURIdVosRUFDR3ZaLGFBQ2ZBLEdBQWNGLE0vRjBnSmIzd0MsSUFBSyxTQUNMdUMsTUFBTyxXK0Z4Z0pELEdBQ0NvdUMsR0FBVTF4QyxLQUFLQyxNQUFmeXhDLE1BQ0YwWixFQUFXMVosRUFBTWtTLFFBQVF5SCxXQUFXM3NELFFBQVFrNUIsR0FDbEQsT0FDRWg1QixHQUFBRixRQUFBUSxjQUFBLE1BQUlpdUIsUUFBU250QixLQUFLa3JELFlBQWE3NUIsVUFBVSxtQkFDdkN6eUIsRUFBQUYsUUFBQVEsY0FBQSxPQUFLbXlCLFVBQVUsb0JBQ2J6eUIsRUFBQUYsUUFBQVEsY0FBQSxPQUFLbXlCLFVBQVUsY0FDYnp5QixFQUFBRixRQUFBUSxjQUFBLE9BQUtvc0QsSUFBSSxHQUFHajZCLFVBQVUsZUFBZXN5QixJQUFLeUgsS0FHNUN4c0QsRUFBQUYsUUFBQVEsY0FBQSxPQUFLbXlCLFVBQVUsY0FDYnp5QixFQUFBRixRQUFBUSxjQUFBLE9BQUtteUIsVUFBVSxnQkFBZ0JxZ0IsRUFBTWtTLFFBQVE1SCxjL0YwaEovQ2dQLEdBQ1Byc0QsRUFBT2dILGMrRm5oSlZxbEQsR0FBY2xILFdBQ1pwUyxNQUFPMFIsRUFBQTFrRCxRQUFVcWxELE9BQ2ZILFFBQVNSLEVBQUExa0QsUUFBVXFsRCxPQUNqQnNILFdBQVlqSSxFQUFBMWtELFFBQVVpd0MsV0FFdkI2VixXQUNINVMsY0FBZXdSLEVBQUExa0QsUUFBVStELEtBQUsraEQsWS9Gd2hKL0J6bUQsRUFBUVcsUStGcmhKTXNzRCxHL0Z5aEpULFNBQVVodEQsRUFBUUQsRUFBU0gsR0FFaEMsWUFnQkEsU0FBU1csR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR0FFdkYsUUFBU3N3QyxHQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJcG9DLFdBQVUscUNBRWhILFFBQVNxb0MsR0FBMkJDLEVBQU0vd0MsR0FBUSxJQUFLK3dDLEVBQVEsS0FBTSxJQUFJQyxnQkFBZSw0REFBZ0UsUUFBT2h4QyxHQUF5QixnQkFBVEEsSUFBcUMsa0JBQVRBLEdBQThCK3dDLEVBQVAvd0MsRUFFbE8sUUFBU2l4QyxHQUFVQyxFQUFVQyxHQUFjLEdBQTBCLGtCQUFmQSxJQUE0QyxPQUFmQSxFQUF1QixLQUFNLElBQUkxb0MsV0FBVSxpRUFBb0Uwb0MsR0FBZUQsR0FBUzdxQyxVQUFZakIsT0FBT2dzQyxPQUFPRCxHQUFjQSxFQUFXOXFDLFdBQWFLLGFBQWV2QixNQUFPK3JDLEVBQVVwOUIsWUFBWSxFQUFPdTlCLFVBQVUsRUFBTXQ5QixjQUFjLEtBQWVvOUIsSUFBWS9yQyxPQUFPa3NDLGVBQWlCbHNDLE9BQU9rc0MsZUFBZUosRUFBVUMsR0FBY0QsRUFBU0ssVUFBWUosR0FwQmplL3JDLE9BQU95TyxlQUFlalUsRUFBUyxjQUM3QnVGLE9BQU8sR0FHVCxJQUFJcXNDLEdBQWUsV0FBYyxRQUFTQyxHQUFpQmhvQyxFQUFRM0gsR0FBUyxJQUFLLEdBQUlpSCxHQUFJLEVBQUdBLEVBQUlqSCxFQUFNUixPQUFReUgsSUFBSyxDQUFFLEdBQUkyb0MsR0FBYTV2QyxFQUFNaUgsRUFBSTJvQyxHQUFXNTlCLFdBQWE0OUIsRUFBVzU5QixhQUFjLEVBQU80OUIsRUFBVzM5QixjQUFlLEVBQVUsU0FBVzI5QixLQUFZQSxFQUFXTCxVQUFXLEdBQU1qc0MsT0FBT3lPLGVBQWVwSyxFQUFRaW9DLEVBQVc5dUMsSUFBSzh1QyxJQUFpQixNQUFPLFVBQVViLEVBQWFjLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZRixFQUFpQlosRUFBWXhxQyxVQUFXc3JDLEdBQWlCQyxHQUFhSCxFQUFpQlosRUFBYWUsR0FBcUJmLE1nRzNrSmppQnJ3QyxFQUFBZixFQUFBLEdoRytrSktnQixFQUFVTCxFQUF1QkksR2dHOWtKdEN3a0QsRUFBQXZsRCxFQUFBLEloR2tsSkt3bEQsRUFBYzdrRCxFQUF1QjRrRCxHZ0dobEpwQ29JLEVoRzBsSlcsU0FBVU4sR2dHemxKekIsUUFBQU0sR0FBWXRyRCxHQUFPNnVDLEVBQUE5dUMsS0FBQXVyRCxFQUFBLElBQUExYSxHQUFBNUIsRUFBQWp2QyxNQUFBdXJELEVBQUE3YixXQUFBbnNDLE9BQUF1dEMsZUFBQXlhLElBQUFwdEQsS0FBQTZCLEtBQ1hDLEdBRFcsT0FHakI0d0MsR0FBSzJhLGNBQWdCM2EsRUFBSzJhLGNBQWN4bEQsS0FBbkI2cUMsR0FDckJBLEVBQUs1ekIsT0FDSG8wQixLQUFNLElBTFNSLEVoRzZuSmxCLE1BbkNBekIsR0FBVW1jLEVBQVdOLEdBY3JCdGIsRUFBYTRiLElBQ1h4cUQsSUFBSyxnQkFDTHVDLE1BQU8sU2dHam1KSW1vRCxHQUNaLEdBQU1wYSxHQUFPb2EsRUFBTTdqRCxPQUFPdEUsS0FDMUJ0RCxNQUFLMEUsVUFBVzJzQyxTQUNoQnJ4QyxLQUFLQyxNQUFNMHhDLG1CQUFtQk4sTWhHb21KN0J0d0MsSUFBSyxTQUNMdUMsTUFBTyxXZ0dqbUpSLE1BQ0UxRSxHQUFBRixRQUFBUSxjQUFBLE9BQUtteUIsVUFBVSxjQUNienlCLEVBQUFGLFFBQUFRLGNBQUEsU0FDRW9FLE1BQU90RCxLQUFLaWQsTUFBTW8wQixLQUNsQnFhLFNBQVUxckQsS0FBS3dyRCxxQmhHeW1KZkQsR0FDUDVzRCxFQUFPZ0gsY2dHbm1KVjRsRCxHQUFVekgsV0FDUm5TLG1CQUFvQnlSLEVBQUExa0QsUUFBVStELE1BR2hDOG9ELEVBQVUvcEQsY0FDUm13QyxtQkFBb0IsY2hHd21KckI1ekMsRUFBUVcsUWdHcm1KTTZzRCxHaEd5bUpULFNBQVV2dEQsRUFBUUQsR0FFdkIsWUFFQXdGLFFBQU95TyxlQUFlalUsRUFBUyxjQUM3QnVGLE9BQU8sR2lHcnBKR2l1QyxnQkFBZSwrQ0FDZkMsVUFBVSwwQ0FDVkosaUJBQWlCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcmVhY3REb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0dmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cdFxuXHR2YXIgX0FwcCA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHRcblx0dmFyIF9BcHAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXBwKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0X3JlYWN0RG9tMi5kZWZhdWx0LnJlbmRlcihfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQXBwMi5kZWZhdWx0LCBudWxsKSwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpKTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0aWYgKHRydWUpIHtcblx0ICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdH0gZWxzZSB7XG5cdCAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xuXHR9XG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4yLjBcblx0ICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcblx0ICpcblx0ICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cdCAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO3ZhciBtPV9fd2VicGFja19yZXF1aXJlX18oNCksbj1fX3dlYnBhY2tfcmVxdWlyZV9fKDUpLHA9X193ZWJwYWNrX3JlcXVpcmVfXyg2KSxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxyPXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx0PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY2FsbFwiKTo2MDEwNCx1PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LHY9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdz1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuXHRmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxjPTA7YzxiO2MrKyllKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2I9RXJyb3IoZStcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9XG5cdHZhciB6PXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBBKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9QS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtBLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/eShcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0EucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuXHRmdW5jdGlvbiBCKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9ZnVuY3Rpb24gQygpe31DLnByb3RvdHlwZT1BLnByb3RvdHlwZTt2YXIgRD1CLnByb3RvdHlwZT1uZXcgQztELmNvbnN0cnVjdG9yPUI7bShELEEucHJvdG90eXBlKTtELmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8en12YXIgRj1FLnByb3RvdHlwZT1uZXcgQztGLmNvbnN0cnVjdG9yPUU7bShGLEEucHJvdG90eXBlKTtGLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudD0hMDtGLnJlbmRlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3BzLmNoaWxkcmVufTt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuXHRmdW5jdGlvbiBKKGEsYixlKXt2YXIgYyxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGMpJiYhSS5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLGw9MDtsPGY7bCsrKWhbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cix0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1mdW5jdGlvbiBLKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1yfVxuXHRmdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBMPS9cXC8rL2csTT1bXTtmdW5jdGlvbiBOKGEsYixlLGMpe2lmKE0ubGVuZ3RoKXt2YXIgZD1NLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gTyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPk0ubGVuZ3RoJiZNLnB1c2goYSl9XG5cdGZ1bmN0aW9uIFAoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHI6Y2FzZSB0OmNhc2UgdTpjYXNlIHY6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitRKGQsayk7Zys9UChkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1cblx0Zi5jYWxsKGEpLGs9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrUShkLGsrKyksZys9UChkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSx5KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBSKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cblx0ZnVuY3Rpb24gUyhhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9UKGEsYyxlLHAudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKEsoYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBUKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKTtiPU4oYixnLGMsZCk7bnVsbD09YXx8UChhLFwiXCIsUyxiKTtPKGIpfVxuXHR2YXIgVT17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtUKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1OKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFAoYSxcIlwiLFIsYik7TyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpQKGEsXCJcIixwLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtUKGEsYixudWxsLHAudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7SyhhKT92b2lkIDA6eShcIjE0M1wiKTtyZXR1cm4gYX19LENvbXBvbmVudDpBLFB1cmVDb21wb25lbnQ6Qix1bnN0YWJsZV9Bc3luY0NvbXBvbmVudDpFLEZyYWdtZW50OncsY3JlYXRlRWxlbWVudDpKLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7dmFyIGM9bSh7fSxhLnByb3BzKSxcblx0ZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilILmNhbGwoYixoKSYmIUkuaGFzT3duUHJvcGVydHkoaCkmJihjW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbD0wO2w8aDtsKyspZltsXT1hcmd1bWVudHNbbCsyXTtjLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmQscmVmOmcscHJvcHM6Yyxfb3duZXI6a319LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LFxuXHRpc1ZhbGlkRWxlbWVudDpLLHZlcnNpb246XCIxNi4yLjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6Ryxhc3NpZ246bX19LFY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpVfSksVz1WJiZVfHxWO21vZHVsZS5leHBvcnRzPVdbXCJkZWZhdWx0XCJdP1dbXCJkZWZhdWx0XCJdOlc7XG5cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Lypcblx0b2JqZWN0LWFzc2lnblxuXHQoYykgU2luZHJlIFNvcmh1c1xuXHRAbGljZW5zZSBNSVRcblx0Ki9cblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0dmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdHZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0XG5cdGZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRcdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gT2JqZWN0KHZhbCk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cdFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0XHR9KTtcblx0XHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdFx0dmFyIHRlc3QzID0ge307XG5cdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHRcdH0pO1xuXHRcdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0XHR2YXIgZnJvbTtcblx0XHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHRcdHZhciBzeW1ib2xzO1xuXHRcblx0XHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXHRcblx0XHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRyZXR1cm4gdG87XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKlxuXHQgKi9cblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBlbXB0eU9iamVjdCA9IHt9O1xuXHRcblx0aWYgKGZhbHNlKSB7XG5cdCAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKlxuXHQgKiBcblx0ICovXG5cdFxuXHRmdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIGFyZztcblx0ICB9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcblx0ICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcblx0ICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cblx0ICovXG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXHRcblx0ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuXHRlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5cdGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5cdGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5cdGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG5cdCAgcmV0dXJuIGFyZztcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0ZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG5cdCAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuXHQgIGlmIChcblx0ICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG5cdCAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG5cdCAgKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIGlmIChmYWxzZSkge1xuXHQgICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG5cdCAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG5cdCAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG5cdCAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuXHQgICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG5cdCAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuXHQgICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cblx0ICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG5cdCAgfVxuXHQgIHRyeSB7XG5cdCAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuXHQgICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcblx0ICB9IGNhdGNoIChlcnIpIHtcblx0ICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG5cdCAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuXHQgICAgY29uc29sZS5lcnJvcihlcnIpO1xuXHQgIH1cblx0fVxuXHRcblx0aWYgKHRydWUpIHtcblx0ICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcblx0ICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cblx0ICBjaGVja0RDRSgpO1xuXHQgIG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0fSBlbHNlIHtcblx0ICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xuXHR9XG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4yLjBcblx0ICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG5cdCAqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKi9cblx0XG5cdC8qXG5cdCBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcblx0Ki9cblx0J3VzZSBzdHJpY3QnO3ZhciBhYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDIpLGw9X193ZWJwYWNrX3JlcXVpcmVfXyg5KSxCPV9fd2VicGFja19yZXF1aXJlX18oNCksQz1fX3dlYnBhY2tfcmVxdWlyZV9fKDYpLGJhPV9fd2VicGFja19yZXF1aXJlX18oMTApLGRhPV9fd2VicGFja19yZXF1aXJlX18oMTEpLGVhPV9fd2VicGFja19yZXF1aXJlX18oMTIpLGZhPV9fd2VicGFja19yZXF1aXJlX18oMTMpLGlhPV9fd2VicGFja19yZXF1aXJlX18oMTYpLEQ9X193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0ZnVuY3Rpb24gRShhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsZD0wO2Q8YjtkKyspYys9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiPUVycm9yKGMrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtiLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCI7Yi5mcmFtZXNUb1BvcD0xO3Rocm93IGI7fWFhP3ZvaWQgMDpFKFwiMjI3XCIpO1xuXHR2YXIgb2E9e2NoaWxkcmVuOiEwLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiEwLGRlZmF1bHRWYWx1ZTohMCxkZWZhdWx0Q2hlY2tlZDohMCxpbm5lckhUTUw6ITAsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiEwLHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzohMCxzdHlsZTohMH07ZnVuY3Rpb24gcGEoYSxiKXtyZXR1cm4oYSZiKT09PWJ9XG5cdHZhciB0YT17TVVTVF9VU0VfUFJPUEVSVFk6MSxIQVNfQk9PTEVBTl9WQUxVRTo0LEhBU19OVU1FUklDX1ZBTFVFOjgsSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU6MjQsSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTozMixIQVNfU1RSSU5HX0JPT0xFQU5fVkFMVUU6NjQsaW5qZWN0RE9NUHJvcGVydHlDb25maWc6ZnVuY3Rpb24oYSl7dmFyIGI9dGEsYz1hLlByb3BlcnRpZXN8fHt9LGQ9YS5ET01BdHRyaWJ1dGVOYW1lc3BhY2VzfHx7fSxlPWEuRE9NQXR0cmlidXRlTmFtZXN8fHt9O2E9YS5ET01NdXRhdGlvbk1ldGhvZHN8fHt9O2Zvcih2YXIgZiBpbiBjKXt1YS5oYXNPd25Qcm9wZXJ0eShmKT9FKFwiNDhcIixmKTp2b2lkIDA7dmFyIGc9Zi50b0xvd2VyQ2FzZSgpLGg9Y1tmXTtnPXthdHRyaWJ1dGVOYW1lOmcsYXR0cmlidXRlTmFtZXNwYWNlOm51bGwscHJvcGVydHlOYW1lOmYsbXV0YXRpb25NZXRob2Q6bnVsbCxtdXN0VXNlUHJvcGVydHk6cGEoaCxiLk1VU1RfVVNFX1BST1BFUlRZKSxcblx0aGFzQm9vbGVhblZhbHVlOnBhKGgsYi5IQVNfQk9PTEVBTl9WQUxVRSksaGFzTnVtZXJpY1ZhbHVlOnBhKGgsYi5IQVNfTlVNRVJJQ19WQUxVRSksaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6cGEoaCxiLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKSxoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOnBhKGgsYi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFKSxoYXNTdHJpbmdCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSl9OzE+PWcuaGFzQm9vbGVhblZhbHVlK2cuaGFzTnVtZXJpY1ZhbHVlK2cuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZT92b2lkIDA6RShcIjUwXCIsZik7ZS5oYXNPd25Qcm9wZXJ0eShmKSYmKGcuYXR0cmlidXRlTmFtZT1lW2ZdKTtkLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZFtmXSk7YS5oYXNPd25Qcm9wZXJ0eShmKSYmKGcubXV0YXRpb25NZXRob2Q9YVtmXSk7dWFbZl09Z319fSx1YT17fTtcblx0ZnVuY3Rpb24gdmEoYSxiKXtpZihvYS5oYXNPd25Qcm9wZXJ0eShhKXx8MjxhLmxlbmd0aCYmKFwib1wiPT09YVswXXx8XCJPXCI9PT1hWzBdKSYmKFwiblwiPT09YVsxXXx8XCJOXCI9PT1hWzFdKSlyZXR1cm4hMTtpZihudWxsPT09YilyZXR1cm4hMDtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJib29sZWFuXCI6cmV0dXJuIG9hLmhhc093blByb3BlcnR5KGEpP2E9ITA6KGI9d2EoYSkpP2E9Yi5oYXNCb29sZWFuVmFsdWV8fGIuaGFzU3RyaW5nQm9vbGVhblZhbHVlfHxiLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6KGE9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSksYT1cImRhdGEtXCI9PT1hfHxcImFyaWEtXCI9PT1hKSxhO2Nhc2UgXCJ1bmRlZmluZWRcIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJvYmplY3RcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB3YShhKXtyZXR1cm4gdWEuaGFzT3duUHJvcGVydHkoYSk/dWFbYV06bnVsbH1cblx0dmFyIHhhPXRhLHlhPXhhLk1VU1RfVVNFX1BST1BFUlRZLEs9eGEuSEFTX0JPT0xFQU5fVkFMVUUsemE9eGEuSEFTX05VTUVSSUNfVkFMVUUsQWE9eGEuSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsQmE9eGEuSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSxDYT14YS5IQVNfU1RSSU5HX0JPT0xFQU5fVkFMVUUsRGE9e1Byb3BlcnRpZXM6e2FsbG93RnVsbFNjcmVlbjpLLGFzeW5jOkssYXV0b0ZvY3VzOkssYXV0b1BsYXk6SyxjYXB0dXJlOkJhLGNoZWNrZWQ6eWF8Syxjb2xzOkFhLGNvbnRlbnRFZGl0YWJsZTpDYSxjb250cm9sczpLLFwiZGVmYXVsdFwiOkssZGVmZXI6SyxkaXNhYmxlZDpLLGRvd25sb2FkOkJhLGRyYWdnYWJsZTpDYSxmb3JtTm9WYWxpZGF0ZTpLLGhpZGRlbjpLLGxvb3A6SyxtdWx0aXBsZTp5YXxLLG11dGVkOnlhfEssbm9WYWxpZGF0ZTpLLG9wZW46SyxwbGF5c0lubGluZTpLLHJlYWRPbmx5OksscmVxdWlyZWQ6SyxyZXZlcnNlZDpLLHJvd3M6QWEscm93U3Bhbjp6YSxcblx0c2NvcGVkOkssc2VhbWxlc3M6SyxzZWxlY3RlZDp5YXxLLHNpemU6QWEsc3RhcnQ6emEsc3BhbjpBYSxzcGVsbENoZWNrOkNhLHN0eWxlOjAsdGFiSW5kZXg6MCxpdGVtU2NvcGU6SyxhY2NlcHRDaGFyc2V0OjAsY2xhc3NOYW1lOjAsaHRtbEZvcjowLGh0dHBFcXVpdjowLHZhbHVlOkNhfSxET01BdHRyaWJ1dGVOYW1lczp7YWNjZXB0Q2hhcnNldDpcImFjY2VwdC1jaGFyc2V0XCIsY2xhc3NOYW1lOlwiY2xhc3NcIixodG1sRm9yOlwiZm9yXCIsaHR0cEVxdWl2OlwiaHR0cC1lcXVpdlwifSxET01NdXRhdGlvbk1ldGhvZHM6e3ZhbHVlOmZ1bmN0aW9uKGEsYil7aWYobnVsbD09YilyZXR1cm4gYS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcIm51bWJlclwiIT09YS50eXBlfHwhMT09PWEuaGFzQXR0cmlidXRlKFwidmFsdWVcIik/YS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrYik6YS52YWxpZGl0eSYmIWEudmFsaWRpdHkuYmFkSW5wdXQmJmEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSYmXG5cdGEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK2IpfX19LEVhPXhhLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSxNPXt4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIn0sR2E9e1Byb3BlcnRpZXM6e2F1dG9SZXZlcnNlOkVhLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6RWEscHJlc2VydmVBbHBoYTpFYX0sRE9NQXR0cmlidXRlTmFtZXM6e2F1dG9SZXZlcnNlOlwiYXV0b1JldmVyc2VcIixleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOlwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCJ9LERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6e3hsaW5rQWN0dWF0ZTpNLnhsaW5rLHhsaW5rQXJjcm9sZTpNLnhsaW5rLHhsaW5rSHJlZjpNLnhsaW5rLHhsaW5rUm9sZTpNLnhsaW5rLHhsaW5rU2hvdzpNLnhsaW5rLHhsaW5rVGl0bGU6TS54bGluayx4bGlua1R5cGU6TS54bGluayxcblx0eG1sQmFzZTpNLnhtbCx4bWxMYW5nOk0ueG1sLHhtbFNwYWNlOk0ueG1sfX0sSGE9L1tcXC1cXDpdKFthLXpdKS9nO2Z1bmN0aW9uIElhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cdFwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeC1oZWlnaHQgeGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGUgeG1sOmJhc2UgeG1sbnM6eGxpbmsgeG1sOmxhbmcgeG1sOnNwYWNlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEhhLFxuXHRJYSk7R2EuUHJvcGVydGllc1tiXT0wO0dhLkRPTUF0dHJpYnV0ZU5hbWVzW2JdPWF9KTt4YS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhEYSk7eGEuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoR2EpO1xuXHR2YXIgUD17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGluamVjdGlvbjp7aW5qZWN0RXJyb3JVdGlsczpmdW5jdGlvbihhKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYS5pbnZva2VHdWFyZGVkQ2FsbGJhY2s/RShcIjE5N1wiKTp2b2lkIDA7SmE9YS5pbnZva2VHdWFyZGVkQ2FsbGJhY2t9fSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe0phLmFwcGx5KFAsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtQLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoUC5oYXNDYXVnaHRFcnJvcigpKXt2YXIgcT1QLmNsZWFyQ2F1Z2h0RXJyb3IoKTtQLl9oYXNSZXRocm93RXJyb3J8fChQLl9oYXNSZXRocm93RXJyb3I9ITAsUC5fcmV0aHJvd0Vycm9yPVxuXHRxKX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBLYS5hcHBseShQLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIFAuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoUC5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVAuX2NhdWdodEVycm9yO1AuX2NhdWdodEVycm9yPW51bGw7UC5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9RShcIjE5OFwiKX19O2Z1bmN0aW9uIEphKGEsYixjLGQsZSxmLGcsaCxrKXtQLl9oYXNDYXVnaHRFcnJvcj0hMTtQLl9jYXVnaHRFcnJvcj1udWxsO3ZhciBxPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLHEpfWNhdGNoKHYpe1AuX2NhdWdodEVycm9yPXYsUC5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxuXHRmdW5jdGlvbiBLYSgpe2lmKFAuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9UC5fcmV0aHJvd0Vycm9yO1AuX3JldGhyb3dFcnJvcj1udWxsO1AuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIExhPW51bGwsTWE9e307XG5cdGZ1bmN0aW9uIE5hKCl7aWYoTGEpZm9yKHZhciBhIGluIE1hKXt2YXIgYj1NYVthXSxjPUxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6RShcIjk2XCIsYSk7aWYoIU9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkUoXCI5N1wiLGEpO09hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7UGEuaGFzT3duUHJvcGVydHkoaCk/RShcIjk5XCIsaCk6dm9pZCAwO1BhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJlFhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhRYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOkUoXCI5OFwiLGQsYSl9fX19XG5cdGZ1bmN0aW9uIFFhKGEsYixjKXtSYVthXT9FKFwiMTAwXCIsYSk6dm9pZCAwO1JhW2FdPWI7U2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgT2E9W10sUGE9e30sUmE9e30sU2E9e307ZnVuY3Rpb24gVGEoYSl7TGE/RShcIjEwMVwiKTp2b2lkIDA7TGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7TmEoKX1mdW5jdGlvbiBVYShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtNYS5oYXNPd25Qcm9wZXJ0eShjKSYmTWFbY109PT1kfHwoTWFbY10/RShcIjEwMlwiLGMpOnZvaWQgMCxNYVtjXT1kLGI9ITApfWImJk5hKCl9XG5cdHZhciBWYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOk9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpQYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpSYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOlNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOlRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpVYX0pLFdhPW51bGwsWGE9bnVsbCxZYT1udWxsO2Z1bmN0aW9uIFphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9WWEoZCk7UC5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cblx0ZnVuY3Rpb24gJGEoYSxiKXtudWxsPT1iP0UoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGFiKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBiYj1udWxsO1xuXHRmdW5jdGlvbiBjYihhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylaYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJlphKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIGRiKGEpe3JldHVybiBjYihhLCEwKX1mdW5jdGlvbiBnYihhKXtyZXR1cm4gY2IoYSwhMSl9dmFyIGhiPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOlRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpVYX07XG5cdGZ1bmN0aW9uIGliKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9V2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcblx0cmV0dXJuIGN9ZnVuY3Rpb24gamIoYSxiLGMsZCl7Zm9yKHZhciBlLGY9MDtmPE9hLmxlbmd0aDtmKyspe3ZhciBnPU9hW2ZdO2cmJihnPWcuZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPSRhKGUsZykpfXJldHVybiBlfWZ1bmN0aW9uIGtiKGEpe2EmJihiYj0kYShiYixhKSl9ZnVuY3Rpb24gbGIoYSl7dmFyIGI9YmI7YmI9bnVsbDtiJiYoYT9hYihiLGRiKTphYihiLGdiKSxiYj9FKFwiOTVcIik6dm9pZCAwLFAucmV0aHJvd0NhdWdodEVycm9yKCkpfXZhciBtYj1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246aGIsZ2V0TGlzdGVuZXI6aWIsZXh0cmFjdEV2ZW50czpqYixlbnF1ZXVlRXZlbnRzOmtiLHByb2Nlc3NFdmVudFF1ZXVlOmxifSksbmI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksUT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK25iLG9iPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrbmI7XG5cdGZ1bmN0aW9uIHBiKGEpe2lmKGFbUV0pcmV0dXJuIGFbUV07Zm9yKHZhciBiPVtdOyFhW1FdOylpZihiLnB1c2goYSksYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7dmFyIGM9dm9pZCAwLGQ9YVtRXTtpZig1PT09ZC50YWd8fDY9PT1kLnRhZylyZXR1cm4gZDtmb3IoO2EmJihkPWFbUV0pO2E9Yi5wb3AoKSljPWQ7cmV0dXJuIGN9ZnVuY3Rpb24gcWIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0UoXCIzM1wiKX1mdW5jdGlvbiByYihhKXtyZXR1cm4gYVtvYl18fG51bGx9XG5cdHZhciBzYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbUV09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6cGIsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbUV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpxYixnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOnJiLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW29iXT1ifX0pO2Z1bmN0aW9uIHRiKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiB1YihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPXRiKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfVxuXHRmdW5jdGlvbiB2YihhLGIsYyl7aWYoYj1pYihhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPSRhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPSRhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIHdiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJnViKGEuX3RhcmdldEluc3QsdmIsYSl9ZnVuY3Rpb24geGIoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/dGIoYik6bnVsbDt1YihiLHZiLGEpfX1cblx0ZnVuY3Rpb24geWIoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9aWIoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPSRhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPSRhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiB6YihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJnliKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBBYihhKXthYihhLHdiKX1cblx0ZnVuY3Rpb24gQmIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPXRiKGgpKWcrKztoPTA7Zm9yKHZhciBrPWY7aztrPXRiKGspKWgrKztmb3IoOzA8Zy1oOyllPXRiKGUpLGctLTtmb3IoOzA8aC1nOylmPXRiKGYpLGgtLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPXRiKGUpO2Y9dGIoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPXRiKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9dGIoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKyl5YihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOyl5YihjW2FdLFwiY2FwdHVyZWRcIixiKX1cblx0dmFyIENiPU9iamVjdC5mcmVlemUoe2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6QWIsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7YWIoYSx4Yil9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpCYixhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXthYihhLHpiKX19KSxEYj1udWxsO2Z1bmN0aW9uIEViKCl7IURiJiZsLmNhblVzZURPTSYmKERiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIERifXZhciBTPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O1xuXHRmdW5jdGlvbiBGYigpe2lmKFMuX2ZhbGxiYWNrVGV4dClyZXR1cm4gUy5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9Uy5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPUdiKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtTLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gUy5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIEdiKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gUy5fcm9vdD9TLl9yb290LnZhbHVlOlMuX3Jvb3RbRWIoKV19XG5cdHZhciBIYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLEliPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuXHRmdW5jdGlvbiBUKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9DLnRoYXRSZXR1cm5zVHJ1ZTpDLnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5cdEIoVC5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcblx0ZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPEhiLmxlbmd0aDthKyspdGhpc1tIYlthXV09bnVsbH19KTtULkludGVyZmFjZT1JYjtULmF1Z21lbnRDbGFzcz1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9dGhpcy5wcm90b3R5cGU7dmFyIGQ9bmV3IGM7QihkLGEucHJvdG90eXBlKTthLnByb3RvdHlwZT1kO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5JbnRlcmZhY2U9Qih7fSx0aGlzLkludGVyZmFjZSxiKTthLmF1Z21lbnRDbGFzcz10aGlzLmF1Z21lbnRDbGFzcztKYihhKX07SmIoVCk7ZnVuY3Rpb24gS2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5cdGZ1bmN0aW9uIExiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpFKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBKYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1LYjthLnJlbGVhc2U9TGJ9ZnVuY3Rpb24gTWIoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKE1iLHtkYXRhOm51bGx9KTtmdW5jdGlvbiBOYihhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoTmIse2RhdGE6bnVsbH0pO3ZhciBQYj1bOSwxMywyNywzMl0sVmI9bC5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LFdiPW51bGw7bC5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKFdiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIFhiO1xuXHRpZihYYj1sLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIVdiKXt2YXIgWWI9d2luZG93Lm9wZXJhO1hiPSEoXCJvYmplY3RcIj09PXR5cGVvZiBZYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFliLnZlcnNpb24mJjEyPj1wYXJzZUludChZYi52ZXJzaW9uKCksMTApKX1cblx0dmFyIFpiPVhiLCRiPWwuY2FuVXNlRE9NJiYoIVZifHxXYiYmODxXYiYmMTE+PVdiKSxhYz1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxiYz17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcblx0Y2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25TdGFydCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblVwZGF0ZSB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX19LGNjPSExO1xuXHRmdW5jdGlvbiBkYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4tMSE9PVBiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwidG9wS2V5RG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcInRvcEtleVByZXNzXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BCbHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZWMoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgZmM9ITE7ZnVuY3Rpb24gZ2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIGVjKGIpO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtjYz0hMDtyZXR1cm4gYWM7Y2FzZSBcInRvcFRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09YWMmJmNjP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cblx0ZnVuY3Rpb24gaGMoYSxiKXtpZihmYylyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhVmImJmRjKGEsYik/KGE9RmIoKSxTLl9yb290PW51bGwsUy5fc3RhcnRUZXh0PW51bGwsUy5fZmFsbGJhY2tUZXh0PW51bGwsZmM9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuICRiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuXHR2YXIgaWM9e2V2ZW50VHlwZXM6YmMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihWYiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjp2YXIgZj1iYy5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6Zj1iYy5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvblVwZGF0ZVwiOmY9YmMuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIGZjP2RjKGEsYykmJihmPWJjLmNvbXBvc2l0aW9uRW5kKTpcInRvcEtleURvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9YmMuY29tcG9zaXRpb25TdGFydCk7Zj8oJGImJihmY3x8ZiE9PWJjLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PWJjLmNvbXBvc2l0aW9uRW5kJiZmYyYmKGU9RmIoKSk6KFMuX3Jvb3Q9ZCxTLl9zdGFydFRleHQ9R2IoKSxmYz0hMCkpLGY9TWIuZ2V0UG9vbGVkKGYsYixjLGQpLGU/Zi5kYXRhPVxuXHRlOihlPWVjKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxBYihmKSxlPWYpOmU9bnVsbDsoYT1aYj9nYyhhLGMpOmhjKGEsYykpPyhiPU5iLmdldFBvb2xlZChiYy5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsQWIoYikpOmI9bnVsbDtyZXR1cm5bZSxiXX19LGpjPW51bGwsa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGE9WGEoYSkpe2pjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgamMucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6RShcIjE5NFwiKTt2YXIgYj1XYShhLnN0YXRlTm9kZSk7amMucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fXZhciBuYz17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtqYz1hfX07ZnVuY3Rpb24gb2MoYSl7a2M/bGM/bGMucHVzaChhKTpsYz1bYV06a2M9YX1cblx0ZnVuY3Rpb24gcGMoKXtpZihrYyl7dmFyIGE9a2MsYj1sYztsYz1rYz1udWxsO21jKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKyltYyhiW2FdKX19dmFyIHFjPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpuYyxlbnF1ZXVlU3RhdGVSZXN0b3JlOm9jLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOnBjfSk7ZnVuY3Rpb24gcmMoYSxiKXtyZXR1cm4gYShiKX12YXIgc2M9ITE7ZnVuY3Rpb24gdGMoYSxiKXtpZihzYylyZXR1cm4gcmMoYSxiKTtzYz0hMDt0cnl7cmV0dXJuIHJjKGEsYil9ZmluYWxseXtzYz0hMSxwYygpfX12YXIgdWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07XG5cdGZ1bmN0aW9uIHZjKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhdWNbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIHdjKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeGM7bC5jYW5Vc2VET00mJih4Yz1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbiYmZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSYmITAhPT1kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiXCIsXCJcIikpO1xuXHRmdW5jdGlvbiB5YyhhLGIpe2lmKCFsLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTtiPVwib25cIithO3ZhciBjPWIgaW4gZG9jdW1lbnQ7Y3x8KGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxjLnNldEF0dHJpYnV0ZShiLFwicmV0dXJuO1wiKSxjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjW2JdKTshYyYmeGMmJlwid2hlZWxcIj09PWEmJihjPWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJFdmVudHMud2hlZWxcIixcIjMuMFwiKSk7cmV0dXJuIGN9ZnVuY3Rpb24gemMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cblx0ZnVuY3Rpb24gQWMoYSl7dmFyIGI9emMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5cdGZ1bmN0aW9uIEJjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1BYyhhKSl9ZnVuY3Rpb24gQ2MoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIERjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENoYW5nZSB0b3BDbGljayB0b3BGb2N1cyB0b3BJbnB1dCB0b3BLZXlEb3duIHRvcEtleVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O1xuXHRmdW5jdGlvbiBFYyhhLGIsYyl7YT1ULmdldFBvb2xlZChEYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO29jKGMpO0FiKGEpO3JldHVybiBhfXZhciBGYz1udWxsLEdjPW51bGw7ZnVuY3Rpb24gSGMoYSl7a2IoYSk7bGIoITEpfWZ1bmN0aW9uIEljKGEpe3ZhciBiPXFiKGEpO2lmKENjKGIpKXJldHVybiBhfWZ1bmN0aW9uIEpjKGEsYil7aWYoXCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEtjPSExO2wuY2FuVXNlRE9NJiYoS2M9eWMoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gTGMoKXtGYyYmKEZjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLE1jKSxHYz1GYz1udWxsKX1mdW5jdGlvbiBNYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmSWMoR2MpJiYoYT1FYyhHYyxhLHdjKGEpKSx0YyhIYyxhKSl9XG5cdGZ1bmN0aW9uIE5jKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhMYygpLEZjPWIsR2M9YyxGYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixNYykpOlwidG9wQmx1clwiPT09YSYmTGMoKX1mdW5jdGlvbiBPYyhhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBJYyhHYyl9ZnVuY3Rpb24gUGMoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBJYyhiKX1mdW5jdGlvbiAkYyhhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBJYyhiKX1cblx0dmFyIGFkPXtldmVudFR5cGVzOkRjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6S2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP3FiKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9SmM7ZWxzZSBpZih2YyhlKSlpZihLYylnPSRjO2Vsc2V7Zz1PYzt2YXIgaD1OY31lbHNlIGY9ZS5ub2RlTmFtZSwhZnx8XCJpbnB1dFwiIT09Zi50b0xvd2VyQ2FzZSgpfHxcImNoZWNrYm94XCIhPT1lLnR5cGUmJlwicmFkaW9cIiE9PWUudHlwZXx8KGc9UGMpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIEVjKGcsYyxkKTtoJiZoKGEsZSxiKTtcInRvcEJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiYoYT1cIlwiK2UudmFsdWUsZS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSE9PVxuXHRhJiZlLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYSkpfX07ZnVuY3Rpb24gYmQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKGJkLHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KTt2YXIgY2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIGRkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9Y2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBlZCgpe3JldHVybiBkZH1mdW5jdGlvbiBmZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9XG5cdGJkLmF1Z21lbnRDbGFzcyhmZCx7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTplZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KTtcblx0dmFyIGdkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LGhkPXtldmVudFR5cGVzOmdkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoXCJ0b3BNb3VzZU92ZXJcIj09PWEmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHxcInRvcE1vdXNlT3V0XCIhPT1hJiZcInRvcE1vdXNlT3ZlclwiIT09YSlyZXR1cm4gbnVsbDt2YXIgZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztcInRvcE1vdXNlT3V0XCI9PT1hPyhhPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9wYihiKTpudWxsKTphPW51bGw7aWYoYT09PVxuXHRiKXJldHVybiBudWxsO3ZhciBmPW51bGw9PWE/ZTpxYihhKTtlPW51bGw9PWI/ZTpxYihiKTt2YXIgZz1mZC5nZXRQb29sZWQoZ2QubW91c2VMZWF2ZSxhLGMsZCk7Zy50eXBlPVwibW91c2VsZWF2ZVwiO2cudGFyZ2V0PWY7Zy5yZWxhdGVkVGFyZ2V0PWU7Yz1mZC5nZXRQb29sZWQoZ2QubW91c2VFbnRlcixiLGMsZCk7Yy50eXBlPVwibW91c2VlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PWY7QmIoZyxjLGEsYik7cmV0dXJuW2csY119fSxpZD1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcjtmdW5jdGlvbiBqZChhKXthPWEudHlwZTtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6bnVsbH1cblx0ZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBsZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1rZChhKTohMX1mdW5jdGlvbiBtZChhKXsyIT09a2QoYSk/RShcIjE4OFwiKTp2b2lkIDB9XG5cdGZ1bmN0aW9uIG5kKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWtkKGEpLDM9PT1iP0UoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gbWQoZSksYTtpZihnPT09ZClyZXR1cm4gbWQoZSksYjtnPWcuc2libGluZ31FKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xuXHR2b2lkIDA6RShcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0UoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9FKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIG9kKGEpe2E9bmQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5cdGZ1bmN0aW9uIHBkKGEpe2E9bmQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgcWQ9W107XG5cdGZ1bmN0aW9uIHJkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPXBiKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sc2QoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LHdjKGEubmF0aXZlRXZlbnQpKX12YXIgdGQ9ITAsc2Q9dm9pZCAwO2Z1bmN0aW9uIHVkKGEpe3RkPSEhYX1mdW5jdGlvbiBVKGEsYixjKXtyZXR1cm4gYz9iYS5saXN0ZW4oYyxiLHZkLmJpbmQobnVsbCxhKSk6bnVsbH1mdW5jdGlvbiB3ZChhLGIsYyl7cmV0dXJuIGM/YmEuY2FwdHVyZShjLGIsdmQuYmluZChudWxsLGEpKTpudWxsfVxuXHRmdW5jdGlvbiB2ZChhLGIpe2lmKHRkKXt2YXIgYz13YyhiKTtjPXBiKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09a2QoYyl8fChjPW51bGwpO2lmKHFkLmxlbmd0aCl7dmFyIGQ9cWQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7dGMocmQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5xZC5sZW5ndGgmJnFkLnB1c2goYSl9fX1cblx0dmFyIHhkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiB0ZH0sZ2V0IF9oYW5kbGVUb3BMZXZlbCgpe3JldHVybiBzZH0sc2V0SGFuZGxlVG9wTGV2ZWw6ZnVuY3Rpb24oYSl7c2Q9YX0sc2V0RW5hYmxlZDp1ZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGR9LHRyYXBCdWJibGVkRXZlbnQ6VSx0cmFwQ2FwdHVyZWRFdmVudDp3ZCxkaXNwYXRjaEV2ZW50OnZkfSk7ZnVuY3Rpb24geWQoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cblx0dmFyIHpkPXthbmltYXRpb25lbmQ6eWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246eWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDp5ZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDp5ZChcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEFkPXt9LEJkPXt9O2wuY2FuVXNlRE9NJiYoQmQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgemQuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgemQuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgemQuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgemQudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcblx0ZnVuY3Rpb24gQ2QoYSl7aWYoQWRbYV0pcmV0dXJuIEFkW2FdO2lmKCF6ZFthXSlyZXR1cm4gYTt2YXIgYj16ZFthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBCZClyZXR1cm4gQWRbYV09YltjXTtyZXR1cm5cIlwifVxuXHR2YXIgRGQ9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BBbmltYXRpb25FbmQ6Q2QoXCJhbmltYXRpb25lbmRcIil8fFwiYW5pbWF0aW9uZW5kXCIsdG9wQW5pbWF0aW9uSXRlcmF0aW9uOkNkKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpfHxcImFuaW1hdGlvbml0ZXJhdGlvblwiLHRvcEFuaW1hdGlvblN0YXJ0OkNkKFwiYW5pbWF0aW9uc3RhcnRcIil8fFwiYW5pbWF0aW9uc3RhcnRcIix0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLFxuXHR0b3BDdXQ6XCJjdXRcIix0b3BEb3VibGVDbGljazpcImRibGNsaWNrXCIsdG9wRHJhZzpcImRyYWdcIix0b3BEcmFnRW5kOlwiZHJhZ2VuZFwiLHRvcERyYWdFbnRlcjpcImRyYWdlbnRlclwiLHRvcERyYWdFeGl0OlwiZHJhZ2V4aXRcIix0b3BEcmFnTGVhdmU6XCJkcmFnbGVhdmVcIix0b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcEZvY3VzOlwiZm9jdXNcIix0b3BJbnB1dDpcImlucHV0XCIsdG9wS2V5RG93bjpcImtleWRvd25cIix0b3BLZXlQcmVzczpcImtleXByZXNzXCIsdG9wS2V5VXA6XCJrZXl1cFwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZDpcImxvYWRcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsXG5cdHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNjcm9sbDpcInNjcm9sbFwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsdG9wU2VsZWN0aW9uQ2hhbmdlOlwic2VsZWN0aW9uY2hhbmdlXCIsdG9wU3RhbGxlZDpcInN0YWxsZWRcIix0b3BTdXNwZW5kOlwic3VzcGVuZFwiLHRvcFRleHRJbnB1dDpcInRleHRJbnB1dFwiLHRvcFRpbWVVcGRhdGU6XCJ0aW1ldXBkYXRlXCIsdG9wVG9nZ2xlOlwidG9nZ2xlXCIsdG9wVG91Y2hDYW5jZWw6XCJ0b3VjaGNhbmNlbFwiLHRvcFRvdWNoRW5kOlwidG91Y2hlbmRcIix0b3BUb3VjaE1vdmU6XCJ0b3VjaG1vdmVcIixcblx0dG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOkNkKFwidHJhbnNpdGlvbmVuZFwiKXx8XCJ0cmFuc2l0aW9uZW5kXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIix0b3BXaGVlbDpcIndoZWVsXCJ9LEVkPXt9LEZkPTAsR2Q9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIEhkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEdkKXx8KGFbR2RdPUZkKyssRWRbYVtHZF1dPXt9KTtyZXR1cm4gRWRbYVtHZF1dfWZ1bmN0aW9uIElkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cblx0ZnVuY3Rpb24gSmQoYSxiKXt2YXIgYz1JZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1JZChjKX19ZnVuY3Rpb24gS2QoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuXHR2YXIgTGQ9bC5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxNZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LE5kPW51bGwsT2Q9bnVsbCxQZD1udWxsLFFkPSExO1xuXHRmdW5jdGlvbiBSZChhLGIpe2lmKFFkfHxudWxsPT1OZHx8TmQhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPU5kO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJktkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gUGQmJmVhKFBkLGMpP251bGw6KFBkPWMsYT1ULmdldFBvb2xlZChNZC5zZWxlY3QsT2QsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1OZCxBYihhKSxhKX1cblx0dmFyIFNkPXtldmVudFR5cGVzOk1kLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPUhkKGUpO2Y9U2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9xYihiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BGb2N1c1wiOmlmKHZjKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKU5kPWUsT2Q9YixQZD1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6UGQ9T2Q9TmQ9bnVsbDticmVhaztjYXNlIFwidG9wTW91c2VEb3duXCI6UWQ9ITA7YnJlYWs7Y2FzZSBcInRvcENvbnRleHRNZW51XCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpyZXR1cm4gUWQ9ITEsUmQoYyxkKTtjYXNlIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI6aWYoTGQpYnJlYWs7XG5cdGNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIFJkKGMsZCl9cmV0dXJuIG51bGx9fTtmdW5jdGlvbiBUZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoVGQse2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pO2Z1bmN0aW9uIFVkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhVZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pO2Z1bmN0aW9uIFZkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1iZC5hdWdtZW50Q2xhc3MoVmQse3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuXHRmdW5jdGlvbiBXZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cblx0dmFyIFhkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxZZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcblx0MTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifTtmdW5jdGlvbiBaZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9XG5cdGJkLmF1Z21lbnRDbGFzcyhaZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1YZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1XZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/WWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmVkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9XZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuXHRhLnR5cGU/V2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KTtmdW5jdGlvbiAkZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9ZmQuYXVnbWVudENsYXNzKCRkLHtkYXRhVHJhbnNmZXI6bnVsbH0pO2Z1bmN0aW9uIGFlKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1iZC5hdWdtZW50Q2xhc3MoYWUse3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTplZH0pO2Z1bmN0aW9uIGJlKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhiZSx7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KTtcblx0ZnVuY3Rpb24gY2UoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWZkLmF1Z21lbnRDbGFzcyhjZSx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KTt2YXIgZGU9e30sZWU9e307XG5cdFwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBibHVyIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgc2Nyb2xsIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hNb3ZlIHRvdWNoU3RhcnQgdHJhbnNpdGlvbkVuZCB2b2x1bWVDaGFuZ2Ugd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKStcblx0YS5zbGljZSgxKSxjPVwib25cIitiO2I9XCJ0b3BcIitiO2M9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmMsY2FwdHVyZWQ6YytcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltiXX07ZGVbYV09YztlZVtiXT1jfSk7XG5cdHZhciBmZT17ZXZlbnRUeXBlczpkZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWVlW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigwPT09V2QoYykpcmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjphPVpkO2JyZWFrO2Nhc2UgXCJ0b3BCbHVyXCI6Y2FzZSBcInRvcEZvY3VzXCI6YT1WZDticmVhaztjYXNlIFwidG9wQ2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcInRvcERvdWJsZUNsaWNrXCI6Y2FzZSBcInRvcE1vdXNlRG93blwiOmNhc2UgXCJ0b3BNb3VzZU1vdmVcIjpjYXNlIFwidG9wTW91c2VVcFwiOmNhc2UgXCJ0b3BNb3VzZU91dFwiOmNhc2UgXCJ0b3BNb3VzZU92ZXJcIjpjYXNlIFwidG9wQ29udGV4dE1lbnVcIjphPWZkO2JyZWFrO2Nhc2UgXCJ0b3BEcmFnXCI6Y2FzZSBcInRvcERyYWdFbmRcIjpjYXNlIFwidG9wRHJhZ0VudGVyXCI6Y2FzZSBcInRvcERyYWdFeGl0XCI6Y2FzZSBcInRvcERyYWdMZWF2ZVwiOmNhc2UgXCJ0b3BEcmFnT3ZlclwiOmNhc2UgXCJ0b3BEcmFnU3RhcnRcIjpjYXNlIFwidG9wRHJvcFwiOmE9XG5cdCRkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9YWU7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPVRkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1iZTticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1iZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPWNlO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9VWQ7YnJlYWs7ZGVmYXVsdDphPVR9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtBYihiKTtyZXR1cm4gYn19O3NkPWZ1bmN0aW9uKGEsYixjLGQpe2E9amIoYSxiLGMsZCk7a2IoYSk7bGIoITEpfTtoYi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO1xuXHRXYT1zYi5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO1hhPXNiLmdldEluc3RhbmNlRnJvbU5vZGU7WWE9c2IuZ2V0Tm9kZUZyb21JbnN0YW5jZTtoYi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOmZlLEVudGVyTGVhdmVFdmVudFBsdWdpbjpoZCxDaGFuZ2VFdmVudFBsdWdpbjphZCxTZWxlY3RFdmVudFBsdWdpbjpTZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOmljfSk7dmFyIGdlPVtdLGhlPS0xO2Z1bmN0aW9uIFYoYSl7MD5oZXx8KGEuY3VycmVudD1nZVtoZV0sZ2VbaGVdPW51bGwsaGUtLSl9ZnVuY3Rpb24gVyhhLGIpe2hlKys7Z2VbaGVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn1uZXcgU2V0O3ZhciBpZT17Y3VycmVudDpEfSxYPXtjdXJyZW50OiExfSxqZT1EO2Z1bmN0aW9uIGtlKGEpe3JldHVybiBsZShhKT9qZTppZS5jdXJyZW50fVxuXHRmdW5jdGlvbiBtZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEQ7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gbGUoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIG5lKGEpe2xlKGEpJiYoVihYLGEpLFYoaWUsYSkpfVxuXHRmdW5jdGlvbiBvZShhLGIsYyl7bnVsbCE9aWUuY3Vyc29yP0UoXCIxNjhcIik6dm9pZCAwO1coaWUsYixhKTtXKFgsYyxhKX1mdW5jdGlvbiBwZShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpFKFwiMTA4XCIsamQoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBCKHt9LGIsYyl9ZnVuY3Rpb24gcWUoYSl7aWYoIWxlKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8RDtqZT1pZS5jdXJyZW50O1coaWUsYixhKTtXKFgsWC5jdXJyZW50LGEpO3JldHVybiEwfVxuXHRmdW5jdGlvbiByZShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkUoXCIxNjlcIik7aWYoYil7dmFyIGQ9cGUoYSxqZSk7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1kO1YoWCxhKTtWKGllLGEpO1coaWUsZCxhKX1lbHNlIFYoWCxhKTtXKFgsYixhKX1cblx0ZnVuY3Rpb24gWShhLGIsYyl7dGhpcy50YWc9YTt0aGlzLmtleT1iO3RoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXNbXCJyZXR1cm5cIl09bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPXRoaXMucGVuZGluZ1Byb3BzPXRoaXMucmVmPW51bGw7dGhpcy5pbnRlcm5hbENvbnRleHRUYWc9Yzt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuXHRmdW5jdGlvbiBzZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IFkoYS50YWcsYS5rZXksYS5pbnRlcm5hbENvbnRleHRUYWcpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLnBlbmRpbmdQcm9wcz1iO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuXHRmdW5jdGlvbiB0ZShhLGIsYyl7dmFyIGQ9dm9pZCAwLGU9YS50eXBlLGY9YS5rZXk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/KGQ9ZS5wcm90b3R5cGUmJmUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/bmV3IFkoMixmLGIpOm5ldyBZKDAsZixiKSxkLnR5cGU9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpcInN0cmluZ1wiPT09dHlwZW9mIGU/KGQ9bmV3IFkoNSxmLGIpLGQudHlwZT1lLGQucGVuZGluZ1Byb3BzPWEucHJvcHMpOlwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwibnVtYmVyXCI9PT10eXBlb2YgZS50YWc/KGQ9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpFKFwiMTMwXCIsbnVsbD09ZT9lOnR5cGVvZiBlLFwiXCIpO2QuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gZH1mdW5jdGlvbiB1ZShhLGIsYyxkKXtiPW5ldyBZKDEwLGQsYik7Yi5wZW5kaW5nUHJvcHM9YTtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9XG5cdGZ1bmN0aW9uIHZlKGEsYixjKXtiPW5ldyBZKDYsbnVsbCxiKTtiLnBlbmRpbmdQcm9wcz1hO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiB3ZShhLGIsYyl7Yj1uZXcgWSg3LGEua2V5LGIpO2IudHlwZT1hLmhhbmRsZXI7Yi5wZW5kaW5nUHJvcHM9YTtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24geGUoYSxiLGMpe2E9bmV3IFkoOSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiB5ZShhLGIsYyl7Yj1uZXcgWSg0LGEua2V5LGIpO2IucGVuZGluZ1Byb3BzPWEuY2hpbGRyZW58fFtdO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIHplPW51bGwsQWU9bnVsbDtcblx0ZnVuY3Rpb24gQmUoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBDZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTt6ZT1CZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7QWU9QmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBEZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgemUmJnplKGEpfWZ1bmN0aW9uIEVlKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBBZSYmQWUoYSl9XG5cdGZ1bmN0aW9uIEZlKGEpe3JldHVybntiYXNlU3RhdGU6YSxleHBpcmF0aW9uVGltZTowLGZpcnN0Om51bGwsbGFzdDpudWxsLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGlzSW5pdGlhbGl6ZWQ6ITF9fWZ1bmN0aW9uIEdlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX1cblx0ZnVuY3Rpb24gSGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEudXBkYXRlUXVldWU7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9RmUobnVsbCkpO251bGwhPT1jPyhhPWMudXBkYXRlUXVldWUsbnVsbD09PWEmJihhPWMudXBkYXRlUXVldWU9RmUobnVsbCkpKTphPW51bGw7YT1hIT09ZD9hOm51bGw7bnVsbD09PWE/R2UoZCxiKTpudWxsPT09ZC5sYXN0fHxudWxsPT09YS5sYXN0PyhHZShkLGIpLEdlKGEsYikpOihHZShkLGIpLGEubGFzdD1iKX1mdW5jdGlvbiBJZShhLGIsYyxkKXthPWEucGFydGlhbFN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChiLGMsZCk6YX1cblx0ZnVuY3Rpb24gSmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGc9ITAsaD1jLmZpcnN0LGs9ITE7bnVsbCE9PWg7KXt2YXIgcT1oLmV4cGlyYXRpb25UaW1lO2lmKHE+Zil7dmFyIHY9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09dnx8dj5xKWMuZXhwaXJhdGlvblRpbWU9cTtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fChjLmZpcnN0PWgubmV4dCxudWxsPT09XG5cdGMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGguaXNSZXBsYWNlKWE9SWUoaCxkLGEsZSksZz0hMDtlbHNlIGlmKHE9SWUoaCxkLGEsZSkpYT1nP0Ioe30sYSxxKTpCKGEscSksZz0hMTtoLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWguY2FsbGJhY2smJihxPWMuY2FsbGJhY2tMaXN0LG51bGw9PT1xJiYocT1jLmNhbGxiYWNrTGlzdD1bXSkscS5wdXNoKGgpKX1oPWgubmV4dH1udWxsIT09Yy5jYWxsYmFja0xpc3Q/Yi5lZmZlY3RUYWd8PTMyOm51bGwhPT1jLmZpcnN0fHxjLmhhc0ZvcmNlVXBkYXRlfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7cmV0dXJuIGF9XG5cdGZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9YS5jYWxsYmFja0xpc3Q7aWYobnVsbCE9PWMpZm9yKGEuY2FsbGJhY2tMaXN0PW51bGwsYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdLGU9ZC5jYWxsYmFjaztkLmNhbGxiYWNrPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGU/RShcIjE5MVwiLGUpOnZvaWQgMDtlLmNhbGwoYil9fVxuXHRmdW5jdGlvbiBMZShhLGIsYyxkKXtmdW5jdGlvbiBlKGEsYil7Yi51cGRhdGVyPWY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX12YXIgZj17aXNNb3VudGVkOmxkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihjLGQsZSl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZz1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmcscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7YShjLGcpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGMsZCxlKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBnPWIoYyk7SGUoYyx7ZXhwaXJhdGlvblRpbWU6ZyxwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTtcblx0YShjLGcpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYyxkKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBlPWIoYyk7SGUoYyx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6bnVsbCxjYWxsYmFjazpkLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMCxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTthKGMsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmUsY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPWtlKGEpLGY9Mj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzLGc9Zj9tZShhLGQpOkQ7Yj1uZXcgYyhiLGcpO2UoYSxiKTtmJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZCxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWcpO3JldHVybiBifSxtb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxcblx0Yil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLnN0YXRlTm9kZSxlPWQuc3RhdGV8fG51bGwsZz1hLnBlbmRpbmdQcm9wcztnP3ZvaWQgMDpFKFwiMTU4XCIpO3ZhciBoPWtlKGEpO2QucHJvcHM9ZztkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZT1lO2QucmVmcz1EO2QuY29udGV4dD1tZShhLGgpO251bGwhPWEudHlwZSYmbnVsbCE9YS50eXBlLnByb3RvdHlwZSYmITA9PT1hLnR5cGUucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCYmKGEuaW50ZXJuYWxDb250ZXh0VGFnfD0xKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJihlPWQuc3RhdGUsZC5jb21wb25lbnRXaWxsTW91bnQoKSxlIT09ZC5zdGF0ZSYmZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGQsZC5zdGF0ZSxudWxsKSxlPWEudXBkYXRlUXVldWUsbnVsbCE9PWUmJihkLnN0YXRlPUplKGMsYSxlLGQsZyxiKSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PVxuXHQ0KX0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsZSl7dmFyIGc9Yi5zdGF0ZU5vZGU7Zy5wcm9wcz1iLm1lbW9pemVkUHJvcHM7Zy5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHM7a3x8KGs9aCxudWxsPT1rP0UoXCIxNTlcIik6dm9pZCAwKTt2YXIgdT1nLmNvbnRleHQsej1rZShiKTt6PW1lKGIseik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8aD09PWsmJnU9PT16fHwodT1nLnN0YXRlLGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhrLHopLGcuc3RhdGUhPT11JiZmLmVucXVldWVSZXBsYWNlU3RhdGUoZyxnLnN0YXRlLG51bGwpKTt1PWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP0plKGEsYixiLnVwZGF0ZVF1ZXVlLGcsayxlKTp1O2lmKCEoaCE9PWt8fHUhPT1lfHxYLmN1cnJlbnR8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT1cblx0dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLCExO3ZhciBHPWs7aWYobnVsbD09PWh8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKUc9ITA7ZWxzZXt2YXIgST1iLnN0YXRlTm9kZSxMPWIudHlwZTtHPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBJLnNob3VsZENvbXBvbmVudFVwZGF0ZT9JLnNob3VsZENvbXBvbmVudFVwZGF0ZShHLGUseik6TC5wcm90b3R5cGUmJkwucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFlYShoLEcpfHwhZWEodSxlKTohMH1HPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoayxlLHopLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5cdGg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksYyhiLGspLGQoYixlKSk7Zy5wcm9wcz1rO2cuc3RhdGU9ZTtnLmNvbnRleHQ9ejtyZXR1cm4gR319fXZhciBRZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sUmU9UWU/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxTZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jYWxsXCIpOjYwMTA0LFRlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSxVZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsVmU9UWU/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsV2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuXHRmdW5jdGlvbiBYZShhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9V2UmJmFbV2VdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIFllPUFycmF5LmlzQXJyYXk7XG5cdGZ1bmN0aW9uIFplKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbCE9PWMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXtpZihiLl9vd25lcil7Yj1iLl9vd25lcjt2YXIgZD12b2lkIDA7YiYmKDIhPT1iLnRhZz9FKFwiMTEwXCIpOnZvaWQgMCxkPWIuc3RhdGVOb2RlKTtkP3ZvaWQgMDpFKFwiMTQ3XCIsYyk7dmFyIGU9XCJcIitjO2lmKG51bGwhPT1hJiZudWxsIT09YS5yZWYmJmEucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBhLnJlZjthPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PUQ/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2EuX3N0cmluZ1JlZj1lO3JldHVybiBhfVwic3RyaW5nXCIhPT10eXBlb2YgYz9FKFwiMTQ4XCIpOnZvaWQgMDtiLl9vd25lcj92b2lkIDA6RShcIjE0OVwiLGMpfXJldHVybiBjfVxuXHRmdW5jdGlvbiAkZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRShcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuXHRmdW5jdGlvbiBhZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXNlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuXHQyLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj12ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1aZShiLGMpLGRbXCJyZXR1cm5cIl09YSxkO2Q9dGUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKTtkLnJlZj1aZShiLGMpO2RbXCJyZXR1cm5cIl09YTtyZXR1cm4gZH1mdW5jdGlvbiBxKGEsYixjLGQpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9d2UoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO1xuXHRiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8OSE9PWIudGFnKXJldHVybiBiPXhlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksYi50eXBlPWMudmFsdWUsYltcInJldHVyblwiXT1hLGI7Yj1lKGIsbnVsbCxkKTtiLnR5cGU9Yy52YWx1ZTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geShhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9eWUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPXVlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5cdGQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dmUoXCJcIitiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFJlOmlmKGIudHlwZT09PVZlKXJldHVybiBiPXVlKGIucHJvcHMuY2hpbGRyZW4sYS5pbnRlcm5hbENvbnRleHRUYWcsYyxiLmtleSksYltcInJldHVyblwiXT1hLGI7Yz10ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpO2MucmVmPVplKG51bGwsYik7Y1tcInJldHVyblwiXT1hO3JldHVybiBjO2Nhc2UgU2U6cmV0dXJuIGI9d2UoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYjtjYXNlIFRlOnJldHVybiBjPXhlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5cdGMpLGMudHlwZT1iLnZhbHVlLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgVWU6cmV0dXJuIGI9eWUoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihZZShiKXx8WGUoYikpcmV0dXJuIGI9dWUoYixhLmludGVybmFsQ29udGV4dFRhZyxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiOyRlKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gRyhhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBSZTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PVZlP3UoYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBTZTpyZXR1cm4gYy5rZXk9PT1lP3EoYSxiLGMsZCk6bnVsbDtjYXNlIFRlOnJldHVybiBudWxsPT09XG5cdGU/dihhLGIsYyxkKTpudWxsO2Nhc2UgVWU6cmV0dXJuIGMua2V5PT09ZT95KGEsYixjLGQpOm51bGx9aWYoWWUoYyl8fFhlKGMpKXJldHVybiBudWxsIT09ZT9udWxsOnUoYSxiLGMsZCxudWxsKTskZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgUmU6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PVZlP3UoYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIFNlOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxxKGIsYSxkLGUpO2Nhc2UgVGU6cmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsdihiLGEsZCxlKTtjYXNlIFVlOnJldHVybiBhPVxuXHRhLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwseShiLGEsZCxlKX1pZihZZShkKXx8WGUoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsdShiLGEsZCxlLG51bGwpOyRlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChlLGcsbSxBKXtmb3IodmFyIGg9bnVsbCxyPW51bGwsbj1nLHc9Zz0wLGs9bnVsbDtudWxsIT09biYmdzxtLmxlbmd0aDt3Kyspe24uaW5kZXg+dz8oaz1uLG49bnVsbCk6az1uLnNpYmxpbmc7dmFyIHg9RyhlLG4sbVt3XSxBKTtpZihudWxsPT09eCl7bnVsbD09PW4mJihuPWspO2JyZWFrfWEmJm4mJm51bGw9PT14LmFsdGVybmF0ZSYmYihlLG4pO2c9Zih4LGcsdyk7bnVsbD09PXI/aD14OnIuc2libGluZz14O3I9eDtuPWt9aWYodz09PW0ubGVuZ3RoKXJldHVybiBjKGUsbiksaDtpZihudWxsPT09bil7Zm9yKDt3PG0ubGVuZ3RoO3crKylpZihuPXooZSxtW3ddLEEpKWc9ZihuLGcsdyksbnVsbD09PXI/aD1uOnIuc2libGluZz1uLHI9bjtyZXR1cm4gaH1mb3Iobj1cblx0ZChlLG4pO3c8bS5sZW5ndGg7dysrKWlmKGs9SShuLGUsdyxtW3ddLEEpKXtpZihhJiZudWxsIT09ay5hbHRlcm5hdGUpbltcImRlbGV0ZVwiXShudWxsPT09ay5rZXk/dzprLmtleSk7Zz1mKGssZyx3KTtudWxsPT09cj9oPWs6ci5zaWJsaW5nPWs7cj1rfWEmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGh9ZnVuY3Rpb24gTihlLGcsbSxBKXt2YXIgaD1YZShtKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgaD9FKFwiMTUwXCIpOnZvaWQgMDttPWguY2FsbChtKTtudWxsPT1tP0UoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgcj1oPW51bGwsbj1nLHc9Zz0wLGs9bnVsbCx4PW0ubmV4dCgpO251bGwhPT1uJiYheC5kb25lO3crKyx4PW0ubmV4dCgpKXtuLmluZGV4Pnc/KGs9bixuPW51bGwpOms9bi5zaWJsaW5nO3ZhciBKPUcoZSxuLHgudmFsdWUsQSk7aWYobnVsbD09PUope258fChuPWspO2JyZWFrfWEmJm4mJm51bGw9PT1KLmFsdGVybmF0ZSYmYihlLG4pO2c9ZihKLFxuXHRnLHcpO251bGw9PT1yP2g9SjpyLnNpYmxpbmc9SjtyPUo7bj1rfWlmKHguZG9uZSlyZXR1cm4gYyhlLG4pLGg7aWYobnVsbD09PW4pe2Zvcig7IXguZG9uZTt3KysseD1tLm5leHQoKSl4PXooZSx4LnZhbHVlLEEpLG51bGwhPT14JiYoZz1mKHgsZyx3KSxudWxsPT09cj9oPXg6ci5zaWJsaW5nPXgscj14KTtyZXR1cm4gaH1mb3Iobj1kKGUsbik7IXguZG9uZTt3KysseD1tLm5leHQoKSlpZih4PUkobixlLHcseC52YWx1ZSxBKSxudWxsIT09eCl7aWYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlKW5bXCJkZWxldGVcIl0obnVsbD09PXgua2V5P3c6eC5rZXkpO2c9Zih4LGcsdyk7bnVsbD09PXI/aD14OnIuc2libGluZz14O3I9eH1hJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBofXJldHVybiBmdW5jdGlvbihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1WZSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtcblx0dmFyIG09XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihtKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFJlOmE6e3ZhciByPWYua2V5O2ZvcihtPWQ7bnVsbCE9PW07KXtpZihtLmtleT09PXIpaWYoMTA9PT1tLnRhZz9mLnR5cGU9PT1WZTptLnR5cGU9PT1mLnR5cGUpe2MoYSxtLnNpYmxpbmcpO2Q9ZShtLGYudHlwZT09PVZlP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1aZShtLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxtKTticmVha31lbHNlIGIoYSxtKTttPW0uc2libGluZ31mLnR5cGU9PT1WZT8oZD11ZShmLnByb3BzLmNoaWxkcmVuLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihoPXRlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCksaC5yZWY9WmUoZCxmKSxoW1wicmV0dXJuXCJdPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIFNlOmE6e2ZvcihtPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1cblx0bSlpZig3PT09ZC50YWcpe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYsaCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9d2UoZixhLmludGVybmFsQ29udGV4dFRhZyxoKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgVGU6YTp7aWYobnVsbCE9PWQpaWYoOT09PWQudGFnKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxudWxsLGgpO2QudHlwZT1mLnZhbHVlO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNlIGMoYSxkKTtkPXhlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCk7ZC50eXBlPWYudmFsdWU7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIFVlOmE6e2ZvcihtPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1tKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1cblx0Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9eWUoZixhLmludGVybmFsQ29udGV4dFRhZyxoKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpKTooYyhhLGQpLGQ9dmUoZixhLmludGVybmFsQ29udGV4dFRhZyxoKSksZFtcInJldHVyblwiXT1hLGE9ZCxnKGEpO2lmKFllKGYpKXJldHVybiBMKGEsZCxmLGgpO2lmKFhlKGYpKXJldHVybiBOKGEsZCxmLGgpO20mJiRlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpoPWEudHlwZSxFKFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8XG5cdGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIGJmPWFmKCEwKSxjZj1hZighMSk7XG5cdGZ1bmN0aW9uIGRmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtiLmNoaWxkPW51bGw9PT1hP2NmKGIsbnVsbCxjLGQpOmJmKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1iLnJlZjtudWxsPT09Y3x8YSYmYS5yZWY9PT1jfHwoYi5lZmZlY3RUYWd8PTEyOCl9ZnVuY3Rpb24gaChhLGIsYyxkKXtnKGEsYik7aWYoIWMpcmV0dXJuIGQmJnJlKGIsITEpLHEoYSxiKTtjPWIuc3RhdGVOb2RlO2lkLmN1cnJlbnQ9Yjt2YXIgZT1jLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2YoYSxiLGUpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnJlKGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGsoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9vZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZvZShhLFxuXHRiLmNvbnRleHQsITEpO0koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHEoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RShcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz1zZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXNlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHYoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzprKGIpO2JyZWFrO2Nhc2UgMjpxZShiKTticmVhaztjYXNlIDQ6SShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pfXJldHVybiBudWxsfXZhciB5PWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsdT1hLnVzZVN5bmNTY2hlZHVsaW5nLHo9YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLFxuXHRHPWIucHVzaEhvc3RDb250ZXh0LEk9Yi5wdXNoSG9zdENvbnRhaW5lcixMPWMuZW50ZXJIeWRyYXRpb25TdGF0ZSxOPWMucmVzZXRIeWRyYXRpb25TdGF0ZSxKPWMudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7YT1MZShkLGUsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciB3PWEuYWRvcHRDbGFzc0luc3RhbmNlLG09YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLEE9YS5tb3VudENsYXNzSW5zdGFuY2UsT2I9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHYoYSxiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9FKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxyPWtlKGIpO3I9bWUoYixyKTtkPWQoZSxyKTtiLmVmZmVjdFRhZ3w9XG5cdDE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyPyhiLnRhZz0yLGU9cWUoYiksdyhiLGQpLEEoYixjKSxiPWgoYSxiLCEwLGUpKTooYi50YWc9MSxmKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTphOntlPWIudHlwZTtjPWIucGVuZGluZ1Byb3BzO2Q9Yi5tZW1vaXplZFByb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9ZCk7ZWxzZSBpZihudWxsPT09Y3x8ZD09PWMpe2I9cShhLGIpO2JyZWFrIGF9ZD1rZShiKTtkPW1lKGIsZCk7ZT1lKGMsZCk7Yi5lZmZlY3RUYWd8PTE7ZihhLGIsZSk7Yi5tZW1vaXplZFByb3BzPWM7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgMjpyZXR1cm4gZT1xZShiKSxkPXZvaWQgMCxudWxsPT09YT9iLnN0YXRlTm9kZT9FKFwiMTUzXCIpOihtKGIsYi5wZW5kaW5nUHJvcHMpLEEoYixjKSxkPSEwKTpkPU9iKGEsYixjKSxoKGEsYixkLGUpO2Nhc2UgMzpyZXR1cm4gayhiKSxcblx0ZT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1lPyhkPWIubWVtb2l6ZWRTdGF0ZSxlPUplKGEsYixlLG51bGwsbnVsbCxjKSxkPT09ZT8oTigpLGI9cShhLGIpKTooZD1lLmVsZW1lbnQscj1iLnN0YXRlTm9kZSwobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmci5oeWRyYXRlJiZMKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPWNmKGIsbnVsbCxkLGMpKTooTigpLGYoYSxiLGQpKSxiLm1lbW9pemVkU3RhdGU9ZSxiPWIuY2hpbGQpKTooTigpLGI9cShhLGIpKSxiO2Nhc2UgNTpHKGIpO251bGw9PT1hJiZKKGIpO2U9Yi50eXBlO3ZhciBuPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO251bGw9PT1kJiYoZD1uLG51bGw9PT1kP0UoXCIxNTRcIik6dm9pZCAwKTtyPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO1guY3VycmVudHx8bnVsbCE9PWQmJm4hPT1kPyhuPWQuY2hpbGRyZW4seShlLGQpP249bnVsbDpyJiZ5KGUscikmJihiLmVmZmVjdFRhZ3w9MTYpLGcoYSxiKSxcblx0MjE0NzQ4MzY0NyE9PWMmJiF1JiZ6KGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9MjE0NzQ4MzY0NyxiPW51bGwpOihmKGEsYixuKSxiLm1lbW9pemVkUHJvcHM9ZCxiPWIuY2hpbGQpKTpiPXEoYSxiKTtyZXR1cm4gYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZKKGIpLGE9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWEmJihhPWIubWVtb2l6ZWRQcm9wcyksYi5tZW1vaXplZFByb3BzPWEsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6ZT1iLnBlbmRpbmdQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWUmJihlPWEmJmEubWVtb2l6ZWRQcm9wcyxudWxsPT09ZT9FKFwiMTU0XCIpOnZvaWQgMCk7ZWxzZSBpZihudWxsPT09ZXx8Yi5tZW1vaXplZFByb3BzPT09ZSllPWIubWVtb2l6ZWRQcm9wcztkPWUuY2hpbGRyZW47Yi5zdGF0ZU5vZGU9bnVsbD09PWE/Y2YoYixiLnN0YXRlTm9kZSxkLGMpOmJmKGIsYi5zdGF0ZU5vZGUsZCxjKTtiLm1lbW9pemVkUHJvcHM9ZTtyZXR1cm4gYi5zdGF0ZU5vZGU7XG5cdGNhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDQ6YTp7SShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2U9Yi5wZW5kaW5nUHJvcHM7aWYoWC5jdXJyZW50KW51bGw9PT1lJiYoZT1hJiZhLm1lbW9pemVkUHJvcHMsbnVsbD09ZT9FKFwiMTU0XCIpOnZvaWQgMCk7ZWxzZSBpZihudWxsPT09ZXx8Yi5tZW1vaXplZFByb3BzPT09ZSl7Yj1xKGEsYik7YnJlYWsgYX1udWxsPT09YT9iLmNoaWxkPWJmKGIsbnVsbCxlLGMpOmYoYSxiLGUpO2IubWVtb2l6ZWRQcm9wcz1lO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDEwOmE6e2M9Yi5wZW5kaW5nUHJvcHM7aWYoWC5jdXJyZW50KW51bGw9PT1jJiYoYz1iLm1lbW9pemVkUHJvcHMpO2Vsc2UgaWYobnVsbD09PWN8fGIubWVtb2l6ZWRQcm9wcz09PWMpe2I9cShhLGIpO2JyZWFrIGF9ZihhLGIsYyk7Yi5tZW1vaXplZFByb3BzPWM7Yj1iLmNoaWxkfXJldHVybiBiO2RlZmF1bHQ6RShcIjE1NlwiKX19LGJlZ2luRmFpbGVkV29yazpmdW5jdGlvbihhLGIsXG5cdGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOnFlKGIpO2JyZWFrO2Nhc2UgMzprKGIpO2JyZWFrO2RlZmF1bHQ6RShcIjE1N1wiKX1iLmVmZmVjdFRhZ3w9NjQ7bnVsbD09PWE/Yi5jaGlsZD1udWxsOmIuY2hpbGQhPT1hLmNoaWxkJiYoYi5jaGlsZD1hLmNoaWxkKTtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXJldHVybiB2KGEsYik7Yi5maXJzdEVmZmVjdD1udWxsO2IubGFzdEVmZmVjdD1udWxsO2IuY2hpbGQ9bnVsbD09PWE/Y2YoYixudWxsLG51bGwsYyk6YmYoYixhLmNoaWxkLG51bGwsYyk7Mj09PWIudGFnJiYoYT1iLnN0YXRlTm9kZSxiLm1lbW9pemVkUHJvcHM9YS5wcm9wcyxiLm1lbW9pemVkU3RhdGU9YS5zdGF0ZSk7cmV0dXJuIGIuY2hpbGR9fX1cblx0ZnVuY3Rpb24gZWYoYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGU9YS5jcmVhdGVJbnN0YW5jZSxmPWEuY3JlYXRlVGV4dEluc3RhbmNlLGc9YS5hcHBlbmRJbml0aWFsQ2hpbGQsaD1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGs9YS5wcmVwYXJlVXBkYXRlLHE9YS5wZXJzaXN0ZW5jZSx2PWIuZ2V0Um9vdEhvc3RDb250YWluZXIseT1iLnBvcEhvc3RDb250ZXh0LHU9Yi5nZXRIb3N0Q29udGV4dCx6PWIucG9wSG9zdENvbnRhaW5lcixHPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxJPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsTD1jLnBvcEh5ZHJhdGlvblN0YXRlLE49dm9pZCAwLEo9dm9pZCAwLHc9dm9pZCAwO2EubXV0YXRpb24/KE49ZnVuY3Rpb24oKXt9LEo9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZkKGIpfSx3PWZ1bmN0aW9uKGEsYixjLGUpe2MhPT1lJiZkKGIpfSk6cT9FKFwiMjM1XCIpOkUoXCIyMzZcIik7XG5cdHJldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciBtPWIucGVuZGluZ1Byb3BzO2lmKG51bGw9PT1tKW09Yi5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMjE0NzQ4MzY0NyE9PWIuZXhwaXJhdGlvblRpbWV8fDIxNDc0ODM2NDc9PT1jKWIucGVuZGluZ1Byb3BzPW51bGw7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBuZShiKSxudWxsO2Nhc2UgMzp6KGIpO1YoWCxiKTtWKGllLGIpO209Yi5zdGF0ZU5vZGU7bS5wZW5kaW5nQ29udGV4dCYmKG0uY29udGV4dD1tLnBlbmRpbmdDb250ZXh0LG0ucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUwoYiksYi5lZmZlY3RUYWcmPS0zO04oYik7cmV0dXJuIG51bGw7Y2FzZSA1OnkoYik7Yz12KCk7dmFyIEE9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIHA9YS5tZW1vaXplZFByb3BzLHE9Yi5zdGF0ZU5vZGUseD11KCk7cT1cblx0ayhxLEEscCxtLGMseCk7SihhLGIscSxBLHAsbSxjKTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighbSlyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0UoXCIxNjZcIik6dm9pZCAwLG51bGw7YT11KCk7aWYoTChiKSlHKGIsYyxhKSYmZChiKTtlbHNle2E9ZShBLG0sYyxhLGIpO2E6Zm9yKHA9Yi5jaGlsZDtudWxsIT09cDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnKWcoYSxwLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09cC50YWcmJm51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWlmKHA9PT1iKWJyZWFrO2Zvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31oKGEsQSxtLGMpJiZkKGIpO2Iuc3RhdGVOb2RlPWF9bnVsbCE9PWIucmVmJiZcblx0KGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl3KGEsYixhLm1lbW9pemVkUHJvcHMsbSk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIG0pcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9FKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9digpO2M9dSgpO0woYik/SShiKSYmZChiKTpiLnN0YXRlTm9kZT1mKG0sYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzoobT1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpFKFwiMTY1XCIpO2IudGFnPTg7QT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylFKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKUEucHVzaChwLnR5cGUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PVxuXHRwW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31wPW0uaGFuZGxlcjttPXAobS5wcm9wcyxBKTtiLmNoaWxkPWJmKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLG0sYyk7cmV0dXJuIGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBiLnRhZz03LG51bGw7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiB6KGIpLE4oYiksbnVsbDtjYXNlIDA6RShcIjE2N1wiKTtkZWZhdWx0OkUoXCIxNTZcIil9fX19XG5cdGZ1bmN0aW9uIGZmKGEsYil7ZnVuY3Rpb24gYyhhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09Yyl0cnl7YyhudWxsKX1jYXRjaChBKXtiKGEsQSl9fWZ1bmN0aW9uIGQoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEVlJiZFZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpjKGEpO3ZhciBkPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtkLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goQSl7YihhLEEpfWJyZWFrO2Nhc2UgNTpjKGEpO2JyZWFrO2Nhc2UgNzplKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6ayYmZyhhKX19ZnVuY3Rpb24gZShhKXtmb3IodmFyIGI9YTs7KWlmKGQoYiksbnVsbD09PWIuY2hpbGR8fGsmJjQ9PT1iLnRhZyl7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fFxuXHRiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBmKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxmPXZvaWQgMCxnPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9FKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpmPWMuc3RhdGVOb2RlO2c9ITE7YnJlYWsgYTtjYXNlIDM6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyllKGIpLGc/SihmLGIuc3RhdGVOb2RlKTpOKGYsYi5zdGF0ZU5vZGUpO1xuXHRlbHNlIGlmKDQ9PT1iLnRhZz9mPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86ZChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319dmFyIGg9YS5nZXRQdWJsaWNJbnN0YW5jZSxrPWEubXV0YXRpb247YT1hLnBlcnNpc3RlbmNlO2t8fChhP0UoXCIyMzVcIik6RShcIjIzNlwiKSk7dmFyIHE9ay5jb21taXRNb3VudCx2PWsuY29tbWl0VXBkYXRlLHk9ay5yZXNldFRleHRDb250ZW50LHU9ay5jb21taXRUZXh0VXBkYXRlLHo9ay5hcHBlbmRDaGlsZCxHPWsuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcixJPWsuaW5zZXJ0QmVmb3JlLEw9ay5pbnNlcnRJbkNvbnRhaW5lckJlZm9yZSxcblx0Tj1rLnJlbW92ZUNoaWxkLEo9ay5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7eShhLnN0YXRlTm9kZSl9LGNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGYoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RShcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkUoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJih5KGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxmKGNbXCJyZXR1cm5cIl0pKXtjPVxuXHRudWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0woYixlLnN0YXRlTm9kZSxjKTpJKGIsZS5zdGF0ZU5vZGUsYyk6ZD9HKGIsZS5zdGF0ZU5vZGUpOnooYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09XG5cdGEpcmV0dXJuO2U9ZVtcInJldHVyblwiXX1lLnNpYmxpbmdbXCJyZXR1cm5cIl09ZVtcInJldHVyblwiXTtlPWUuc2libGluZ319LGNvbW1pdERlbGV0aW9uOmZ1bmN0aW9uKGEpe2coYSk7YVtcInJldHVyblwiXT1udWxsO2EuY2hpbGQ9bnVsbDthLmFsdGVybmF0ZSYmKGEuYWx0ZXJuYXRlLmNoaWxkPW51bGwsYS5hbHRlcm5hdGVbXCJyZXR1cm5cIl09bnVsbCl9LGNvbW1pdFdvcms6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJnYoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/RShcIjE2MlwiKTp2b2lkIDA7Yz1iLm1lbW9pemVkUHJvcHM7dShiLnN0YXRlTm9kZSxudWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5cdGMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RShcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgYz1iLnN0YXRlTm9kZTtpZihiLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1hKWMucHJvcHM9Yi5tZW1vaXplZFByb3BzLGMuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGMuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWEubWVtb2l6ZWRQcm9wczthPWEubWVtb2l6ZWRTdGF0ZTtjLnByb3BzPWIubWVtb2l6ZWRQcm9wcztjLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtjLmNvbXBvbmVudERpZFVwZGF0ZShkLGEpfWI9Yi51cGRhdGVRdWV1ZTtudWxsIT09YiYmS2UoYixjKTticmVhaztjYXNlIDM6Yz1iLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZLZShjLG51bGwhPT1iLmNoaWxkP2IuY2hpbGQuc3RhdGVOb2RlOm51bGwpO2JyZWFrO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO251bGw9PT1hJiZiLmVmZmVjdFRhZyY0JiZxKGMsXG5cdGIudHlwZSxiLm1lbW9pemVkUHJvcHMsYik7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkUoXCIxNjNcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmIoaChjKSk7YnJlYWs7ZGVmYXVsdDpiKGMpfX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiZhKG51bGwpfX19dmFyIGdmPXt9O1xuXHRmdW5jdGlvbiBoZihhKXtmdW5jdGlvbiBiKGEpe2E9PT1nZj9FKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX12YXIgYz1hLmdldENoaWxkSG9zdENvbnRleHQsZD1hLmdldFJvb3RIb3N0Q29udGV4dCxlPXtjdXJyZW50OmdmfSxmPXtjdXJyZW50OmdmfSxnPXtjdXJyZW50OmdmfTtyZXR1cm57Z2V0SG9zdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYihlLmN1cnJlbnQpfSxnZXRSb290SG9zdENvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybiBiKGcuY3VycmVudCl9LHBvcEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSl7VihlLGEpO1YoZixhKTtWKGcsYSl9LHBvcEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2YuY3VycmVudD09PWEmJihWKGUsYSksVihmLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXtXKGcsYixhKTtiPWQoYik7VyhmLGEsYSk7VyhlLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgZD1iKGcuY3VycmVudCksaD1iKGUuY3VycmVudCk7XG5cdGQ9YyhoLGEudHlwZSxkKTtoIT09ZCYmKFcoZixhLGEpLFcoZSxkLGEpKX0scmVzZXRIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7ZS5jdXJyZW50PWdmO2cuY3VycmVudD1nZn19fVxuXHRmdW5jdGlvbiBqZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IFkoNSxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9ZyhiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3k9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuXHRhPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RShcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtFKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsZz1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsaD1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQscT1hLmh5ZHJhdGVJbnN0YW5jZSx2PWEuaHlkcmF0ZVRleHRJbnN0YW5jZSx5PW51bGwsdT1udWxsLHo9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7dT1cblx0ayhhLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTt5PWE7cmV0dXJuIHo9ITB9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt1PXk9bnVsbDt6PSExfSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbihhKXtpZih6KXt2YXIgZD11O2lmKGQpe2lmKCFjKGEsZCkpe2Q9aChkKTtpZighZHx8IWMoYSxkKSl7YS5lZmZlY3RUYWd8PTI7ej0hMTt5PWE7cmV0dXJufWIoeSx1KX15PWE7dT1rKGQpfWVsc2UgYS5lZmZlY3RUYWd8PTIsej0hMSx5PWF9fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXtiPXEoYS5zdGF0ZU5vZGUsYS50eXBlLGEubWVtb2l6ZWRQcm9wcyxiLGMsYSk7YS51cGRhdGVRdWV1ZT1iO3JldHVybiBudWxsIT09Yj8hMDohMX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYS5zdGF0ZU5vZGUsYS5tZW1vaXplZFByb3BzLGEpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXtpZihhIT09XG5cdHkpcmV0dXJuITE7aWYoIXopcmV0dXJuIGQoYSksej0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXU7YzspYihhLGMpLGM9aChjKTtkKGEpO3U9eT9oKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5cdGZ1bmN0aW9uIGtmKGEpe2Z1bmN0aW9uIGIoYSl7UWI9amE9ITA7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5jdXJyZW50PT09YT9FKFwiMTc3XCIpOnZvaWQgMDtiLmlzUmVhZHlGb3JDb21taXQ9ITE7aWQuY3VycmVudD1udWxsO2lmKDE8YS5lZmZlY3RUYWcpaWYobnVsbCE9PWEubGFzdEVmZmVjdCl7YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTt2YXIgYz1hLmZpcnN0RWZmZWN0fWVsc2UgYz1hO2Vsc2UgYz1hLmZpcnN0RWZmZWN0O3lnKCk7Zm9yKHQ9YztudWxsIT09dDspe3ZhciBkPSExLGU9dm9pZCAwO3RyeXtmb3IoO251bGwhPT10Oyl7dmFyIGY9dC5lZmZlY3RUYWc7ZiYxNiYmemcodCk7aWYoZiYxMjgpe3ZhciBnPXQuYWx0ZXJuYXRlO251bGwhPT1nJiZBZyhnKX1zd2l0Y2goZiYtMjQyKXtjYXNlIDI6TmUodCk7dC5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpOZSh0KTt0LmVmZmVjdFRhZyY9LTM7T2UodC5hbHRlcm5hdGUsdCk7YnJlYWs7Y2FzZSA0Ok9lKHQuYWx0ZXJuYXRlLFxuXHR0KTticmVhaztjYXNlIDg6U2M9ITAsQmcodCksU2M9ITF9dD10Lm5leHRFZmZlY3R9fWNhdGNoKFRjKXtkPSEwLGU9VGN9ZCYmKG51bGw9PT10P0UoXCIxNzhcIik6dm9pZCAwLGgodCxlKSxudWxsIT09dCYmKHQ9dC5uZXh0RWZmZWN0KSl9Q2coKTtiLmN1cnJlbnQ9YTtmb3IodD1jO251bGwhPT10Oyl7Yz0hMTtkPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dDspe3ZhciBrPXQuZWZmZWN0VGFnO2smMzYmJkRnKHQuYWx0ZXJuYXRlLHQpO2smMTI4JiZFZyh0KTtpZihrJjY0KXN3aXRjaChlPXQsZj12b2lkIDAsbnVsbCE9PVImJihmPVIuZ2V0KGUpLFJbXCJkZWxldGVcIl0oZSksbnVsbD09ZiYmbnVsbCE9PWUuYWx0ZXJuYXRlJiYoZT1lLmFsdGVybmF0ZSxmPVIuZ2V0KGUpLFJbXCJkZWxldGVcIl0oZSkpKSxudWxsPT1mP0UoXCIxODRcIik6dm9pZCAwLGUudGFnKXtjYXNlIDI6ZS5zdGF0ZU5vZGUuY29tcG9uZW50RGlkQ2F0Y2goZi5lcnJvcix7Y29tcG9uZW50U3RhY2s6Zi5jb21wb25lbnRTdGFja30pO1xuXHRicmVhaztjYXNlIDM6bnVsbD09PWNhJiYoY2E9Zi5lcnJvcik7YnJlYWs7ZGVmYXVsdDpFKFwiMTU3XCIpfXZhciBRYz10Lm5leHRFZmZlY3Q7dC5uZXh0RWZmZWN0PW51bGw7dD1RY319Y2F0Y2goVGMpe2M9ITAsZD1UY31jJiYobnVsbD09PXQ/RShcIjE3OFwiKTp2b2lkIDAsaCh0LGQpLG51bGwhPT10JiYodD10Lm5leHRFZmZlY3QpKX1qYT1RYj0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRGUmJkRlKGEuc3RhdGVOb2RlKTtoYSYmKGhhLmZvckVhY2goRyksaGE9bnVsbCk7bnVsbCE9PWNhJiYoYT1jYSxjYT1udWxsLE9iKGEpKTtiPWIuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHFhPVI9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gYyhhKXtmb3IoOzspe3ZhciBiPUZnKGEuYWx0ZXJuYXRlLGEsSCksYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO3ZhciBlPWE7aWYoMjE0NzQ4MzY0Nz09PUh8fDIxNDc0ODM2NDchPT1lLmV4cGlyYXRpb25UaW1lKXtpZigyIT09ZS50YWcmJjMhPT1cblx0ZS50YWcpdmFyIGY9MDtlbHNlIGY9ZS51cGRhdGVRdWV1ZSxmPW51bGw9PT1mPzA6Zi5leHBpcmF0aW9uVGltZTtmb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9Zy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtcblx0aWYobnVsbCE9PWMpYT1jO2Vsc2V7YS5zdGF0ZU5vZGUuaXNSZWFkeUZvckNvbW1pdD0hMDticmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhKXt2YXIgYj1yZyhhLmFsdGVybmF0ZSxhLEgpO251bGw9PT1iJiYoYj1jKGEpKTtpZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZShhKXt2YXIgYj1HZyhhLmFsdGVybmF0ZSxhLEgpO251bGw9PT1iJiYoYj1jKGEpKTtpZC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhKXtpZihudWxsIT09Uil7aWYoISgwPT09SHx8SD5hKSlpZihIPD1VYylmb3IoO251bGwhPT1GOylGPWsoRik/ZShGKTpkKEYpO2Vsc2UgZm9yKDtudWxsIT09RiYmIUEoKTspRj1rKEYpP2UoRik6ZChGKX1lbHNlIGlmKCEoMD09PUh8fEg+YSkpaWYoSDw9VWMpZm9yKDtudWxsIT09RjspRj1kKEYpO2Vsc2UgZm9yKDtudWxsIT09RiYmIUEoKTspRj1kKEYpfWZ1bmN0aW9uIGcoYSxiKXtqYT9FKFwiMjQzXCIpOnZvaWQgMDtqYT0hMDthLmlzUmVhZHlGb3JDb21taXQ9XG5cdCExO2lmKGEhPT1yYXx8YiE9PUh8fG51bGw9PT1GKXtmb3IoOy0xPGhlOylnZVtoZV09bnVsbCxoZS0tO2plPUQ7aWUuY3VycmVudD1EO1guY3VycmVudD0hMTt4KCk7cmE9YTtIPWI7Rj1zZShyYS5jdXJyZW50LG51bGwsYil9dmFyIGM9ITEsZD1udWxsO3RyeXtmKGIpfWNhdGNoKFJjKXtjPSEwLGQ9UmN9Zm9yKDtjOyl7aWYoZWIpe2NhPWQ7YnJlYWt9dmFyIGc9RjtpZihudWxsPT09ZyllYj0hMDtlbHNle3ZhciBrPWgoZyxkKTtudWxsPT09az9FKFwiMTgzXCIpOnZvaWQgMDtpZighZWIpe3RyeXtjPWs7ZD1iO2ZvcihrPWM7bnVsbCE9PWc7KXtzd2l0Y2goZy50YWcpe2Nhc2UgMjpuZShnKTticmVhaztjYXNlIDU6cWcoZyk7YnJlYWs7Y2FzZSAzOnAoZyk7YnJlYWs7Y2FzZSA0OnAoZyl9aWYoZz09PWt8fGcuYWx0ZXJuYXRlPT09aylicmVhaztnPWdbXCJyZXR1cm5cIl19Rj1lKGMpO2YoZCl9Y2F0Y2goUmMpe2M9ITA7ZD1SYztjb250aW51ZX1icmVha319fWI9Y2E7ZWI9amE9ITE7Y2E9XG5cdG51bGw7bnVsbCE9PWImJk9iKGIpO3JldHVybiBhLmlzUmVhZHlGb3JDb21taXQ/YS5jdXJyZW50LmFsdGVybmF0ZTpudWxsfWZ1bmN0aW9uIGgoYSxiKXt2YXIgYz1pZC5jdXJyZW50PW51bGwsZD0hMSxlPSExLGY9bnVsbDtpZigzPT09YS50YWcpYz1hLHEoYSkmJihlYj0hMCk7ZWxzZSBmb3IodmFyIGc9YVtcInJldHVyblwiXTtudWxsIT09ZyYmbnVsbD09PWM7KXsyPT09Zy50YWc/XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuc3RhdGVOb2RlLmNvbXBvbmVudERpZENhdGNoJiYoZD0hMCxmPWpkKGcpLGM9ZyxlPSEwKTozPT09Zy50YWcmJihjPWcpO2lmKHEoZykpe2lmKFNjfHxudWxsIT09aGEmJihoYS5oYXMoZyl8fG51bGwhPT1nLmFsdGVybmF0ZSYmaGEuaGFzKGcuYWx0ZXJuYXRlKSkpcmV0dXJuIG51bGw7Yz1udWxsO2U9ITF9Zz1nW1wicmV0dXJuXCJdfWlmKG51bGwhPT1jKXtudWxsPT09cWEmJihxYT1uZXcgU2V0KTtxYS5hZGQoYyk7dmFyIGg9XCJcIjtnPWE7ZG97YTpzd2l0Y2goZy50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgaz1cblx0Zy5fZGVidWdPd25lcixRYz1nLl9kZWJ1Z1NvdXJjZTt2YXIgbT1qZChnKTt2YXIgbj1udWxsO2smJihuPWpkKGspKTtrPVFjO209XCJcXG4gICAgaW4gXCIrKG18fFwiVW5rbm93blwiKSsoaz9cIiAoYXQgXCIray5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2subGluZU51bWJlcitcIilcIjpuP1wiIChjcmVhdGVkIGJ5IFwiK24rXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0Om09XCJcIn1oKz1tO2c9Z1tcInJldHVyblwiXX13aGlsZShnKTtnPWg7YT1qZChhKTtudWxsPT09UiYmKFI9bmV3IE1hcCk7Yj17Y29tcG9uZW50TmFtZTphLGNvbXBvbmVudFN0YWNrOmcsZXJyb3I6YixlcnJvckJvdW5kYXJ5OmQ/Yy5zdGF0ZU5vZGU6bnVsbCxlcnJvckJvdW5kYXJ5Rm91bmQ6ZCxlcnJvckJvdW5kYXJ5TmFtZTpmLHdpbGxSZXRyeTplfTtSLnNldChjLGIpO3RyeXt2YXIgcD1iLmVycm9yO3AmJnAuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihwKX1jYXRjaChWYyl7VmMmJlxuXHRWYy5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKFZjKX1RYj8obnVsbD09PWhhJiYoaGE9bmV3IFNldCksaGEuYWRkKGMpKTpHKGMpO3JldHVybiBjfW51bGw9PT1jYSYmKGNhPWIpO3JldHVybiBudWxsfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIG51bGwhPT1SJiYoUi5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmUi5oYXMoYS5hbHRlcm5hdGUpKX1mdW5jdGlvbiBxKGEpe3JldHVybiBudWxsIT09cWEmJihxYS5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmcWEuaGFzKGEuYWx0ZXJuYXRlKSl9ZnVuY3Rpb24gdigpe3JldHVybiAyMCooKChJKCkrMTAwKS8yMHwwKSsxKX1mdW5jdGlvbiB5KGEpe3JldHVybiAwIT09a2E/a2E6amE/UWI/MTpIOiFIZ3x8YS5pbnRlcm5hbENvbnRleHRUYWcmMT92KCk6MX1mdW5jdGlvbiB1KGEsYil7cmV0dXJuIHooYSxiLCExKX1mdW5jdGlvbiB6KGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxcblx0YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9YjtudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmIpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgYz1hLnN0YXRlTm9kZTshamEmJmM9PT1yYSYmYjxIJiYoRj1yYT1udWxsLEg9MCk7dmFyIGQ9YyxlPWI7UmI+SWcmJkUoXCIxODVcIik7aWYobnVsbD09PWQubmV4dFNjaGVkdWxlZFJvb3QpZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1lLG51bGw9PT1PPyhzYT1PPWQsZC5uZXh0U2NoZWR1bGVkUm9vdD1kKTooTz1PLm5leHRTY2hlZHVsZWRSb290PWQsTy5uZXh0U2NoZWR1bGVkUm9vdD1zYSk7ZWxzZXt2YXIgZj1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1mfHxlPGYpZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1lfUZhfHwobGE/XG5cdFNiJiYobWE9ZCxuYT0xLG0obWEsbmEpKToxPT09ZT93KDEsbnVsbCk6TChlKSk7IWphJiZjPT09cmEmJmI8SCYmKEY9cmE9bnVsbCxIPTApfWVsc2UgYnJlYWs7YT1hW1wicmV0dXJuXCJdfX1mdW5jdGlvbiBHKGEpe3ooYSwxLCEwKX1mdW5jdGlvbiBJKCl7cmV0dXJuIFVjPSgoV2MoKS1QZSkvMTB8MCkrMn1mdW5jdGlvbiBMKGEpe2lmKDAhPT1UYil7aWYoYT5UYilyZXR1cm47SmcoWGMpfXZhciBiPVdjKCktUGU7VGI9YTtYYz1LZyhKLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1mdW5jdGlvbiBOKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PU8pZm9yKHZhciBjPU8sZD1zYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Tz9FKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7c2E9Tz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09c2Epc2E9ZT1kLm5leHRTY2hlZHVsZWRSb290LFxuXHRPLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PU8pe089YztPLm5leHRTY2hlZHVsZWRSb290PXNhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1PKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9bWE7bnVsbCE9PWMmJmM9PT1iP1JiKys6UmI9MDttYT1iO25hPWF9ZnVuY3Rpb24gSihhKXt3KDAsYSl9ZnVuY3Rpb24gdyhhLGIpe2ZiPWI7Zm9yKE4oKTtudWxsIT09bWEmJjAhPT1uYSYmKDA9PT1hfHxuYTw9YSkmJiFZYzspbShtYSxuYSksTigpO251bGwhPT1mYiYmKFRiPTAsWGM9LTEpOzAhPT1uYSYmTChuYSk7ZmI9bnVsbDtZYz0hMTtSYj0wO2lmKFViKXRocm93IGE9WmMsWmM9XG5cdG51bGwsVWI9ITEsYTt9ZnVuY3Rpb24gbShhLGMpe0ZhP0UoXCIyNDVcIik6dm9pZCAwO0ZhPSEwO2lmKGM8PUkoKSl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/KGEuZmluaXNoZWRXb3JrPW51bGwsYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWcoYSxjKSxudWxsIT09ZCYmKGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD8oYS5maW5pc2hlZFdvcms9bnVsbCxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9ZyhhLGMpLG51bGwhPT1kJiYoQSgpP2EuZmluaXNoZWRXb3JrPWQ6YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKSk7RmE9ITF9ZnVuY3Rpb24gQSgpe3JldHVybiBudWxsPT09ZmJ8fGZiLnRpbWVSZW1haW5pbmcoKT5MZz8hMTpZYz0hMH1mdW5jdGlvbiBPYihhKXtudWxsPT09bWE/RShcIjI0NlwiKTpcblx0dm9pZCAwO21hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7VWJ8fChVYj0hMCxaYz1hKX12YXIgcj1oZihhKSxuPWpmKGEpLHA9ci5wb3BIb3N0Q29udGFpbmVyLHFnPXIucG9wSG9zdENvbnRleHQseD1yLnJlc2V0SG9zdENvbnRhaW5lcixNZT1kZihhLHIsbix1LHkpLHJnPU1lLmJlZ2luV29yayxHZz1NZS5iZWdpbkZhaWxlZFdvcmssRmc9ZWYoYSxyLG4pLmNvbXBsZXRlV29yaztyPWZmKGEsaCk7dmFyIHpnPXIuY29tbWl0UmVzZXRUZXh0Q29udGVudCxOZT1yLmNvbW1pdFBsYWNlbWVudCxCZz1yLmNvbW1pdERlbGV0aW9uLE9lPXIuY29tbWl0V29yayxEZz1yLmNvbW1pdExpZmVDeWNsZXMsRWc9ci5jb21taXRBdHRhY2hSZWYsQWc9ci5jb21taXREZXRhY2hSZWYsV2M9YS5ub3csS2c9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssSmc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLEhnPWEudXNlU3luY1NjaGVkdWxpbmcseWc9YS5wcmVwYXJlRm9yQ29tbWl0LENnPWEucmVzZXRBZnRlckNvbW1pdCxcblx0UGU9V2MoKSxVYz0yLGthPTAsamE9ITEsRj1udWxsLHJhPW51bGwsSD0wLHQ9bnVsbCxSPW51bGwscWE9bnVsbCxoYT1udWxsLGNhPW51bGwsZWI9ITEsUWI9ITEsU2M9ITEsc2E9bnVsbCxPPW51bGwsVGI9MCxYYz0tMSxGYT0hMSxtYT1udWxsLG5hPTAsWWM9ITEsVWI9ITEsWmM9bnVsbCxmYj1udWxsLGxhPSExLFNiPSExLElnPTFFMyxSYj0wLExnPTE7cmV0dXJue2NvbXB1dGVBc3luY0V4cGlyYXRpb246dixjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOnksc2NoZWR1bGVXb3JrOnUsYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1sYTtsYT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsobGE9Yyl8fEZhfHx3KDEsbnVsbCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe2lmKGxhJiYhU2Ipe1NiPSEwO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7U2I9ITF9fXJldHVybiBhKCl9LGZsdXNoU3luYzpmdW5jdGlvbihhKXt2YXIgYj1sYTtsYT0hMDt0cnl7YTp7dmFyIGM9XG5cdGthO2thPTE7dHJ5e3ZhciBkPWEoKTticmVhayBhfWZpbmFsbHl7a2E9Y31kPXZvaWQgMH1yZXR1cm4gZH1maW5hbGx5e2xhPWIsRmE/RShcIjE4N1wiKTp2b2lkIDAsdygxLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWthO2thPXYoKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2thPWJ9fX19XG5cdGZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoYSl7YT1vZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX12YXIgYz1hLmdldFB1YmxpY0luc3RhbmNlO2E9a2YoYSk7dmFyIGQ9YS5jb21wdXRlQXN5bmNFeHBpcmF0aW9uLGU9YS5jb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyLGY9YS5zY2hlZHVsZVdvcms7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpe3ZhciBjPW5ldyBZKDMsbnVsbCwwKTthPXtjdXJyZW50OmMsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsaXNSZWFkeUZvckNvbW1pdDohMSxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmIsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGMuc3RhdGVOb2RlPWF9LHVwZGF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxxKXt2YXIgZz1iLmN1cnJlbnQ7aWYoYyl7Yz1cblx0Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBoO2I6ezI9PT1rZChjKSYmMj09PWMudGFnP3ZvaWQgMDpFKFwiMTcwXCIpO2ZvcihoPWM7MyE9PWgudGFnOyl7aWYobGUoaCkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oaD1oW1wicmV0dXJuXCJdKT92b2lkIDA6RShcIjE3MVwiKX1oPWguc3RhdGVOb2RlLmNvbnRleHR9Yz1sZShjKT9wZShjLGgpOmh9ZWxzZSBjPUQ7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1xO2I9dm9pZCAwPT09Yj9udWxsOmI7cT1udWxsIT1hJiZudWxsIT1hLnR5cGUmJm51bGwhPWEudHlwZS5wcm90b3R5cGUmJiEwPT09YS50eXBlLnByb3RvdHlwZS51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQ/ZCgpOmUoZyk7SGUoZyx7ZXhwaXJhdGlvblRpbWU6cSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5cdG5leHRDYWxsYmFjazpudWxsLG5leHQ6bnVsbH0pO2YoZyxxKX0sYmF0Y2hlZFVwZGF0ZXM6YS5iYXRjaGVkVXBkYXRlcyx1bmJhdGNoZWRVcGRhdGVzOmEudW5iYXRjaGVkVXBkYXRlcyxkZWZlcnJlZFVwZGF0ZXM6YS5kZWZlcnJlZFVwZGF0ZXMsZmx1c2hTeW5jOmEuZmx1c2hTeW5jLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpmdW5jdGlvbihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYyhhLmNoaWxkLnN0YXRlTm9kZSk7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxmaW5kSG9zdEluc3RhbmNlOmIsZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1wZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBjPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIENlKEIoe30sXG5cdGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe3JldHVybiBiKGEpfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYz9jKGEpOm51bGx9fSkpfX19dmFyIG1mPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6bGZ9KSxuZj1tZiYmbGZ8fG1mLG9mPW5mW1wiZGVmYXVsdFwiXT9uZltcImRlZmF1bHRcIl06bmY7ZnVuY3Rpb24gcGYoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpVZSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX12YXIgcWY9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyxyZj12b2lkIDA7cmY9cWY/ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O1xuXHR2YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcblx0aWYobC5jYW5Vc2VET00paWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2t8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjYW5jZWxJZGxlQ2FsbGJhY2spe3ZhciB1Zj1udWxsLHZmPSExLHdmPS0xLHhmPSExLHlmPTAsemY9MzMsQWY9MzMsQmY7QmY9cWY/e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXlmLXBlcmZvcm1hbmNlLm5vdygpO3JldHVybiAwPGE/YTowfX06e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXlmLURhdGUubm93KCk7cmV0dXJuIDA8YT9hOjB9fTt2YXIgQ2Y9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1DZil7dmY9ITE7YT1yZigpO2lmKDA+PXlmLWEpaWYoLTEhPT13ZiYmd2Y8PVxuXHRhKUJmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybn1lbHNlIEJmLmRpZFRpbWVvdXQ9ITE7d2Y9LTE7YT11Zjt1Zj1udWxsO251bGwhPT1hJiZhKEJmKX19LCExKTt2YXIgRGY9ZnVuY3Rpb24oYSl7eGY9ITE7dmFyIGI9YS15ZitBZjtiPEFmJiZ6ZjxBZj8oOD5iJiYoYj04KSxBZj1iPHpmP3pmOmIpOnpmPWI7eWY9YStBZjt2Znx8KHZmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShDZixcIipcIikpfTtzZj1mdW5jdGlvbihhLGIpe3VmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih3Zj1yZigpK2IudGltZW91dCk7eGZ8fCh4Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRGYpKTtyZXR1cm4gMH07dGY9ZnVuY3Rpb24oKXt1Zj1udWxsO3ZmPSExO3dmPS0xfX1lbHNlIHNmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHRmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSBzZj1mdW5jdGlvbihhKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9fSl9KX0sXG5cdHRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07dmFyIEVmPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxGZj17fSxHZj17fTtcblx0ZnVuY3Rpb24gSGYoYSl7aWYoR2YuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoRmYuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoRWYudGVzdChhKSlyZXR1cm4gR2ZbYV09ITA7RmZbYV09ITA7cmV0dXJuITF9XG5cdGZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD13YShiKTtpZihkJiZ2YShiLGMpKXt2YXIgZT1kLm11dGF0aW9uTWV0aG9kO2U/ZShhLGMpOm51bGw9PWN8fGQuaGFzQm9vbGVhblZhbHVlJiYhY3x8ZC5oYXNOdW1lcmljVmFsdWUmJmlzTmFOKGMpfHxkLmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlJiYxPmN8fGQuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSYmITE9PT1jP0pmKGEsYik6ZC5tdXN0VXNlUHJvcGVydHk/YVtkLnByb3BlcnR5TmFtZV09YzooYj1kLmF0dHJpYnV0ZU5hbWUsKGU9ZC5hdHRyaWJ1dGVOYW1lc3BhY2UpP2Euc2V0QXR0cmlidXRlTlMoZSxiLFwiXCIrYyk6ZC5oYXNCb29sZWFuVmFsdWV8fGQuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSYmITA9PT1jP2Euc2V0QXR0cmlidXRlKGIsXCJcIik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKX1lbHNlIEtmKGEsYix2YShiLGMpP2M6bnVsbCl9XG5cdGZ1bmN0aW9uIEtmKGEsYixjKXtIZihiKSYmKG51bGw9PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPXdhKGIpO2M/KGI9Yy5tdXRhdGlvbk1ldGhvZCk/YihhLHZvaWQgMCk6Yy5tdXN0VXNlUHJvcGVydHk/YVtjLnByb3BlcnR5TmFtZV09Yy5oYXNCb29sZWFuVmFsdWU/ITE6XCJcIjphLnJlbW92ZUF0dHJpYnV0ZShjLmF0dHJpYnV0ZU5hbWUpOmEucmVtb3ZlQXR0cmlidXRlKGIpfVxuXHRmdW5jdGlvbiBMZihhLGIpe3ZhciBjPWIudmFsdWUsZD1iLmNoZWNrZWQ7cmV0dXJuIEIoe3R5cGU6dm9pZCAwLHN0ZXA6dm9pZCAwLG1pbjp2b2lkIDAsbWF4OnZvaWQgMH0sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsY2hlY2tlZDpudWxsIT1kP2Q6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gTWYoYSxiKXt2YXIgYz1iLmRlZmF1bHRWYWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOm51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZCxpbml0aWFsVmFsdWU6bnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19XG5cdGZ1bmN0aW9uIE5mKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmSWYoYSxcImNoZWNrZWRcIixiKX1mdW5jdGlvbiBPZihhLGIpe05mKGEsYik7dmFyIGM9Yi52YWx1ZTtpZihudWxsIT1jKWlmKDA9PT1jJiZcIlwiPT09YS52YWx1ZSlhLnZhbHVlPVwiMFwiO2Vsc2UgaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoYj1wYXJzZUZsb2F0KGEudmFsdWUpfHwwLGMhPWJ8fGM9PWImJmEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgbnVsbD09Yi52YWx1ZSYmbnVsbCE9Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09XCJcIitiLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYi5kZWZhdWx0VmFsdWUpLG51bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cblx0ZnVuY3Rpb24gUGYoYSxiKXtzd2l0Y2goYi50eXBlKXtjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7Y2FzZSBcImNvbG9yXCI6Y2FzZSBcImRhdGVcIjpjYXNlIFwiZGF0ZXRpbWVcIjpjYXNlIFwiZGF0ZXRpbWUtbG9jYWxcIjpjYXNlIFwibW9udGhcIjpjYXNlIFwidGltZVwiOmNhc2UgXCJ3ZWVrXCI6YS52YWx1ZT1cIlwiO2EudmFsdWU9YS5kZWZhdWx0VmFsdWU7YnJlYWs7ZGVmYXVsdDphLnZhbHVlPWEudmFsdWV9Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uIFFmKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1cblx0ZnVuY3Rpb24gUmYoYSxiKXthPUIoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1RZihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gU2YoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cblx0ZnVuY3Rpb24gVGYoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIFVmKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9FKFwiOTFcIik6dm9pZCAwO3JldHVybiBCKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIFZmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/RShcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkUoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cblx0ZnVuY3Rpb24gV2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gWGYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIFlmPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcblx0ZnVuY3Rpb24gWmYoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiAkZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/WmYoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG5cdHZhciBhZz12b2lkIDAsYmc9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09WWYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7YWc9YWd8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YWcuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPWFnLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcblx0ZnVuY3Rpb24gY2coYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cblx0dmFyIGRnPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5cdHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sZWc9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGRnKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2VnLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7ZGdbYl09ZGdbYV19KX0pO1xuXHRmdW5jdGlvbiBmZyhhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxkZy5oYXNPd25Qcm9wZXJ0eShlKSYmZGdbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgZ2c9Qih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcblx0ZnVuY3Rpb24gaGcoYSxiLGMpe2ImJihnZ1thXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RShcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0UoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RShcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RShcIjYyXCIsYygpKTp2b2lkIDApfVxuXHRmdW5jdGlvbiBpZyhhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIGpnPVlmLmh0bWwsa2c9Qy50aGF0UmV0dXJucyhcIlwiKTtcblx0ZnVuY3Rpb24gbGcoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SGQoYSk7Yj1TYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/d2QoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8od2QoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSx3ZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KHljKFwiY2FuY2VsXCIsITApJiZ3ZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KHljKFwiY2xvc2VcIiwhMCkmJndkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6RGQuaGFzT3duUHJvcGVydHkoZSkmJlUoZSxEZFtlXSxhKSxjW2VdPSEwKX19XG5cdHZhciBtZz17dG9wQWJvcnQ6XCJhYm9ydFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcER1cmF0aW9uQ2hhbmdlOlwiZHVyYXRpb25jaGFuZ2VcIix0b3BFbXB0aWVkOlwiZW1wdGllZFwiLHRvcEVuY3J5cHRlZDpcImVuY3J5cHRlZFwiLHRvcEVuZGVkOlwiZW5kZWRcIix0b3BFcnJvcjpcImVycm9yXCIsdG9wTG9hZGVkRGF0YTpcImxvYWRlZGRhdGFcIix0b3BMb2FkZWRNZXRhZGF0YTpcImxvYWRlZG1ldGFkYXRhXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wUGF1c2U6XCJwYXVzZVwiLHRvcFBsYXk6XCJwbGF5XCIsdG9wUGxheWluZzpcInBsYXlpbmdcIix0b3BQcm9ncmVzczpcInByb2dyZXNzXCIsdG9wUmF0ZUNoYW5nZTpcInJhdGVjaGFuZ2VcIix0b3BTZWVrZWQ6XCJzZWVrZWRcIix0b3BTZWVraW5nOlwic2Vla2luZ1wiLHRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLFxuXHR0b3BXYWl0aW5nOlwid2FpdGluZ1wifTtmdW5jdGlvbiBuZyhhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1qZyYmKGQ9WmYoYSkpO2Q9PT1qZz9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCJcXHgzY3NjcmlwdFxceDNlXFx4M2Mvc2NyaXB0XFx4M2VcIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIG9nKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cblx0ZnVuY3Rpb24gcGcoYSxiLGMsZCl7dmFyIGU9aWcoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gbWcpbWcuaGFzT3duUHJvcGVydHkoZikmJlUoZixtZ1tmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlUoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtVKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6TWYoYSxjKTtmPUxmKGEsYyk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtcblx0bGcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPVJmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOlRmKGEsYyk7Zj1CKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7bGcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZmKGEsYyk7Zj1VZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7bGcoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfWhnKGIsZixrZyk7dmFyIGc9ZixoO2ZvcihoIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGs9Z1toXTtcInN0eWxlXCI9PT1oP2ZnKGEsayxrZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZiZyhhLGspKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZjZyhhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmY2coYSxcblx0XCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoUmEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9ayYmbGcoZCxoKTplP0tmKGEsaCxrKTpudWxsIT1rJiZJZihhLGgsaykpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpCYyhhKTtQZihhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkJjKGEpO1hmKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/U2YoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJlNmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9XG5cdEMpfX1cblx0ZnVuY3Rpb24gc2coYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPUxmKGEsYyk7ZD1MZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9UmYoYSxjKTtkPVJmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1CKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9Qih7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9VWYoYSxjKTtkPVVmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9aGcoYixkLGtnKTt2YXIgZyxoO2E9bnVsbDtmb3IoZyBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGcpJiZjLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1jW2ddKWlmKFwic3R5bGVcIj09PWcpZm9yKGggaW4gYj1jW2ddLGIpYi5oYXNPd25Qcm9wZXJ0eShoKSYmKGF8fChhPXt9KSxhW2hdPVxuXHRcIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09ZyYmXCJjaGlsZHJlblwiIT09ZyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKFJhLmhhc093blByb3BlcnR5KGcpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChnLG51bGwpKTtmb3IoZyBpbiBkKXt2YXIgaz1kW2ddO2I9bnVsbCE9Yz9jW2ddOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGcpJiZrIT09YiYmKG51bGwhPWt8fG51bGwhPWIpKWlmKFwic3R5bGVcIj09PWcpaWYoYil7Zm9yKGggaW4gYikhYi5oYXNPd25Qcm9wZXJ0eShoKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShoKXx8KGF8fChhPXt9KSxhW2hdPVwiXCIpO2ZvcihoIGluIGspay5oYXNPd25Qcm9wZXJ0eShoKSYmYltoXSE9PWtbaF0mJihhfHwoYT17fSksYVtoXT1rW2hdKX1lbHNlIGF8fChmfHwoZj1bXSksZi5wdXNoKGcsYSkpLGE9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09XG5cdGc/KGs9az9rLl9faHRtbDp2b2lkIDAsYj1iP2IuX19odG1sOnZvaWQgMCxudWxsIT1rJiZiIT09ayYmKGY9Znx8W10pLnB1c2goZyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1nP2I9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goZyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmKFJhLmhhc093blByb3BlcnR5KGcpPyhudWxsIT1rJiZsZyhlLGcpLGZ8fGI9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGcsaykpfWEmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixhKTtyZXR1cm4gZn1cblx0ZnVuY3Rpb24gdGcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmTmYoYSxlKTtpZyhjLGQpO2Q9aWcoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9mZyhhLGgsa2cpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/YmcoYSxoKTpcImNoaWxkcmVuXCI9PT1nP2NnKGEsaCk6ZD9udWxsIT1oP0tmKGEsZyxoKTphLnJlbW92ZUF0dHJpYnV0ZShnKTpudWxsIT1oP0lmKGEsZyxoKTpKZihhLGcpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpPZihhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOldmKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/U2YoYSxcblx0ISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9TZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6U2YoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuXHRmdW5jdGlvbiB1ZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlUoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIG1nKW1nLmhhc093blByb3BlcnR5KGYpJiZVKGYsbWdbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1UoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpVKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VShcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpNZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7bGcoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpUZihhLGMpO1xuXHRVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWZihhLGMpLFUoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSksbGcoZSxcIm9uQ2hhbmdlXCIpfWhnKGIsYyxrZyk7ZD1udWxsO2Zvcih2YXIgZyBpbiBjKWMuaGFzT3duUHJvcGVydHkoZykmJihmPWNbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGY/YS50ZXh0Q29udGVudCE9PWYmJihkPVtcImNoaWxkcmVuXCIsZl0pOlwibnVtYmVyXCI9PT10eXBlb2YgZiYmYS50ZXh0Q29udGVudCE9PVwiXCIrZiYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ZdKTpSYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZiYmbGcoZSxnKSk7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkJjKGEpO1BmKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6QmMoYSk7WGYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmXG5cdChhLm9uY2xpY2s9Qyl9cmV0dXJuIGR9ZnVuY3Rpb24gdmcoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxuXHR2YXIgd2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpuZyxjcmVhdGVUZXh0Tm9kZTpvZyxzZXRJbml0aWFsUHJvcGVydGllczpwZyxkaWZmUHJvcGVydGllczpzZyx1cGRhdGVQcm9wZXJ0aWVzOnRnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6dWcsZGlmZkh5ZHJhdGVkVGV4dDp2Zyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpPZihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5cdGMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWVcXHgzZFwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZVxceDNkXCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9cmIoZCk7ZT92b2lkIDA6RShcIjkwXCIpO0NjKGQpO09mKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpXZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmU2YoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0pO25jLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQod2cpO3ZhciB4Zz1udWxsLE1nPW51bGw7ZnVuY3Rpb24gTmcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuXHRmdW5jdGlvbiBPZyhhKXthPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGw7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGV8fCFhLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKX1cblx0dmFyIFo9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTokZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9JGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiAkZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3hnPXRkO3ZhciBhPWRhKCk7aWYoS2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblx0aWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaCh6KXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGc9LTEsaD0tMSxrPTAscT0wLHY9YSx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt2IT09Ynx8MCE9PWQmJjMhPT12Lm5vZGVUeXBlfHwoZz1mK2QpO3YhPT1lfHwwIT09YyYmMyE9PXYubm9kZVR5cGV8fChoPWYrYyk7Mz09PXYubm9kZVR5cGUmJihmKz12Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT12LmZpcnN0Q2hpbGQpKWJyZWFrO3k9djt2PXV9Zm9yKDs7KXtpZih2PT09YSlicmVhayBiO3k9PT1iJiYrK2s9PT1kJiYoZz1mKTt5PT09ZSYmKytxPT09YyYmKGg9Zik7aWYobnVsbCE9PSh1PXYubmV4dFNpYmxpbmcpKWJyZWFrO3Y9eTt5PXYucGFyZW50Tm9kZX12PXV9Yj0tMT09PWd8fC0xPT09aD9udWxsOlxuXHR7c3RhcnQ6ZyxlbmQ6aH19ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7TWc9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn07dWQoITEpfSxyZXNldEFmdGVyQ29tbWl0OmZ1bmN0aW9uKCl7dmFyIGE9TWcsYj1kYSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmZhKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYoS2QoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXtiPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jW0ViKCldLmxlbmd0aDthPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9hOk1hdGgubWluKGQuZW5kLGUpOyFiLmV4dGVuZCYmYT5cblx0ZCYmKGU9ZCxkPWEsYT1lKTtlPUpkKGMsYSk7dmFyIGY9SmQoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGc9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtnLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoZyksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGcuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShnKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2lhKGMpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPVxuXHRhLnRvcH1NZz1udWxsO3VkKHhnKTt4Zz1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9bmcoYSxiLGMsZCk7YVtRXT1lO2Fbb2JdPWI7cmV0dXJuIGF9LGFwcGVuZEluaXRpYWxDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe3BnKGEsYixjLGQpO2E6e3N3aXRjaChiKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmE9ISFjLmF1dG9Gb2N1czticmVhayBhfWE9ITF9cmV0dXJuIGF9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gc2coYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PVxuXHR0eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9LHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4hIWIuaGlkZGVufSxjcmVhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCl7YT1vZyhhLGIpO2FbUV09ZDtyZXR1cm4gYX0sbm93OnJmLG11dGF0aW9uOntjb21taXRNb3VudDpmdW5jdGlvbihhKXthLmZvY3VzKCl9LGNvbW1pdFVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2Fbb2JdPWU7dGcoYSxiLGMsZCxlKX0scmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXthLnRleHRDb250ZW50PVwiXCJ9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLFxuXHRiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLFxuXHRiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0sZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2FbUV09ZjthW29iXT1jO3JldHVybiB1ZyhhLGIsYyxlLGQpfSxoeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXthW1FdPWM7cmV0dXJuIHZnKGEsYil9LGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuXHRkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnNmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dGYsdXNlU3luY1NjaGVkdWxpbmc6ITB9KTtyYz1aLmJhdGNoZWRVcGRhdGVzO1xuXHRmdW5jdGlvbiBQZyhhLGIsYyxkLGUpe05nKGMpP3ZvaWQgMDpFKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKVoudXBkYXRlQ29udGFpbmVyKGIsZixhLGUpO2Vsc2V7ZD1kfHxPZyhjKTtpZighZClmb3IoZj12b2lkIDA7Zj1jLmxhc3RDaGlsZDspYy5yZW1vdmVDaGlsZChmKTt2YXIgZz1aLmNyZWF0ZUNvbnRhaW5lcihjLGQpO2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWc7Wi51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7Wi51cGRhdGVDb250YWluZXIoYixnLGEsZSl9KX1yZXR1cm4gWi5nZXRQdWJsaWNSb290SW5zdGFuY2UoZil9ZnVuY3Rpb24gUWcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtOZyhiKT92b2lkIDA6RShcIjIwMFwiKTtyZXR1cm4gcGYoYSxiLG51bGwsYyl9XG5cdGZ1bmN0aW9uIFJnKGEsYil7dGhpcy5fcmVhY3RSb290Q29udGFpbmVyPVouY3JlYXRlQ29udGFpbmVyKGEsYil9UmcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe1oudXBkYXRlQ29udGFpbmVyKGEsdGhpcy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwsYil9O1JnLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe1oudXBkYXRlQ29udGFpbmVyKG51bGwsdGhpcy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwsYSl9O1xuXHR2YXIgU2c9e2NyZWF0ZVBvcnRhbDpRZyxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZihiKXJldHVybiBaLmZpbmRIb3N0SW5zdGFuY2UoYik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0UoXCIxODhcIik6RShcIjIxM1wiLE9iamVjdC5rZXlzKGEpKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFBnKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBQZyhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0UoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIFBnKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe05nKGEpP3ZvaWQgMDpcblx0RShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFoudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe1BnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOlFnLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOnRjLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpaLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6Wi5mbHVzaFN5bmMsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOm1iLEV2ZW50UGx1Z2luUmVnaXN0cnk6VmEsRXZlbnRQcm9wYWdhdG9yczpDYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6cWMsUmVhY3RET01Db21wb25lbnRUcmVlOnNiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjp4ZH19O1xuXHRaLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6cGIsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgVGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpTZ30pLFVnPVRnJiZTZ3x8VGc7bW9kdWxlLmV4cG9ydHM9VWdbXCJkZWZhdWx0XCJdP1VnW1wiZGVmYXVsdFwiXTpVZztcblxuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cdCAqXG5cdCAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cdFxuXHQvKipcblx0ICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuXHQgKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG5cdCAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuXHQgKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG5cdCAqL1xuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cdFxuXHQgIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXHRcblx0ICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblx0XG5cdCAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXHRcblx0ICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblx0XG5cdCAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblx0XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXG4vKioqLyB9KSxcbi8qIDEwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKlxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdC8qKlxuXHQgKiBVcHN0cmVhbSB2ZXJzaW9uIG9mIGV2ZW50IGxpc3RlbmVyLiBEb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzcGVjaWZpY1xuXHQgKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG5cdCAqL1xuXHR2YXIgRXZlbnRMaXN0ZW5lciA9IHtcblx0ICAvKipcblx0ICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cblx0ICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuXHQgICAqL1xuXHQgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuXHQgICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG5cdCAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0ICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuXHQgICAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuXHQgICAgICAgICAgdGFyZ2V0LmRldGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuXHQgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG5cdCAgICovXG5cdCAgY2FwdHVyZTogZnVuY3Rpb24gY2FwdHVyZSh0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcblx0ICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHQgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcblx0ICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmIChmYWxzZSkge1xuXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHRlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZSBvbiBhICcgKyAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArICd3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLicpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHQoKSB7fVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKlxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdC8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cdFxuXHQvKipcblx0ICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcblx0ICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cblx0ICpcblx0ICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG5cdCAqIHlldCBkZWZpbmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG5cdCAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcblx0ICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG5cdCAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICByZXR1cm4gZG9jLmJvZHk7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cdCAqXG5cdCAqIEB0eXBlY2hlY2tzXG5cdCAqIFxuXHQgKi9cblx0XG5cdC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHRcblx0LyoqXG5cdCAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cblx0ICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG5cdCAqL1xuXHRmdW5jdGlvbiBpcyh4LCB5KSB7XG5cdCAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuXHQgIGlmICh4ID09PSB5KSB7XG5cdCAgICAvLyBTdGVwcyAxLTUsIDctMTBcblx0ICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG5cdCAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuXHQgICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG5cdCAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2Vcblx0ICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG5cdCAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuXHQgKi9cblx0ZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcblx0ICBpZiAoaXMob2JqQSwgb2JqQikpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0XG5cdCAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHRcblx0ICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcblx0ICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblx0XG5cdCAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHRcblx0ICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcblx0ICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsO1xuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKlxuXHQgKiBcblx0ICovXG5cdFxuXHR2YXIgaXNUZXh0Tm9kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHRcblx0Lyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cblx0ICovXG5cdGZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuXHQgIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG5cdCAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuXHQgIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcblx0ICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcblx0ICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuXHQgICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cblx0ICpcblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHR2YXIgaXNOb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG5cdCAqL1xuXHRmdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuXHQgIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKlxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG5cdCAqL1xuXHRmdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG5cdCAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuXHQgIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG5cdCAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cdCAqXG5cdCAqL1xuXHRcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBpbnB1dC90ZXh0YXJlYSB0byBmb2N1c1xuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG5cdCAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG5cdCAgLy8gbm90IGVuYWJsZWQsIG9yIG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IGFjY2VwdCB0aGUgZm9jdXMuXCIgZm9yIGFsbCBraW5kcyBvZlxuXHQgIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuXHQgIHRyeSB7XG5cdCAgICBub2RlLmZvY3VzKCk7XG5cdCAgfSBjYXRjaCAoZSkge31cblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9kZWJvdW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHRcblx0dmFyIF9kZWJvdW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJvdW5jZSk7XG5cdFxuXHR2YXIgX2ZldGNoVmlkZW9zID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG5cdFxuXHR2YXIgX2ZldGNoVmlkZW9zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZldGNoVmlkZW9zKTtcblx0XG5cdHZhciBfVmlkZW9EZXRhaWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KTtcblx0XG5cdHZhciBfVmlkZW9EZXRhaWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVmlkZW9EZXRhaWwpO1xuXHRcblx0dmFyIF9WaWRlb0xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKTtcblx0XG5cdHZhciBfVmlkZW9MaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ZpZGVvTGlzdCk7XG5cdFxuXHR2YXIgX1NlYXJjaEJhciA9IF9fd2VicGFja19yZXF1aXJlX18oOTUpO1xuXHRcblx0dmFyIF9TZWFyY2hCYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2VhcmNoQmFyKTtcblx0XG5cdHZhciBfY29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Nik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgQXBwID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICBfaW5oZXJpdHMoQXBwLCBfQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gQXBwKHByb3BzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXBwKTtcblx0XG5cdCAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQXBwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXBwKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXHRcblx0ICAgIF90aGlzLnN0YXRlID0ge1xuXHQgICAgICB2aWRlb3M6IFtdLFxuXHQgICAgICBzZWxlY3RlZFZpZGVvOiBudWxsXG5cdCAgICB9O1xuXHRcblx0ICAgIF90aGlzLmhhbmRsZVZpZGVvU2VsZWN0ID0gX3RoaXMuaGFuZGxlVmlkZW9TZWxlY3QuYmluZChfdGhpcyk7XG5cdCAgICBfdGhpcy5oYW5kbGVTZWFyY2hUZXJtQ2hhbmdlID0gX3RoaXMuaGFuZGxlU2VhcmNoVGVybUNoYW5nZS5iaW5kKF90aGlzKTtcblx0ICAgIF90aGlzLnZpZGVvU2VhcmNoID0gKDAsIF9kZWJvdW5jZTIuZGVmYXVsdCkoX3RoaXMudmlkZW9TZWFyY2guYmluZChfdGhpcyksIDMwMCk7XG5cdCAgICBfdGhpcy52aWRlb1NlYXJjaChfY29uc3RhbnRzLkRFRkFVTFRfU0VBUkNIKTtcblx0ICAgIHJldHVybiBfdGhpcztcblx0ICB9XG5cdFxuXHQgIF9jcmVhdGVDbGFzcyhBcHAsIFt7XG5cdCAgICBrZXk6ICd2aWRlb1NlYXJjaCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdmlkZW9TZWFyY2godGVybSkge1xuXHQgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgIHJldHVybiAoMCwgX2ZldGNoVmlkZW9zMi5kZWZhdWx0KShfY29uc3RhbnRzLkFQSV9ST09UX1VSTCwgX2NvbnN0YW50cy5BUElfS0VZLCB0ZXJtKS50aGVuKGZ1bmN0aW9uICh2aWRlb3MpIHtcblx0ICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuXHQgICAgICAgICAgdmlkZW9zOiB2aWRlb3MsXG5cdCAgICAgICAgICBzZWxlY3RlZFZpZGVvOiB2aWRlb3NbMF1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGFuZGxlVmlkZW9TZWxlY3QnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVZpZGVvU2VsZWN0KHZpZGVvKSB7XG5cdCAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFZpZGVvOiB2aWRlbyB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdoYW5kbGVTZWFyY2hUZXJtQ2hhbmdlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVTZWFyY2hUZXJtQ2hhbmdlKHRlcm0pIHtcblx0ICAgICAgdGhpcy52aWRlb1NlYXJjaCh0ZXJtKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdkaXYnLFxuXHQgICAgICAgIG51bGwsXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NlYXJjaEJhcjIuZGVmYXVsdCwgeyBvblNlYXJjaFRlcm1DaGFuZ2U6IHRoaXMuaGFuZGxlU2VhcmNoVGVybUNoYW5nZSB9KSxcblx0ICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgeyBjbGFzc05hbWU6ICdyb3cnIH0sXG5cdCAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVmlkZW9EZXRhaWwyLmRlZmF1bHQsIHsgdmlkZW86IHRoaXMuc3RhdGUuc2VsZWN0ZWRWaWRlbyB9KSxcblx0ICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9WaWRlb0xpc3QyLmRlZmF1bHQsIHtcblx0ICAgICAgICAgICAgb25WaWRlb1NlbGVjdDogdGhpcy5oYW5kbGVWaWRlb1NlbGVjdCxcblx0ICAgICAgICAgICAgdmlkZW9zOiB0aGlzLnN0YXRlLnZpZGVvc1xuXHQgICAgICAgICAgfSlcblx0ICAgICAgICApXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gQXBwO1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQXBwO1xuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSksXG5cdCAgICBub3cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKSxcblx0ICAgIHRvTnVtYmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdFxuXHQvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG5cdHZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cdFxuXHQvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG5cdHZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcblx0ICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXHRcblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuXHQgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcblx0ICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuXHQgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cblx0ICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG5cdCAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcblx0ICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuXHQgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuXHQgKiBpbnZvY2F0aW9uLlxuXHQgKlxuXHQgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG5cdCAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG5cdCAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cblx0ICpcblx0ICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG5cdCAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cblx0ICpcblx0ICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG5cdCAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDAuMS4wXG5cdCAqIEBjYXRlZ29yeSBGdW5jdGlvblxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuXHQgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cblx0ICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG5cdCAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuXHQgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG5cdCAqIEBleGFtcGxlXG5cdCAqXG5cdCAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG5cdCAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG5cdCAqXG5cdCAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuXHQgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG5cdCAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuXHQgKiAgICd0cmFpbGluZyc6IGZhbHNlXG5cdCAqIH0pKTtcblx0ICpcblx0ICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cblx0ICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG5cdCAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcblx0ICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuXHQgKlxuXHQgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuXHQgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcblx0ICovXG5cdGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcblx0ICB2YXIgbGFzdEFyZ3MsXG5cdCAgICAgIGxhc3RUaGlzLFxuXHQgICAgICBtYXhXYWl0LFxuXHQgICAgICByZXN1bHQsXG5cdCAgICAgIHRpbWVySWQsXG5cdCAgICAgIGxhc3RDYWxsVGltZSxcblx0ICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuXHQgICAgICBsZWFkaW5nID0gZmFsc2UsXG5cdCAgICAgIG1heGluZyA9IGZhbHNlLFxuXHQgICAgICB0cmFpbGluZyA9IHRydWU7XG5cdFxuXHQgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG5cdCAgfVxuXHQgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuXHQgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuXHQgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuXHQgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG5cdCAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuXHQgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuXHQgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcblx0ICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cdFxuXHQgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcblx0ICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcblx0ICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuXHQgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cblx0ICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcblx0ICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG5cdCAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuXHQgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG5cdCAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcblx0ICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG5cdCAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcblx0ICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblx0XG5cdCAgICByZXR1cm4gbWF4aW5nXG5cdCAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcblx0ICAgICAgOiB0aW1lV2FpdGluZztcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG5cdCAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuXHQgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cdFxuXHQgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcblx0ICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG5cdCAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG5cdCAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuXHQgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuXHQgICAgdmFyIHRpbWUgPSBub3coKTtcblx0ICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcblx0ICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcblx0ICAgIH1cblx0ICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuXHQgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG5cdCAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cblx0ICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuXHQgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG5cdCAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuXHQgICAgfVxuXHQgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBjYW5jZWwoKSB7XG5cdCAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcblx0ICAgIH1cblx0ICAgIGxhc3RJbnZva2VUaW1lID0gMDtcblx0ICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZmx1c2goKSB7XG5cdCAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcblx0ICAgIHZhciB0aW1lID0gbm93KCksXG5cdCAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblx0XG5cdCAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcblx0ICAgIGxhc3RUaGlzID0gdGhpcztcblx0ICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cdFxuXHQgICAgaWYgKGlzSW52b2tpbmcpIHtcblx0ICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChtYXhpbmcpIHtcblx0ICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuXHQgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG5cdCAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0ICB9XG5cdCAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcblx0ICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcblx0ICByZXR1cm4gZGVib3VuY2VkO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuXG5cbi8qKiovIH0pLFxuLyogMTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG5cdCAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcblx0ICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZW1iZXJPZiBfXG5cdCAqIEBzaW5jZSAwLjEuMFxuXHQgKiBAY2F0ZWdvcnkgTGFuZ1xuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG5cdCAqIEBleGFtcGxlXG5cdCAqXG5cdCAqIF8uaXNPYmplY3Qoe30pO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcblx0ICogLy8gPT4gdHJ1ZVxuXHQgKlxuXHQgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG5cdCAqIC8vID0+IHRydWVcblx0ICpcblx0ICogXy5pc09iamVjdChudWxsKTtcblx0ICogLy8gPT4gZmFsc2Vcblx0ICovXG5cdGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG5cdCAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cdCAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcblxuXG4vKioqLyB9KSxcbi8qIDIwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIHJvb3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2Vcblx0ICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDIuNC4wXG5cdCAqIEBjYXRlZ29yeSBEYXRlXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuXHQgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG5cdCAqIH0sIF8ubm93KCkpO1xuXHQgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuXHQgKi9cblx0dmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiByb290LkRhdGUubm93KCk7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IG5vdztcblxuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGZyZWVHbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblx0XG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG5cdHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXHRcblx0LyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG5cdHZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSByb290O1xuXG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSksXG5cdCAgICBpc1N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXHRcblx0LyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG5cdHZhciBOQU4gPSAwIC8gMDtcblx0XG5cdC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG5cdHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblx0XG5cdC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG5cdHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cdFxuXHQvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG5cdHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXHRcblx0LyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG5cdHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXHRcblx0LyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cblx0dmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXHRcblx0LyoqXG5cdCAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDQuMC4wXG5cdCAqIEBjYXRlZ29yeSBMYW5nXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy50b051bWJlcigzLjIpO1xuXHQgKiAvLyA9PiAzLjJcblx0ICpcblx0ICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcblx0ICogLy8gPT4gNWUtMzI0XG5cdCAqXG5cdCAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuXHQgKiAvLyA9PiBJbmZpbml0eVxuXHQgKlxuXHQgKiBfLnRvTnVtYmVyKCczLjInKTtcblx0ICogLy8gPT4gMy4yXG5cdCAqL1xuXHRmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuXHQgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcblx0ICAgIHJldHVybiB2YWx1ZTtcblx0ICB9XG5cdCAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuXHQgICAgcmV0dXJuIE5BTjtcblx0ICB9XG5cdCAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuXHQgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuXHQgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcblx0ICB9XG5cdCAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuXHQgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG5cdCAgfVxuXHQgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcblx0ICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuXHQgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuXHQgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG5cdCAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcblxuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGJhc2VHZXRUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KSxcblx0ICAgIGlzT2JqZWN0TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHRcblx0LyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuXHR2YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDQuMC4wXG5cdCAqIEBjYXRlZ29yeSBMYW5nXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuXHQgKiBAZXhhbXBsZVxuXHQgKlxuXHQgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG5cdCAqIC8vID0+IHRydWVcblx0ICpcblx0ICogXy5pc1N5bWJvbCgnYWJjJyk7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuXHQgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcblx0ICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG5cblxuLyoqKi8gfSksXG4vKiAyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBTeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KSxcblx0ICAgIGdldFJhd1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpLFxuXHQgICAgb2JqZWN0VG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblx0XG5cdC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cblx0dmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG5cdCAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblx0XG5cdC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuXHR2YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cdFxuXHQvKipcblx0ICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG5cdCAgaWYgKHZhbHVlID09IG51bGwpIHtcblx0ICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcblx0ICB9XG5cdCAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuXHQgICAgPyBnZXRSYXdUYWcodmFsdWUpXG5cdCAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuXG5cbi8qKiovIH0pLFxuLyogMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgcm9vdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHRcblx0LyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuXG5cbi8qKiovIH0pLFxuLyogMjcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdFxuXHQvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG5cdHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cdFxuXHQvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cblx0dmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cdFxuXHQvKipcblx0ICogVXNlZCB0byByZXNvbHZlIHRoZVxuXHQgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcblx0ICogb2YgdmFsdWVzLlxuXHQgKi9cblx0dmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cdFxuXHQvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cblx0dmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXHRcblx0LyoqXG5cdCAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cblx0ICovXG5cdGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuXHQgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcblx0ICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXHRcblx0ICB0cnkge1xuXHQgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuXHQgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcblx0ICB9IGNhdGNoIChlKSB7fVxuXHRcblx0ICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cdCAgaWYgKHVubWFza2VkKSB7XG5cdCAgICBpZiAoaXNPd24pIHtcblx0ICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG5cblxuLyoqKi8gfSksXG4vKiAyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cblx0dmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblx0XG5cdC8qKlxuXHQgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG5cdCAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuXHQgKiBvZiB2YWx1ZXMuXG5cdCAqL1xuXHR2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblx0XG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cblx0ICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG5cdCAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuXG5cbi8qKiovIH0pLFxuLyogMjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG5cdCAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWVtYmVyT2YgX1xuXHQgKiBAc2luY2UgNC4wLjBcblx0ICogQGNhdGVnb3J5IExhbmdcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG5cdCAqIEBleGFtcGxlXG5cdCAqXG5cdCAqIF8uaXNPYmplY3RMaWtlKHt9KTtcblx0ICogLy8gPT4gdHJ1ZVxuXHQgKlxuXHQgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqXG5cdCAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuXHQgKiAvLyA9PiBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG5cdCAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcblxuXG4vKioqLyB9KSxcbi8qIDMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2F4aW9zID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cdFxuXHR2YXIgX2F4aW9zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F4aW9zKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgZmV0Y2hWaWRlb3MgPSBmdW5jdGlvbiBmZXRjaFZpZGVvcyh1cmwsIGFwaUtleSkge1xuXHQgIHZhciBzZWFyY2hTdHJpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuXHRcblx0ICBpZiAoIXVybCB8fCAhYXBpS2V5KSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGFwaSB1cmwgYW5kIGtleScpO1xuXHQgIH1cblx0XG5cdCAgdmFyIHBhcmFtcyA9IHtcblx0ICAgIHBhcnQ6ICdzbmlwcGV0Jyxcblx0ICAgIGtleTogYXBpS2V5LFxuXHQgICAgcTogc2VhcmNoU3RyaW5nLFxuXHQgICAgdHlwZTogJ3ZpZGVvJ1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiBfYXhpb3MyLmRlZmF1bHQuZ2V0KHVybCwgeyBwYXJhbXM6IHBhcmFtcyB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuaXRlbXM7XG5cdCAgfSk7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBmZXRjaFZpZGVvcztcblxuLyoqKi8gfSksXG4vKiAzMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0dmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblx0dmFyIEF4aW9zID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cdHZhciBkZWZhdWx0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHRcblx0LyoqXG5cdCAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuXHQgKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3Ncblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcblx0ICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcblx0ICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblx0XG5cdCAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2Vcblx0ICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cdFxuXHQgIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuXHQgIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cdFxuXHQgIHJldHVybiBpbnN0YW5jZTtcblx0fVxuXHRcblx0Ly8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5cdHZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblx0XG5cdC8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuXHRheGlvcy5BeGlvcyA9IEF4aW9zO1xuXHRcblx0Ly8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuXHRheGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcblx0ICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG5cdH07XG5cdFxuXHQvLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cblx0YXhpb3MuQ2FuY2VsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSk7XG5cdGF4aW9zLkNhbmNlbFRva2VuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nik7XG5cdGF4aW9zLmlzQ2FuY2VsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Mik7XG5cdFxuXHQvLyBFeHBvc2UgYWxsL3NwcmVhZFxuXHRheGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcblx0ICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXHR9O1xuXHRheGlvcy5zcHJlYWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cdFxuXHQvLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcblx0bW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuXG5cbi8qKiovIH0pLFxuLyogMzMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXHR2YXIgaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0XG5cdC8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXHRcblx0Ly8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3Ncblx0XG5cdHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdFxuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuXHQgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2Vcblx0ICovXG5cdGZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG5cdCAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcblx0fVxuXHRcblx0LyoqXG5cdCAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuXHQgIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcblx0ICB2YXIgcmVzdWx0O1xuXHQgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcblx0ICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG5cdCAgfVxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2Vcblx0ICovXG5cdGZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuXHQgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcblx0fVxuXHRcblx0LyoqXG5cdCAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3Rcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xuXHR9XG5cdFxuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3Rcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcblx0ICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3Rcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG5cdCAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcblx0fVxuXHRcblx0LyoqXG5cdCAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0RhdGUodmFsKSB7XG5cdCAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuXHR9XG5cdFxuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3Rcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2Vcblx0ICovXG5cdGZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcblx0ICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2Jcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuXHQgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcblx0fVxuXHRcblx0LyoqXG5cdCAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2Vcblx0ICovXG5cdGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG5cdCAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRcblx0LyoqXG5cdCAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3Rcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG5cdCAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3Rcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcblx0fVxuXHRcblx0LyoqXG5cdCAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG5cdCAqL1xuXHRmdW5jdGlvbiB0cmltKHN0cikge1xuXHQgIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcblx0ICpcblx0ICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cblx0ICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuXHQgKlxuXHQgKiB3ZWIgd29ya2Vyczpcblx0ICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG5cdCAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG5cdCAqXG5cdCAqIHJlYWN0LW5hdGl2ZTpcblx0ICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcblx0ICovXG5cdGZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuXHQgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICByZXR1cm4gKFxuXHQgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0ICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblx0ICApO1xuXHR9XG5cdFxuXHQvKipcblx0ICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG5cdCAqXG5cdCAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3Npbmdcblx0ICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG5cdCAqXG5cdCAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG5cdCAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cblx0ICovXG5cdGZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuXHQgIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuXHQgIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdFxuXHQgIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuXHQgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuXHQgICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG5cdCAgICBvYmogPSBbb2JqXTtcblx0ICB9XG5cdFxuXHQgIGlmIChpc0FycmF5KG9iaikpIHtcblx0ICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG5cdCAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdCAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG5cdCAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuXHQgKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cblx0ICpcblx0ICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cblx0ICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuXHQgKlxuXHQgKiBFeGFtcGxlOlxuXHQgKlxuXHQgKiBgYGBqc1xuXHQgKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG5cdCAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuXHQgKiBgYGBcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuXHQgKi9cblx0ZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG5cdCAgdmFyIHJlc3VsdCA9IHt9O1xuXHQgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG5cdCAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuXHQgICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG5cdCAgfVxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cblx0ICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuXHQgKi9cblx0ZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcblx0ICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG5cdCAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGFba2V5XSA9IHZhbDtcblx0ICAgIH1cblx0ICB9KTtcblx0ICByZXR1cm4gYTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgaXNBcnJheTogaXNBcnJheSxcblx0ICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuXHQgIGlzQnVmZmVyOiBpc0J1ZmZlcixcblx0ICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuXHQgIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcblx0ICBpc1N0cmluZzogaXNTdHJpbmcsXG5cdCAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuXHQgIGlzT2JqZWN0OiBpc09iamVjdCxcblx0ICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG5cdCAgaXNEYXRlOiBpc0RhdGUsXG5cdCAgaXNGaWxlOiBpc0ZpbGUsXG5cdCAgaXNCbG9iOiBpc0Jsb2IsXG5cdCAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcblx0ICBpc1N0cmVhbTogaXNTdHJlYW0sXG5cdCAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuXHQgIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcblx0ICBmb3JFYWNoOiBmb3JFYWNoLFxuXHQgIG1lcmdlOiBtZXJnZSxcblx0ICBleHRlbmQ6IGV4dGVuZCxcblx0ICB0cmltOiB0cmltXG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAzNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuXHQgIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuXHQgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKiFcblx0ICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuXHQgKlxuXHQgKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuXHQgKiBAbGljZW5zZSAgTUlUXG5cdCAqL1xuXHRcblx0Ly8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuXHQvLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuXHQgIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcblx0ICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxuXHR9XG5cdFxuXHQvLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuXHRmdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuXHQgIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxuXHR9XG5cblxuLyoqKi8gfSksXG4vKiAzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBkZWZhdWx0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHR2YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0dmFyIEludGVyY2VwdG9yTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXHR2YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuXHQgKi9cblx0ZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcblx0ICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG5cdCAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG5cdCAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG5cdCAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG5cdCAgfTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIERpc3BhdGNoIGEgcmVxdWVzdFxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcblx0ICovXG5cdEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcblx0ICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cblx0ICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG5cdCAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG5cdCAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG5cdCAgICAgIHVybDogYXJndW1lbnRzWzBdXG5cdCAgICB9LCBhcmd1bWVudHNbMV0pO1xuXHQgIH1cblx0XG5cdCAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblx0ICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXHRcblx0ICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG5cdCAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblx0ICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXHRcblx0ICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcblx0ICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG5cdCAgfSk7XG5cdFxuXHQgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG5cdCAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuXHQgIH0pO1xuXHRcblx0ICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG5cdCAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHByb21pc2U7XG5cdH07XG5cdFxuXHQvLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcblx0dXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG5cdCAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblx0ICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG5cdCAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuXHQgICAgICBtZXRob2Q6IG1ldGhvZCxcblx0ICAgICAgdXJsOiB1cmxcblx0ICAgIH0pKTtcblx0ICB9O1xuXHR9KTtcblx0XG5cdHV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG5cdCAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblx0ICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG5cdCAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuXHQgICAgICBtZXRob2Q6IG1ldGhvZCxcblx0ICAgICAgdXJsOiB1cmwsXG5cdCAgICAgIGRhdGE6IGRhdGFcblx0ICAgIH0pKTtcblx0ICB9O1xuXHR9KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG5cblxuLyoqKi8gfSksXG4vKiAzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdFxuXHR2YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG5cdCAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcblx0ICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuXHQgICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuXHQgIHZhciBhZGFwdGVyO1xuXHQgIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG5cdCAgICBhZGFwdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcblx0ICAgIGFkYXB0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0ICB9XG5cdCAgcmV0dXJuIGFkYXB0ZXI7XG5cdH1cblx0XG5cdHZhciBkZWZhdWx0cyA9IHtcblx0ICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXHRcblx0ICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG5cdCAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblx0ICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG5cdCAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcblx0ICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcblx0ICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcblx0ICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG5cdCAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuXHQgICAgKSB7XG5cdCAgICAgIHJldHVybiBkYXRhO1xuXHQgICAgfVxuXHQgICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG5cdCAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcblx0ICAgIH1cblx0ICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuXHQgICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG5cdCAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG5cdCAgICB9XG5cdCAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcblx0ICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcblx0ICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGRhdGE7XG5cdCAgfV0sXG5cdFxuXHQgIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuXHQgICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG5cdCAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdCAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBkYXRhO1xuXHQgIH1dLFxuXHRcblx0ICAvKipcblx0ICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcblx0ICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuXHQgICAqL1xuXHQgIHRpbWVvdXQ6IDAsXG5cdFxuXHQgIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG5cdCAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXHRcblx0ICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblx0XG5cdCAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuXHQgICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuXHQgIH1cblx0fTtcblx0XG5cdGRlZmF1bHRzLmhlYWRlcnMgPSB7XG5cdCAgY29tbW9uOiB7XG5cdCAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcblx0ICB9XG5cdH07XG5cdFxuXHR1dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG5cdCAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG5cdH0pO1xuXHRcblx0dXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcblx0ICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KSkpXG5cbi8qKiovIH0pLFxuLyogMzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblx0dmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXHRcblx0Ly8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG5cdC8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuXHQvLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG5cdC8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cdFxuXHR2YXIgY2FjaGVkU2V0VGltZW91dDtcblx0dmFyIGNhY2hlZENsZWFyVGltZW91dDtcblx0XG5cdGZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcblx0fVxuXHRmdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG5cdH1cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuXHQgICAgICAgIH1cblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcblx0ICAgIH1cblx0ICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG5cdCAgICB9XG5cdH0gKCkpXG5cdGZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG5cdCAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuXHQgICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuXHQgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG5cdCAgICB9XG5cdCAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuXHQgICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG5cdCAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG5cdCAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcblx0ICAgIH1cblx0ICAgIHRyeSB7XG5cdCAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuXHQgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG5cdCAgICB9IGNhdGNoKGUpe1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG5cdCAgICAgICAgfSBjYXRjaChlKXtcblx0ICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3Jcblx0ICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdFxuXHR9XG5cdGZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcblx0ICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuXHQgICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuXHQgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcblx0ICAgIH1cblx0ICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcblx0ICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuXHQgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcblx0ICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG5cdCAgICB9XG5cdCAgICB0cnkge1xuXHQgICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3Ncblx0ICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG5cdCAgICB9IGNhdGNoIChlKXtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG5cdCAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpe1xuXHQgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cblx0ICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHRcblx0XG5cdH1cblx0dmFyIHF1ZXVlID0gW107XG5cdHZhciBkcmFpbmluZyA9IGZhbHNlO1xuXHR2YXIgY3VycmVudFF1ZXVlO1xuXHR2YXIgcXVldWVJbmRleCA9IC0xO1xuXHRcblx0ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuXHQgICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgZHJhaW5pbmcgPSBmYWxzZTtcblx0ICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG5cdCAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuXHQgICAgfVxuXHQgICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuXHQgICAgICAgIGRyYWluUXVldWUoKTtcblx0ICAgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcblx0ICAgIGlmIChkcmFpbmluZykge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuXHQgICAgZHJhaW5pbmcgPSB0cnVlO1xuXHRcblx0ICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG5cdCAgICB3aGlsZShsZW4pIHtcblx0ICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcblx0ICAgICAgICBxdWV1ZSA9IFtdO1xuXHQgICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcblx0ICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuXHQgICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcblx0ICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG5cdCAgICB9XG5cdCAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuXHQgICAgZHJhaW5pbmcgPSBmYWxzZTtcblx0ICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0fVxuXHRcblx0cHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcblx0ICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcblx0ICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG5cdCAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuXHQgICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG5cdCAgICB9XG5cdH07XG5cdFxuXHQvLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5cdGZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuXHQgICAgdGhpcy5mdW4gPSBmdW47XG5cdCAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG5cdH1cblx0SXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG5cdH07XG5cdHByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5cdHByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5cdHByb2Nlc3MuZW52ID0ge307XG5cdHByb2Nlc3MuYXJndiA9IFtdO1xuXHRwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcblx0cHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXHRcblx0ZnVuY3Rpb24gbm9vcCgpIHt9XG5cdFxuXHRwcm9jZXNzLm9uID0gbm9vcDtcblx0cHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5cdHByb2Nlc3Mub25jZSA9IG5vb3A7XG5cdHByb2Nlc3Mub2ZmID0gbm9vcDtcblx0cHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5cdHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcblx0cHJvY2Vzcy5lbWl0ID0gbm9vcDtcblx0cHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xuXHRwcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXHRcblx0cHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXHRcblx0cHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcblx0fTtcblx0XG5cdHByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5cdHByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuXHR9O1xuXHRwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cbi8qKiovIH0pLFxuLyogMzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuXHQgIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuXHQgICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuXHQgICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuXHQgICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcblx0ICAgIH1cblx0ICB9KTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDQwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciBzZXR0bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0dmFyIGJ1aWxkVVJMID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG5cdHZhciBwYXJzZUhlYWRlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcblx0dmFyIGlzVVJMU2FtZU9yaWdpbiA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHR2YXIgY3JlYXRlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcblx0dmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcblx0ICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG5cdCAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblx0XG5cdCAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcblx0ICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuXHQgICAgfVxuXHRcblx0ICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdCAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG5cdCAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXHRcblx0ICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG5cdCAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuXHQgICAgLy8gRE9OJ1QgZG8gdGhpcyBmb3IgdGVzdGluZyBiL2MgWE1MSHR0cFJlcXVlc3QgaXMgbW9ja2VkLCBub3QgWERvbWFpblJlcXVlc3QuXG5cdCAgICBpZiAoKFwicHJvZHVjdGlvblwiKSAhPT0gJ3Rlc3QnICYmXG5cdCAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0ICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuXHQgICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcblx0ICAgICAgcmVxdWVzdCA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcblx0ICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG5cdCAgICAgIHhEb21haW4gPSB0cnVlO1xuXHQgICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcygpIHt9O1xuXHQgICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG5cdCAgICBpZiAoY29uZmlnLmF1dGgpIHtcblx0ICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG5cdCAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuXHQgICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuXHQgICAgfVxuXHRcblx0ICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cdFxuXHQgICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcblx0ICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXHRcblx0ICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcblx0ICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG5cdCAgICAgIGlmICghcmVxdWVzdCB8fCAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0ICYmICF4RG9tYWluKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG5cdCAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG5cdCAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG5cdCAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3Rcblx0ICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuXHQgICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG5cdCAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG5cdCAgICAgIHZhciByZXNwb25zZSA9IHtcblx0ICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG5cdCAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG5cdCAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuXHQgICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuXHQgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcblx0ICAgICAgICBjb25maWc6IGNvbmZpZyxcblx0ICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cdFxuXHQgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG5cdCAgICAgIHJlcXVlc3QgPSBudWxsO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG5cdCAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcblx0ICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG5cdCAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuXHQgICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblx0XG5cdCAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3Rcblx0ICAgICAgcmVxdWVzdCA9IG51bGw7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEhhbmRsZSB0aW1lb3V0XG5cdCAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG5cdCAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuXHQgICAgICAgIHJlcXVlc3QpKTtcblx0XG5cdCAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3Rcblx0ICAgICAgcmVxdWVzdCA9IG51bGw7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuXHQgICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG5cdCAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuXHQgICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcblx0ICAgICAgdmFyIGNvb2tpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0XG5cdCAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuXHQgICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuXHQgICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuXHQgICAgICAgICAgdW5kZWZpbmVkO1xuXHRcblx0ICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuXHQgICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuXHQgICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG5cdCAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcblx0ICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcblx0ICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuXHQgICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcblx0ICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG5cdCAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG5cdCAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcblx0ICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cblx0ICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuXHQgICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcblx0ICAgICAgICAgIHRocm93IGU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuXHQgICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuXHQgICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuXHQgICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG5cdCAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cblx0ICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuXHQgICAgICAgIGlmICghcmVxdWVzdCkge1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuXHQgICAgICAgIHJlamVjdChjYW5jZWwpO1xuXHQgICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3Rcblx0ICAgICAgICByZXF1ZXN0ID0gbnVsbDtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIFNlbmQgdGhlIHJlcXVlc3Rcblx0ICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG5cdCAgfSk7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBjcmVhdGVFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHRcblx0LyoqXG5cdCAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG5cdCAqL1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG5cdCAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuXHQgIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuXHQgIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG5cdCAgICByZXNvbHZlKHJlc3BvbnNlKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuXHQgICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuXHQgICAgICByZXNwb25zZS5jb25maWcsXG5cdCAgICAgIG51bGwsXG5cdCAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG5cdCAgICAgIHJlc3BvbnNlXG5cdCAgICApKTtcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBlbmhhbmNlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblx0XG5cdC8qKlxuXHQgKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuXHQgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcblx0ICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblx0fTtcblxuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG5cdCAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuXHQgIGlmIChjb2RlKSB7XG5cdCAgICBlcnJvci5jb2RlID0gY29kZTtcblx0ICB9XG5cdCAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG5cdCAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcblx0ICByZXR1cm4gZXJyb3I7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA0NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHRcblx0ZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuXHQgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cblx0ICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cblx0ICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cblx0ICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuXHQgICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuXHQgICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG5cdCAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG5cdCAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG5cdCAqL1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG5cdCAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG5cdCAgaWYgKCFwYXJhbXMpIHtcblx0ICAgIHJldHVybiB1cmw7XG5cdCAgfVxuXHRcblx0ICB2YXIgc2VyaWFsaXplZFBhcmFtcztcblx0ICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuXHQgICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcblx0ICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcblx0ICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIHBhcnRzID0gW107XG5cdFxuXHQgICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuXHQgICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG5cdCAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YWwgPSBbdmFsXTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuXHQgICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcblx0ICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuXHQgICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0XG5cdCAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuXHQgIH1cblx0XG5cdCAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcblx0ICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcblx0ICB9XG5cdFxuXHQgIHJldHVybiB1cmw7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHRcblx0Ly8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcblx0Ly8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuXHR2YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG5cdCAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcblx0ICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG5cdCAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuXHQgICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5cdF07XG5cdFxuXHQvKipcblx0ICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuXHQgKlxuXHQgKiBgYGBcblx0ICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcblx0ICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG5cdCAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcblx0ICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcblx0ICogYGBgXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcblx0ICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3Rcblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcblx0ICB2YXIgcGFyc2VkID0ge307XG5cdCAgdmFyIGtleTtcblx0ICB2YXIgdmFsO1xuXHQgIHZhciBpO1xuXHRcblx0ICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXHRcblx0ICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuXHQgICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuXHQgICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcblx0ICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblx0XG5cdCAgICBpZiAoa2V5KSB7XG5cdCAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcblx0ICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0pO1xuXHRcblx0ICByZXR1cm4gcGFyc2VkO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogNDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gKFxuXHQgIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXHRcblx0ICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcblx0ICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cblx0ICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuXHQgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXHQgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHQgICAgdmFyIG9yaWdpblVSTDtcblx0XG5cdCAgICAvKipcblx0ICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG5cdCAgICAqXG5cdCAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcblx0ICAgICogQHJldHVybnMge09iamVjdH1cblx0ICAgICovXG5cdCAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuXHQgICAgICB2YXIgaHJlZiA9IHVybDtcblx0XG5cdCAgICAgIGlmIChtc2llKSB7XG5cdCAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuXHQgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXHQgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblx0XG5cdCAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuXHQgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG5cdCAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcblx0ICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG5cdCAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcblx0ICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG5cdCAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcblx0ICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG5cdCAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcblx0ICAgICAgICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcblx0ICAgICAgfTtcblx0ICAgIH1cblx0XG5cdCAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblx0XG5cdCAgICAvKipcblx0ICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cblx0ICAgICpcblx0ICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG5cdCAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2Vcblx0ICAgICovXG5cdCAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcblx0ICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcblx0ICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuXHQgICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuXHQgICAgfTtcblx0ICB9KSgpIDpcblx0XG5cdCAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cblx0ICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9O1xuXHQgIH0pKClcblx0KTtcblxuXG4vKioqLyB9KSxcbi8qIDQ3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0Ly8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cdFxuXHR2YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXHRcblx0ZnVuY3Rpb24gRSgpIHtcblx0ICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcblx0fVxuXHRFLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcblx0RS5wcm90b3R5cGUuY29kZSA9IDU7XG5cdEUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblx0XG5cdGZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcblx0ICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcblx0ICB2YXIgb3V0cHV0ID0gJyc7XG5cdCAgZm9yIChcblx0ICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG5cdCAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcblx0ICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcblx0ICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG5cdCAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG5cdCAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuXHQgICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcblx0ICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuXHQgICkge1xuXHQgICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuXHQgICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuXHQgICAgICB0aHJvdyBuZXcgRSgpO1xuXHQgICAgfVxuXHQgICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG5cdCAgfVxuXHQgIHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gYnRvYTtcblxuXG4vKioqLyB9KSxcbi8qIDQ4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IChcblx0ICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblx0XG5cdCAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG5cdCAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcblx0ICAgICAgICB2YXIgY29va2llID0gW107XG5cdCAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXHRcblx0ICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcblx0ICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuXHQgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcblx0ICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG5cdCAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcblx0ICAgICAgfSxcblx0XG5cdCAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuXHQgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG5cdCAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcblx0ICAgICAgfSxcblx0XG5cdCAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcblx0ICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH0pKCkgOlxuXHRcblx0ICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG5cdCAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuXHQgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcblx0ICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuXHQgICAgfTtcblx0ICB9KSgpXG5cdCk7XG5cblxuLyoqKi8gfSksXG4vKiA0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHRcblx0ZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuXHQgIHRoaXMuaGFuZGxlcnMgPSBbXTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG5cdCAqL1xuXHRJbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG5cdCAgdGhpcy5oYW5kbGVycy5wdXNoKHtcblx0ICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuXHQgICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG5cdCAgfSk7XG5cdCAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuXHQgKi9cblx0SW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG5cdCAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG5cdCAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG5cdCAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuXHQgKi9cblx0SW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuXHQgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuXHQgICAgaWYgKGggIT09IG51bGwpIHtcblx0ICAgICAgZm4oaCk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxuXG4vKioqLyB9KSxcbi8qIDUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciB0cmFuc2Zvcm1EYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cdHZhciBpc0NhbmNlbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xuXHR2YXIgZGVmYXVsdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblx0dmFyIGlzQWJzb2x1dGVVUkwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKTtcblx0dmFyIGNvbWJpbmVVUkxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NCk7XG5cdFxuXHQvKipcblx0ICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cblx0ICovXG5cdGZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG5cdCAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuXHQgICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG5cdCAqL1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcblx0ICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cdFxuXHQgIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcblx0ICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcblx0ICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cdCAgfVxuXHRcblx0ICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuXHQgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cdFxuXHQgIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcblx0ICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG5cdCAgICBjb25maWcuZGF0YSxcblx0ICAgIGNvbmZpZy5oZWFkZXJzLFxuXHQgICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3Rcblx0ICApO1xuXHRcblx0ICAvLyBGbGF0dGVuIGhlYWRlcnNcblx0ICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuXHQgICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuXHQgICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG5cdCAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuXHQgICk7XG5cdFxuXHQgIHV0aWxzLmZvckVhY2goXG5cdCAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcblx0ICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuXHQgICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcblx0ICAgIH1cblx0ICApO1xuXHRcblx0ICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cdFxuXHQgIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG5cdCAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cdFxuXHQgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcblx0ICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuXHQgICAgICByZXNwb25zZS5kYXRhLFxuXHQgICAgICByZXNwb25zZS5oZWFkZXJzLFxuXHQgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2Vcblx0ICAgICk7XG5cdFxuXHQgICAgcmV0dXJuIHJlc3BvbnNlO1xuXHQgIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcblx0ICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuXHQgICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cdFxuXHQgICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuXHQgICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuXHQgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcblx0ICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuXHQgICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG5cdCAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2Vcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG5cdCAgfSk7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHRcblx0LyoqXG5cdCAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2Vcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG5cdCAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcblx0ICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuXHQgKi9cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuXHQgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuXHQgIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcblx0ICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIGRhdGE7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcblx0ICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3Rcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuXHQgKi9cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuXHQgIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cblx0ICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcblx0ICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cblx0ICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG5cdCAqL1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG5cdCAgcmV0dXJuIHJlbGF0aXZlVVJMXG5cdCAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuXHQgICAgOiBiYXNlVVJMO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvKipcblx0ICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG5cdCAqXG5cdCAqIEBjbGFzc1xuXHQgKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuXHQgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdH1cblx0XG5cdENhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0ICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcblx0fTtcblx0XG5cdENhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIENhbmNlbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xuXHRcblx0LyoqXG5cdCAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG5cdCAqXG5cdCAqIEBjbGFzc1xuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuXHQgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcblx0ICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcblx0ICB9XG5cdFxuXHQgIHZhciByZXNvbHZlUHJvbWlzZTtcblx0ICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuXHQgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuXHQgIH0pO1xuXHRcblx0ICB2YXIgdG9rZW4gPSB0aGlzO1xuXHQgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG5cdCAgICBpZiAodG9rZW4ucmVhc29uKSB7XG5cdCAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcblx0ICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG5cdCAgfSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuXHQgKi9cblx0Q2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuXHQgIGlmICh0aGlzLnJlYXNvbikge1xuXHQgICAgdGhyb3cgdGhpcy5yZWFzb247XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcblx0ICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cblx0ICovXG5cdENhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcblx0ICB2YXIgY2FuY2VsO1xuXHQgIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG5cdCAgICBjYW5jZWwgPSBjO1xuXHQgIH0pO1xuXHQgIHJldHVybiB7XG5cdCAgICB0b2tlbjogdG9rZW4sXG5cdCAgICBjYW5jZWw6IGNhbmNlbFxuXHQgIH07XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuXG5cbi8qKiovIH0pLFxuLyogNTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvKipcblx0ICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cblx0ICpcblx0ICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cblx0ICpcblx0ICogIGBgYGpzXG5cdCAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG5cdCAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcblx0ICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG5cdCAqICBgYGBcblx0ICpcblx0ICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG5cdCAqXG5cdCAqICBgYGBqc1xuXHQgKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuXHQgKiAgYGBgXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdCAqIEByZXR1cm5zIHtGdW5jdGlvbn1cblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG5cdCAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcblx0ICB9O1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogNTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXHRcblx0dmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblx0XG5cdHZhciBfaXNFbXB0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xuXHRcblx0dmFyIF9pc0VtcHR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRW1wdHkpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBWaWRlb0RldGFpbCA9IGZ1bmN0aW9uIFZpZGVvRGV0YWlsKF9yZWYpIHtcblx0ICB2YXIgX3JlZiR2aWRlbyA9IF9yZWYudmlkZW8sXG5cdCAgICAgIHZpZGVvID0gX3JlZiR2aWRlbyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHZpZGVvO1xuXHRcblx0ICBpZiAoKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KSh2aWRlbykpIHtcblx0ICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgJ2RpdicsXG5cdCAgICAgIG51bGwsXG5cdCAgICAgICdMb2FkaW5nLi4uJ1xuXHQgICAgKTtcblx0ICB9XG5cdCAgdmFyIHZpZGVvSWQgPSB2aWRlby5pZC52aWRlb0lkO1xuXHRcblx0ICB2YXIgdXJsID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgKyB2aWRlb0lkO1xuXHRcblx0ICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAnZGl2Jyxcblx0ICAgIHsgY2xhc3NOYW1lOiAndmlkZW8tZGV0YWlsIGNvbC1tZC04JyB9LFxuXHQgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICdkaXYnLFxuXHQgICAgICB7IGNsYXNzTmFtZTogJ2VtYmVkLXJlc3BvbnNpdmUgZW1iZWQtcmVzcG9uc2l2ZS0xNmJ5OScgfSxcblx0ICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScsIHsgdGl0bGU6ICd2aWRlby1kZXRhaWwtd2luZG93JywgY2xhc3NOYW1lOiAnZW1iZWQtcmVzcG9uc2l2ZS1pdGVtJywgc3JjOiB1cmwgfSlcblx0ICAgICksXG5cdCAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgJ2RpdicsXG5cdCAgICAgIHsgY2xhc3NOYW1lOiAnZGV0YWlscycgfSxcblx0ICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgbnVsbCxcblx0ICAgICAgICB2aWRlby5zbmlwcGV0LnRpdGxlXG5cdCAgICAgICksXG5cdCAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdkaXYnLFxuXHQgICAgICAgIG51bGwsXG5cdCAgICAgICAgdmlkZW8uc25pcHBldC5kZXNjcmlwdGlvblxuXHQgICAgICApXG5cdCAgICApXG5cdCAgKTtcblx0fTtcblx0XG5cdFZpZGVvRGV0YWlsLnByb3BUeXBlcyA9IHtcblx0ICB2aWRlbzogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG5cdCAgICBzbmlwcGV0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcblx0ICAgICAgdGl0bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuXHQgICAgICBkZXNjcmlwdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcblx0ICAgIH0pXG5cdCAgfSlcblx0fTtcblx0XG5cdFZpZGVvRGV0YWlsLmRlZmF1bHRQcm9wcyA9IHtcblx0ICB2aWRlbzoge31cblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFZpZGVvRGV0YWlsO1xuXG4vKioqLyB9KSxcbi8qIDU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXHQgKi9cblx0XG5cdGlmIChmYWxzZSkge1xuXHQgIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHQgICAgU3ltYm9sLmZvciAmJlxuXHQgICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuXHQgICAgMHhlYWM3O1xuXHRcblx0ICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcblx0ICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuXHQgICAgICBvYmplY3QgIT09IG51bGwgJiZcblx0ICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5cdCAgfTtcblx0XG5cdCAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG5cdCAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuXHQgIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcblx0ICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG5cdH0gZWxzZSB7XG5cdCAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cblx0ICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG5cdCAgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKSgpO1xuXHR9XG5cblxuLyoqKi8gfSksXG4vKiA2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cblx0ICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgZW1wdHlGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblx0dmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHQgIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcblx0ICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG5cdCAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgaW52YXJpYW50KFxuXHQgICAgICBmYWxzZSxcblx0ICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuXHQgICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG5cdCAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuXHQgICAgKTtcblx0ICB9O1xuXHQgIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG5cdCAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcblx0ICAgIHJldHVybiBzaGltO1xuXHQgIH07XG5cdCAgLy8gSW1wb3J0YW50IVxuXHQgIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuXHQgIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcblx0ICAgIGFycmF5OiBzaGltLFxuXHQgICAgYm9vbDogc2hpbSxcblx0ICAgIGZ1bmM6IHNoaW0sXG5cdCAgICBudW1iZXI6IHNoaW0sXG5cdCAgICBvYmplY3Q6IHNoaW0sXG5cdCAgICBzdHJpbmc6IHNoaW0sXG5cdCAgICBzeW1ib2w6IHNoaW0sXG5cdFxuXHQgICAgYW55OiBzaGltLFxuXHQgICAgYXJyYXlPZjogZ2V0U2hpbSxcblx0ICAgIGVsZW1lbnQ6IHNoaW0sXG5cdCAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuXHQgICAgbm9kZTogc2hpbSxcblx0ICAgIG9iamVjdE9mOiBnZXRTaGltLFxuXHQgICAgb25lT2Y6IGdldFNoaW0sXG5cdCAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG5cdCAgICBzaGFwZTogZ2V0U2hpbSxcblx0ICAgIGV4YWN0OiBnZXRTaGltXG5cdCAgfTtcblx0XG5cdCAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuXHQgIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXHRcblx0ICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA2MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cblx0ICpcblx0ICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvKipcblx0ICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuXHQgKlxuXHQgKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuXHQgKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcblx0ICogZXhwZWN0aW5nLlxuXHQgKlxuXHQgKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuXHQgKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG5cdCAqL1xuXHRcblx0dmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblx0XG5cdGlmIChmYWxzZSkge1xuXHQgIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG5cdCAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuXHQgICAgfVxuXHQgIH07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuXHQgIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cdFxuXHQgIGlmICghY29uZGl0aW9uKSB7XG5cdCAgICB2YXIgZXJyb3I7XG5cdCAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuXHQgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuXHQgICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuXHQgICAgICB9KSk7XG5cdCAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG5cdCAgICB9XG5cdFxuXHQgICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuXHQgICAgdGhyb3cgZXJyb3I7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuLyoqKi8gfSksXG4vKiA2MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cblx0ICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcblxuXG4vKioqLyB9KSxcbi8qIDYzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGJhc2VLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCksXG5cdCAgICBnZXRUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KSxcblx0ICAgIGlzQXJndW1lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MSksXG5cdCAgICBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MyksXG5cdCAgICBpc0FycmF5TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oODQpLFxuXHQgICAgaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2KSxcblx0ICAgIGlzUHJvdG90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSksXG5cdCAgICBpc1R5cGVkQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5KTtcblx0XG5cdC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cblx0dmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuXHQgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cdFxuXHQvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG5cdHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cdFxuXHQvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cblx0dmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cblx0ICpcblx0ICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG5cdCAqIHByb3BlcnRpZXMuXG5cdCAqXG5cdCAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuXHQgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG5cdCAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZW1iZXJPZiBfXG5cdCAqIEBzaW5jZSAwLjEuMFxuXHQgKiBAY2F0ZWdvcnkgTGFuZ1xuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy5pc0VtcHR5KG51bGwpO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNFbXB0eSh0cnVlKTtcblx0ICogLy8gPT4gdHJ1ZVxuXHQgKlxuXHQgKiBfLmlzRW1wdHkoMSk7XG5cdCAqIC8vID0+IHRydWVcblx0ICpcblx0ICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqXG5cdCAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcblx0ICogLy8gPT4gZmFsc2Vcblx0ICovXG5cdGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcblx0ICBpZiAodmFsdWUgPT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHQgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcblx0ICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcblx0ICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG5cdCAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcblx0ICB9XG5cdCAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG5cdCAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuXHQgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuXHQgIH1cblx0ICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG5cdCAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG5cdCAgfVxuXHQgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuXHQgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gdHJ1ZTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc0VtcHR5O1xuXG5cbi8qKiovIH0pLFxuLyogNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgaXNQcm90b3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1KSxcblx0ICAgIG5hdGl2ZUtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblx0XG5cdC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cblx0dmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblx0XG5cdC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuXHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblx0XG5cdC8qKlxuXHQgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cblx0ICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuXHQgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuXHQgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcblx0ICB9XG5cdCAgdmFyIHJlc3VsdCA9IFtdO1xuXHQgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuXHQgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG5cdCAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG5cblxuLyoqKi8gfSksXG4vKiA2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cblx0dmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblx0XG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cblx0ICovXG5cdGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG5cdCAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3Rvcixcblx0ICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cdFxuXHQgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG5cblxuLyoqKi8gfSksXG4vKiA2NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBvdmVyQXJnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nyk7XG5cdFxuXHQvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG5cdHZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcblxuXG4vKioqLyB9KSxcbi8qIDY3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cblx0ICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuXHQgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcblx0ICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcblx0ICB9O1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG5cblxuLyoqKi8gfSksXG4vKiA2OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBEYXRhVmlldyA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpLFxuXHQgICAgTWFwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NyksXG5cdCAgICBQcm9taXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OCksXG5cdCAgICBTZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KSxcblx0ICAgIFdlYWtNYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKSxcblx0ICAgIGJhc2VHZXRUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KSxcblx0ICAgIHRvU291cmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NSk7XG5cdFxuXHQvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG5cdHZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcblx0ICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuXHQgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcblx0ICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuXHQgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblx0XG5cdHZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cdFxuXHQvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuXHR2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuXHQgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG5cdCAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuXHQgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG5cdCAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXHRcblx0LyoqXG5cdCAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG5cdCAqL1xuXHR2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblx0XG5cdC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cblx0aWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuXHQgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuXHQgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuXHQgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuXHQgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuXHQgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG5cdCAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcblx0ICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cdFxuXHQgICAgaWYgKGN0b3JTdHJpbmcpIHtcblx0ICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG5cdCAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcblx0ICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG5cdCAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG5cdCAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuXHQgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHQgIH07XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuXG5cbi8qKiovIH0pLFxuLyogNjkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2V0TmF0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCksXG5cdCAgICByb290ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdFxuXHQvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG5cdHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG5cblxuLyoqKi8gfSksXG4vKiA3MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBiYXNlSXNOYXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKSxcblx0ICAgIGdldFZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nik7XG5cdFxuXHQvKipcblx0ICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cblx0ICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG5cdCAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuXHQgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuXG5cbi8qKiovIH0pLFxuLyogNzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgaXNGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpLFxuXHQgICAgaXNNYXNrZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKSxcblx0ICAgIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSksXG5cdCAgICB0b1NvdXJjZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpO1xuXHRcblx0LyoqXG5cdCAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcblx0ICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG5cdCAqL1xuXHR2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXHRcblx0LyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuXHR2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblx0XG5cdC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cblx0dmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcblx0ICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblx0XG5cdC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cblx0dmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblx0XG5cdC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuXHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblx0XG5cdC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG5cdHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG5cdCAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcblx0ICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcblx0KTtcblx0XG5cdC8qKlxuXHQgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcblx0ICogIGVsc2UgYGZhbHNlYC5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuXHQgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3Rvcjtcblx0ICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuXG5cbi8qKiovIH0pLFxuLyogNzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgYmFzZUdldFRhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpLFxuXHQgICAgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XG5cdC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cblx0dmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuXHQgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG5cdCAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuXHQgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWVtYmVyT2YgX1xuXHQgKiBAc2luY2UgMC4xLjBcblx0ICogQGNhdGVnb3J5IExhbmdcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy5pc0Z1bmN0aW9uKF8pO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG5cdCAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdCAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG5cdCAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG5cdCAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuXHQgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcblxuXG4vKioqLyB9KSxcbi8qIDczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGNvcmVKc0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTtcblx0XG5cdC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG5cdHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuXHQgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG5cdCAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuXHR9KCkpO1xuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cblx0ICovXG5cdGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcblx0ICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuXG5cbi8qKiovIH0pLFxuLyogNzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgcm9vdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHRcblx0LyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuXHR2YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuXG5cbi8qKiovIH0pLFxuLyogNzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG5cdHZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cdFxuXHQvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG5cdHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cdFxuXHQvKipcblx0ICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cblx0ICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG5cdCAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuXHQgICAgfSBjYXRjaCAoZSkge31cblx0ICAgIHRyeSB7XG5cdCAgICAgIHJldHVybiAoZnVuYyArICcnKTtcblx0ICAgIH0gY2F0Y2ggKGUpIHt9XG5cdCAgfVxuXHQgIHJldHVybiAnJztcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcblxuXG4vKioqLyB9KSxcbi8qIDc2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG5cdCAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG5cdCAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG5cblxuLyoqKi8gfSksXG4vKiA3NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBnZXROYXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKSxcblx0ICAgIHJvb3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cblx0dmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IE1hcDtcblxuXG4vKioqLyB9KSxcbi8qIDc4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGdldE5hdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzApLFxuXHQgICAgcm9vdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHRcblx0LyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuXHR2YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuXG5cbi8qKiovIH0pLFxuLyogNzkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2V0TmF0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCksXG5cdCAgICByb290ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdFxuXHQvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG5cdHZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG5cblxuLyoqKi8gfSksXG4vKiA4MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBnZXROYXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKSxcblx0ICAgIHJvb3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cblx0dmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcblxuXG4vKioqLyB9KSxcbi8qIDgxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGJhc2VJc0FyZ3VtZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oODIpLFxuXHQgICAgaXNPYmplY3RMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cdFxuXHQvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG5cdHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cdFxuXHQvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cblx0dmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cdFxuXHQvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cblx0dmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWVtYmVyT2YgX1xuXHQgKiBAc2luY2UgMC4xLjBcblx0ICogQGNhdGVnb3J5IExhbmdcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcblx0ICogIGVsc2UgYGZhbHNlYC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcblx0ICogLy8gPT4gdHJ1ZVxuXHQgKlxuXHQgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqL1xuXHR2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuXHQgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuXHQgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG5cblxuLyoqKi8gfSksXG4vKiA4MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBiYXNlR2V0VGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSksXG5cdCAgICBpc09iamVjdExpa2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblx0XG5cdC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cblx0dmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0XG5cdC8qKlxuXHQgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcblx0ICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcblxuXG4vKioqLyB9KSxcbi8qIDgzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDAuMS4wXG5cdCAqIEBjYXRlZ29yeSBMYW5nXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuXHQgKiBAZXhhbXBsZVxuXHQgKlxuXHQgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcblx0ICogLy8gPT4gdHJ1ZVxuXHQgKlxuXHQgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqXG5cdCAqIF8uaXNBcnJheSgnYWJjJyk7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqXG5cdCAqIF8uaXNBcnJheShfLm5vb3ApO1xuXHQgKiAvLyA9PiBmYWxzZVxuXHQgKi9cblx0dmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuXG5cbi8qKiovIH0pLFxuLyogODQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgaXNGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpLFxuXHQgICAgaXNMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0XG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG5cdCAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3Jcblx0ICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWVtYmVyT2YgX1xuXHQgKiBAc2luY2UgNC4wLjBcblx0ICogQGNhdGVnb3J5IExhbmdcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG5cdCAqIC8vID0+IHRydWVcblx0ICpcblx0ICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG5cdCAqIC8vID0+IHRydWVcblx0ICpcblx0ICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuXHQgKiAvLyA9PiBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcblx0ICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcblxuXG4vKioqLyB9KSxcbi8qIDg1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG5cdHZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblx0XG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuXHQgKlxuXHQgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuXHQgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZW1iZXJPZiBfXG5cdCAqIEBzaW5jZSA0LjAuMFxuXHQgKiBAY2F0ZWdvcnkgTGFuZ1xuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy5pc0xlbmd0aCgzKTtcblx0ICogLy8gPT4gdHJ1ZVxuXHQgKlxuXHQgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuXHQgKiAvLyA9PiBmYWxzZVxuXHQgKlxuXHQgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcblx0ICogLy8gPT4gZmFsc2Vcblx0ICpcblx0ICogXy5pc0xlbmd0aCgnMycpO1xuXHQgKiAvLyA9PiBmYWxzZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcblx0ICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG5cdCAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG5cblxuLyoqKi8gfSksXG4vKiA4NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHt2YXIgcm9vdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpLFxuXHQgICAgc3R1YkZhbHNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OCk7XG5cdFxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdFxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG5cdHZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdFxuXHQvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuXHR2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblx0XG5cdC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuXHR2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXHRcblx0LyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuXHR2YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDQuMy4wXG5cdCAqIEBjYXRlZ29yeSBMYW5nXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuXHQgKiBAZXhhbXBsZVxuXHQgKlxuXHQgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuXHQgKiAvLyA9PiBmYWxzZVxuXHQgKi9cblx0dmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KShtb2R1bGUpKSlcblxuLyoqKi8gfSksXG4vKiA4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0XHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbW9kdWxlO1xyXG5cdH1cclxuXG5cbi8qKiovIH0pLFxuLyogODggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZW1iZXJPZiBfXG5cdCAqIEBzaW5jZSA0LjEzLjBcblx0ICogQGNhdGVnb3J5IFV0aWxcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG5cdCAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG5cdCAqL1xuXHRmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcblxuXG4vKioqLyB9KSxcbi8qIDg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGJhc2VJc1R5cGVkQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKSxcblx0ICAgIGJhc2VVbmFyeSA9IF9fd2VicGFja19yZXF1aXJlX18oOTEpLFxuXHQgICAgbm9kZVV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyKTtcblx0XG5cdC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG5cdHZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWVtYmVyT2YgX1xuXHQgKiBAc2luY2UgMy4wLjBcblx0ICogQGNhdGVnb3J5IExhbmdcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cblx0ICogQGV4YW1wbGVcblx0ICpcblx0ICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNUeXBlZEFycmF5KFtdKTtcblx0ICogLy8gPT4gZmFsc2Vcblx0ICovXG5cdHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuXG5cbi8qKiovIH0pLFxuLyogOTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgYmFzZUdldFRhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpLFxuXHQgICAgaXNMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KSxcblx0ICAgIGlzT2JqZWN0TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXHRcblx0LyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuXHR2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuXHQgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuXHQgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcblx0ICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG5cdCAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG5cdCAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcblx0ICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuXHQgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG5cdCAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcblx0ICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuXHQgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG5cdCAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcblx0ICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cdFxuXHR2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuXHQgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuXHQgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuXHQgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuXHQgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuXHQgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG5cdCAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcblx0ICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuXHQgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcblx0ICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG5cdCAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXHRcblx0LyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xuXHR2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcblx0dHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG5cdHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cblx0dHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cblx0dHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxuXHR0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcblx0dHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuXHR0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG5cdHR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cblx0dHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxuXHR0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG5cdHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cblx0dHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxuXHR0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG5cdCAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcblx0ICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcblxuXG4vKioqLyB9KSxcbi8qIDkxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuXHQgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuXHQgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuXHQgIH07XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuXG5cbi8qKiovIH0pLFxuLyogOTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24obW9kdWxlKSB7dmFyIGZyZWVHbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblx0XG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0XG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cblx0dmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0XG5cdC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG5cdHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXHRcblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG5cdHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXHRcblx0LyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG5cdHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcblx0ICB0cnkge1xuXHQgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuXHQgIH0gY2F0Y2ggKGUpIHt9XG5cdH0oKSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oODcpKG1vZHVsZSkpKVxuXG4vKioqLyB9KSxcbi8qIDkzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcblx0XG5cdHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cdFxuXHR2YXIgX1ZpZGVvTGlzdEl0ZW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0KTtcblx0XG5cdHZhciBfVmlkZW9MaXN0SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WaWRlb0xpc3RJdGVtKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgVmlkZW9MaXN0ID0gZnVuY3Rpb24gVmlkZW9MaXN0KF9yZWYpIHtcblx0ICB2YXIgdmlkZW9zID0gX3JlZi52aWRlb3MsXG5cdCAgICAgIG9uVmlkZW9TZWxlY3QgPSBfcmVmLm9uVmlkZW9TZWxlY3Q7XG5cdFxuXHQgIHZhciB2aWRlb0l0ZW1zID0gdmlkZW9zLm1hcChmdW5jdGlvbiAodmlkZW8pIHtcblx0ICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVmlkZW9MaXN0SXRlbTIuZGVmYXVsdCwge1xuXHQgICAgICBvblZpZGVvU2VsZWN0OiBvblZpZGVvU2VsZWN0LFxuXHQgICAgICBrZXk6IHZpZGVvLmV0YWcsXG5cdCAgICAgIHZpZGVvOiB2aWRlb1xuXHQgICAgfSk7XG5cdCAgfSk7XG5cdFxuXHQgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICd1bCcsXG5cdCAgICB7IGNsYXNzTmFtZTogJ2NvbC1tZC00IGxpc3QtZ3JvdXAnIH0sXG5cdCAgICB2aWRlb0l0ZW1zXG5cdCAgKTtcblx0fTtcblx0XG5cdFZpZGVvTGlzdC5wcm9wVHlwZXMgPSB7XG5cdCAgdmlkZW9zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG5cdCAgICBldGFnOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuXHQgIH0pKSxcblx0ICBvblZpZGVvU2VsZWN0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcblx0fTtcblx0XG5cdFZpZGVvTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG5cdCAgdmlkZW9zOiBbXSxcblx0ICBvblZpZGVvU2VsZWN0OiBmdW5jdGlvbiBvblZpZGVvU2VsZWN0KCkge31cblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFZpZGVvTGlzdDtcblxuLyoqKi8gfSksXG4vKiA5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXHRcblx0dmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBWaWRlb0xpc3RJdGVtID0gZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG5cdCAgX2luaGVyaXRzKFZpZGVvTGlzdEl0ZW0sIF9QdXJlQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gVmlkZW9MaXN0SXRlbSgpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWRlb0xpc3RJdGVtKTtcblx0XG5cdCAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVmlkZW9MaXN0SXRlbS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpZGVvTGlzdEl0ZW0pKS5jYWxsKHRoaXMpKTtcblx0XG5cdCAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX3RoaXMpO1xuXHQgICAgcmV0dXJuIF90aGlzO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFZpZGVvTGlzdEl0ZW0sIFt7XG5cdCAgICBrZXk6ICdoYW5kbGVDbGljaycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG5cdCAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuXHQgICAgICAgICAgdmlkZW8gPSBfcHJvcHMudmlkZW8sXG5cdCAgICAgICAgICBvblZpZGVvU2VsZWN0ID0gX3Byb3BzLm9uVmlkZW9TZWxlY3Q7XG5cdFxuXHQgICAgICBvblZpZGVvU2VsZWN0KHZpZGVvKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgdmFyIHZpZGVvID0gdGhpcy5wcm9wcy52aWRlbztcblx0XG5cdCAgICAgIHZhciBpbWFnZVVybCA9IHZpZGVvLnNuaXBwZXQudGh1bWJuYWlscy5kZWZhdWx0LnVybDtcblx0ICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdsaScsXG5cdCAgICAgICAgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLCBjbGFzc05hbWU6ICdsaXN0LWdyb3VwLWl0ZW0nIH0sXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgIHsgY2xhc3NOYW1lOiAndmlkZW8tbGlzdCBtZWRpYScgfSxcblx0ICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdtZWRpYS1sZWZ0JyB9LFxuXHQgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBhbHQ6ICcnLCBjbGFzc05hbWU6ICdtZWRpYS1vYmplY3QnLCBzcmM6IGltYWdlVXJsIH0pXG5cdCAgICAgICAgICApLFxuXHQgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ21lZGlhLWJvZHknIH0sXG5cdCAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbWVkaWEtaGFkaW5nJyB9LFxuXHQgICAgICAgICAgICAgIHZpZGVvLnNuaXBwZXQudGl0bGVcblx0ICAgICAgICAgICAgKVxuXHQgICAgICAgICAgKVxuXHQgICAgICAgIClcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBWaWRlb0xpc3RJdGVtO1xuXHR9KF9yZWFjdC5QdXJlQ29tcG9uZW50KTtcblx0XG5cdFZpZGVvTGlzdEl0ZW0ucHJvcFR5cGVzID0ge1xuXHQgIHZpZGVvOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcblx0ICAgIHNuaXBwZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuXHQgICAgICB0aHVtYm5haWxzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxuXHQgICAgfSlcblx0ICB9KS5pc1JlcXVpcmVkLFxuXHQgIG9uVmlkZW9TZWxlY3Q6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkXG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBWaWRlb0xpc3RJdGVtO1xuXG4vKioqLyB9KSxcbi8qIDk1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSk7XG5cdFxuXHR2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIFNlYXJjaEJhciA9IGZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuXHQgIF9pbmhlcml0cyhTZWFyY2hCYXIsIF9QdXJlQ29tcG9uZW50KTtcblx0XG5cdCAgZnVuY3Rpb24gU2VhcmNoQmFyKHByb3BzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VhcmNoQmFyKTtcblx0XG5cdCAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2VhcmNoQmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2VhcmNoQmFyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXHRcblx0ICAgIF90aGlzLm9uSW5wdXRDaGFuZ2UgPSBfdGhpcy5vbklucHV0Q2hhbmdlLmJpbmQoX3RoaXMpO1xuXHQgICAgX3RoaXMuc3RhdGUgPSB7XG5cdCAgICAgIHRlcm06ICcnXG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIF90aGlzO1xuXHQgIH1cblx0XG5cdCAgX2NyZWF0ZUNsYXNzKFNlYXJjaEJhciwgW3tcblx0ICAgIGtleTogJ29uSW5wdXRDaGFuZ2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG9uSW5wdXRDaGFuZ2UoZXZlbnQpIHtcblx0ICAgICAgdmFyIHRlcm0gPSBldmVudC50YXJnZXQudmFsdWU7XG5cdCAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXJtOiB0ZXJtIH0pO1xuXHQgICAgICB0aGlzLnByb3BzLm9uU2VhcmNoVGVybUNoYW5nZSh0ZXJtKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdyZW5kZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICdkaXYnLFxuXHQgICAgICAgIHsgY2xhc3NOYW1lOiAnc2VhcmNoLWJhcicgfSxcblx0ICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG5cdCAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS50ZXJtLFxuXHQgICAgICAgICAgb25DaGFuZ2U6IHRoaXMub25JbnB1dENoYW5nZVxuXHQgICAgICAgIH0pXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHRcblx0ICByZXR1cm4gU2VhcmNoQmFyO1xuXHR9KF9yZWFjdC5QdXJlQ29tcG9uZW50KTtcblx0XG5cdFNlYXJjaEJhci5wcm9wVHlwZXMgPSB7XG5cdCAgb25TZWFyY2hUZXJtQ2hhbmdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcblx0fTtcblx0XG5cdFNlYXJjaEJhci5kZWZhdWx0UHJvcHMgPSB7XG5cdCAgb25TZWFyY2hUZXJtQ2hhbmdlOiBmdW5jdGlvbiBvblNlYXJjaFRlcm1DaGFuZ2UoKSB7fVxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gU2VhcmNoQmFyO1xuXG4vKioqLyB9KSxcbi8qIDk2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdHZhciBBUElfUk9PVF9VUkwgPSBleHBvcnRzLkFQSV9ST09UX1VSTCA9ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS95b3V0dWJlL3YzL3NlYXJjaCc7XG5cdHZhciBBUElfS0VZID0gZXhwb3J0cy5BUElfS0VZID0gJ0FJemFTeUEtRmNkbF94N1JwMWV6Mzg0VlFrdXVhU0lVVVh0WVZxUSc7XG5cdHZhciBERUZBVUxUX1NFQVJDSCA9IGV4cG9ydHMuREVGQVVMVF9TRUFSQ0ggPSAndGlueSBob3VzZXMnO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGJ1bmRsZS5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA1YWJhNTQ5NTg5ZGRhOWEwOGUzZSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanN4IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4yLjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0scj1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdD1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQsdT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSx2PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHc9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGM9MDtjPGI7YysrKWUrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Yj1FcnJvcihlK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7Yi5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiO2IuZnJhbWVzVG9Qb3A9MTt0aHJvdyBiO31cbnZhciB6PXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBBKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9QS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtBLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/eShcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0EucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gQihhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHx6fWZ1bmN0aW9uIEMoKXt9Qy5wcm90b3R5cGU9QS5wcm90b3R5cGU7dmFyIEQ9Qi5wcm90b3R5cGU9bmV3IEM7RC5jb25zdHJ1Y3Rvcj1CO20oRCxBLnByb3RvdHlwZSk7RC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEM7Ri5jb25zdHJ1Y3Rvcj1FO20oRixBLnByb3RvdHlwZSk7Ri51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQ9ITA7Ri5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbn07dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGUpe3ZhciBjLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsYykmJiFJLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbD0wO2w8ZjtsKyspaFtsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpyLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fWZ1bmN0aW9uIEsoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXJ9XG5mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBMPS9cXC8rL2csTT1bXTtmdW5jdGlvbiBOKGEsYixlLGMpe2lmKE0ubGVuZ3RoKXt2YXIgZD1NLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gTyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPk0ubGVuZ3RoJiZNLnB1c2goYSl9XG5mdW5jdGlvbiBQKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSByOmNhc2UgdDpjYXNlIHU6Y2FzZSB2Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1EoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrUShkLGspO2crPVAoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9XG5mLmNhbGwoYSksaz0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitRKGQsaysrKSxnKz1QKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLHkoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFIoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gUyhhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9UKGEsYyxlLHAudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKEsoYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBUKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKEwsXCIkXFx4MjYvXCIpK1wiL1wiKTtiPU4oYixnLGMsZCk7bnVsbD09YXx8UChhLFwiXCIsUyxiKTtPKGIpfVxudmFyIFU9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VChhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9TihudWxsLG51bGwsYixlKTtudWxsPT1hfHxQKGEsXCJcIixSLGIpO08oYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UChhLFwiXCIscC50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VChhLGIsbnVsbCxwLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe0soYSk/dm9pZCAwOnkoXCIxNDNcIik7cmV0dXJuIGF9fSxDb21wb25lbnQ6QSxQdXJlQ29tcG9uZW50OkIsdW5zdGFibGVfQXN5bmNDb21wb25lbnQ6RSxGcmFnbWVudDp3LGNyZWF0ZUVsZW1lbnQ6SixjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe3ZhciBjPW0oe30sYS5wcm9wcyksXG5kPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUguY2FsbChiLGgpJiYhSS5oYXNPd25Qcm9wZXJ0eShoKSYmKGNbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBsPTA7bDxoO2wrKylmW2xdPWFyZ3VtZW50c1tsKzJdO2MuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cix0eXBlOmEudHlwZSxrZXk6ZCxyZWY6Zyxwcm9wczpjLF9vd25lcjprfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0sXG5pc1ZhbGlkRWxlbWVudDpLLHZlcnNpb246XCIxNi4yLjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6Ryxhc3NpZ246bX19LFY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpVfSksVz1WJiZVfHxWO21vZHVsZS5leHBvcnRzPVdbXCJkZWZhdWx0XCJdP1dbXCJkZWZhdWx0XCJdOlc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vb2JqZWN0LWFzc2lnbi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvZW1wdHlPYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjIuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxsPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxCPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEM9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksYmE9cmVxdWlyZShcImZianMvbGliL0V2ZW50TGlzdGVuZXJcIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGlhPXJlcXVpcmUoXCJmYmpzL2xpYi9mb2N1c05vZGVcIiksRD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBFKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YWE/dm9pZCAwOkUoXCIyMjdcIik7XG52YXIgb2E9e2NoaWxkcmVuOiEwLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiEwLGRlZmF1bHRWYWx1ZTohMCxkZWZhdWx0Q2hlY2tlZDohMCxpbm5lckhUTUw6ITAsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiEwLHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzohMCxzdHlsZTohMH07ZnVuY3Rpb24gcGEoYSxiKXtyZXR1cm4oYSZiKT09PWJ9XG52YXIgdGE9e01VU1RfVVNFX1BST1BFUlRZOjEsSEFTX0JPT0xFQU5fVkFMVUU6NCxIQVNfTlVNRVJJQ19WQUxVRTo4LEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOjI0LEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6MzIsSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFOjY0LGluamVjdERPTVByb3BlcnR5Q29uZmlnOmZ1bmN0aW9uKGEpe3ZhciBiPXRhLGM9YS5Qcm9wZXJ0aWVzfHx7fSxkPWEuRE9NQXR0cmlidXRlTmFtZXNwYWNlc3x8e30sZT1hLkRPTUF0dHJpYnV0ZU5hbWVzfHx7fTthPWEuRE9NTXV0YXRpb25NZXRob2RzfHx7fTtmb3IodmFyIGYgaW4gYyl7dWEuaGFzT3duUHJvcGVydHkoZik/RShcIjQ4XCIsZik6dm9pZCAwO3ZhciBnPWYudG9Mb3dlckNhc2UoKSxoPWNbZl07Zz17YXR0cmlidXRlTmFtZTpnLGF0dHJpYnV0ZU5hbWVzcGFjZTpudWxsLHByb3BlcnR5TmFtZTpmLG11dGF0aW9uTWV0aG9kOm51bGwsbXVzdFVzZVByb3BlcnR5OnBhKGgsYi5NVVNUX1VTRV9QUk9QRVJUWSksXG5oYXNCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19CT09MRUFOX1ZBTFVFKSxoYXNOdW1lcmljVmFsdWU6cGEoaCxiLkhBU19OVU1FUklDX1ZBTFVFKSxoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTpwYShoLGIuSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpLGhhc1N0cmluZ0Jvb2xlYW5WYWx1ZTpwYShoLGIuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFKX07MT49Zy5oYXNCb29sZWFuVmFsdWUrZy5oYXNOdW1lcmljVmFsdWUrZy5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlP3ZvaWQgMDpFKFwiNTBcIixmKTtlLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lPWVbZl0pO2QuaGFzT3duUHJvcGVydHkoZikmJihnLmF0dHJpYnV0ZU5hbWVzcGFjZT1kW2ZdKTthLmhhc093blByb3BlcnR5KGYpJiYoZy5tdXRhdGlvbk1ldGhvZD1hW2ZdKTt1YVtmXT1nfX19LHVhPXt9O1xuZnVuY3Rpb24gdmEoYSxiKXtpZihvYS5oYXNPd25Qcm9wZXJ0eShhKXx8MjxhLmxlbmd0aCYmKFwib1wiPT09YVswXXx8XCJPXCI9PT1hWzBdKSYmKFwiblwiPT09YVsxXXx8XCJOXCI9PT1hWzFdKSlyZXR1cm4hMTtpZihudWxsPT09YilyZXR1cm4hMDtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJib29sZWFuXCI6cmV0dXJuIG9hLmhhc093blByb3BlcnR5KGEpP2E9ITA6KGI9d2EoYSkpP2E9Yi5oYXNCb29sZWFuVmFsdWV8fGIuaGFzU3RyaW5nQm9vbGVhblZhbHVlfHxiLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6KGE9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSksYT1cImRhdGEtXCI9PT1hfHxcImFyaWEtXCI9PT1hKSxhO2Nhc2UgXCJ1bmRlZmluZWRcIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJvYmplY3RcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB3YShhKXtyZXR1cm4gdWEuaGFzT3duUHJvcGVydHkoYSk/dWFbYV06bnVsbH1cbnZhciB4YT10YSx5YT14YS5NVVNUX1VTRV9QUk9QRVJUWSxLPXhhLkhBU19CT09MRUFOX1ZBTFVFLHphPXhhLkhBU19OVU1FUklDX1ZBTFVFLEFhPXhhLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLEJhPXhhLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsQ2E9eGEuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFLERhPXtQcm9wZXJ0aWVzOnthbGxvd0Z1bGxTY3JlZW46Syxhc3luYzpLLGF1dG9Gb2N1czpLLGF1dG9QbGF5OkssY2FwdHVyZTpCYSxjaGVja2VkOnlhfEssY29sczpBYSxjb250ZW50RWRpdGFibGU6Q2EsY29udHJvbHM6SyxcImRlZmF1bHRcIjpLLGRlZmVyOkssZGlzYWJsZWQ6Syxkb3dubG9hZDpCYSxkcmFnZ2FibGU6Q2EsZm9ybU5vVmFsaWRhdGU6SyxoaWRkZW46Syxsb29wOkssbXVsdGlwbGU6eWF8SyxtdXRlZDp5YXxLLG5vVmFsaWRhdGU6SyxvcGVuOksscGxheXNJbmxpbmU6SyxyZWFkT25seTpLLHJlcXVpcmVkOksscmV2ZXJzZWQ6Syxyb3dzOkFhLHJvd1NwYW46emEsXG5zY29wZWQ6SyxzZWFtbGVzczpLLHNlbGVjdGVkOnlhfEssc2l6ZTpBYSxzdGFydDp6YSxzcGFuOkFhLHNwZWxsQ2hlY2s6Q2Esc3R5bGU6MCx0YWJJbmRleDowLGl0ZW1TY29wZTpLLGFjY2VwdENoYXJzZXQ6MCxjbGFzc05hbWU6MCxodG1sRm9yOjAsaHR0cEVxdWl2OjAsdmFsdWU6Q2F9LERPTUF0dHJpYnV0ZU5hbWVzOnthY2NlcHRDaGFyc2V0OlwiYWNjZXB0LWNoYXJzZXRcIixjbGFzc05hbWU6XCJjbGFzc1wiLGh0bWxGb3I6XCJmb3JcIixodHRwRXF1aXY6XCJodHRwLWVxdWl2XCJ9LERPTU11dGF0aW9uTWV0aG9kczp7dmFsdWU6ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1iKXJldHVybiBhLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1wibnVtYmVyXCIhPT1hLnR5cGV8fCExPT09YS5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9hLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitiKTphLnZhbGlkaXR5JiYhYS52YWxpZGl0eS5iYWRJbnB1dCYmYS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hJiZcbmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK2IpfX19LEVhPXhhLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSxNPXt4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIn0sR2E9e1Byb3BlcnRpZXM6e2F1dG9SZXZlcnNlOkVhLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6RWEscHJlc2VydmVBbHBoYTpFYX0sRE9NQXR0cmlidXRlTmFtZXM6e2F1dG9SZXZlcnNlOlwiYXV0b1JldmVyc2VcIixleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOlwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCJ9LERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6e3hsaW5rQWN0dWF0ZTpNLnhsaW5rLHhsaW5rQXJjcm9sZTpNLnhsaW5rLHhsaW5rSHJlZjpNLnhsaW5rLHhsaW5rUm9sZTpNLnhsaW5rLHhsaW5rU2hvdzpNLnhsaW5rLHhsaW5rVGl0bGU6TS54bGluayx4bGlua1R5cGU6TS54bGluayxcbnhtbEJhc2U6TS54bWwseG1sTGFuZzpNLnhtbCx4bWxTcGFjZTpNLnhtbH19LEhhPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBJYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4LWhlaWdodCB4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZSB4bWw6YmFzZSB4bWxuczp4bGluayB4bWw6bGFuZyB4bWw6c3BhY2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoSGEsXG5JYSk7R2EuUHJvcGVydGllc1tiXT0wO0dhLkRPTUF0dHJpYnV0ZU5hbWVzW2JdPWF9KTt4YS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhEYSk7eGEuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoR2EpO1xudmFyIFA9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbmplY3Rpb246e2luamVjdEVycm9yVXRpbHM6ZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGEuaW52b2tlR3VhcmRlZENhbGxiYWNrP0UoXCIxOTdcIik6dm9pZCAwO0phPWEuaW52b2tlR3VhcmRlZENhbGxiYWNrfX0saW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtKYS5hcHBseShQLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7UC5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFAuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHE9UC5jbGVhckNhdWdodEVycm9yKCk7UC5faGFzUmV0aHJvd0Vycm9yfHwoUC5faGFzUmV0aHJvd0Vycm9yPSEwLFAuX3JldGhyb3dFcnJvcj1cbnEpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEthLmFwcGx5KFAsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gUC5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihQLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9UC5fY2F1Z2h0RXJyb3I7UC5fY2F1Z2h0RXJyb3I9bnVsbDtQLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1FKFwiMTk4XCIpfX07ZnVuY3Rpb24gSmEoYSxiLGMsZCxlLGYsZyxoLGspe1AuX2hhc0NhdWdodEVycm9yPSExO1AuX2NhdWdodEVycm9yPW51bGw7dmFyIHE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMscSl9Y2F0Y2godil7UC5fY2F1Z2h0RXJyb3I9dixQLl9oYXNDYXVnaHRFcnJvcj0hMH19XG5mdW5jdGlvbiBLYSgpe2lmKFAuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9UC5fcmV0aHJvd0Vycm9yO1AuX3JldGhyb3dFcnJvcj1udWxsO1AuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIExhPW51bGwsTWE9e307XG5mdW5jdGlvbiBOYSgpe2lmKExhKWZvcih2YXIgYSBpbiBNYSl7dmFyIGI9TWFbYV0sYz1MYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkUoXCI5NlwiLGEpO2lmKCFPYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpFKFwiOTdcIixhKTtPYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO1BhLmhhc093blByb3BlcnR5KGgpP0UoXCI5OVwiLGgpOnZvaWQgMDtQYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZRYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oUWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpFKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gUWEoYSxiLGMpe1JhW2FdP0UoXCIxMDBcIixhKTp2b2lkIDA7UmFbYV09YjtTYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBPYT1bXSxQYT17fSxSYT17fSxTYT17fTtmdW5jdGlvbiBUYShhKXtMYT9FKFwiMTAxXCIpOnZvaWQgMDtMYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtOYSgpfWZ1bmN0aW9uIFVhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO01hLmhhc093blByb3BlcnR5KGMpJiZNYVtjXT09PWR8fChNYVtjXT9FKFwiMTAyXCIsYyk6dm9pZCAwLE1hW2NdPWQsYj0hMCl9YiYmTmEoKX1cbnZhciBWYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOk9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpQYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpSYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOlNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOlRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpVYX0pLFdhPW51bGwsWGE9bnVsbCxZYT1udWxsO2Z1bmN0aW9uIFphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9WWEoZCk7UC5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uICRhKGEsYil7bnVsbD09Yj9FKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBhYihhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgYmI9bnVsbDtcbmZ1bmN0aW9uIGNiKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKVphKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmWmEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gZGIoYSl7cmV0dXJuIGNiKGEsITApfWZ1bmN0aW9uIGdiKGEpe3JldHVybiBjYihhLCExKX12YXIgaGI9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6VGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOlVhfTtcbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9V2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIGpiKGEsYixjLGQpe2Zvcih2YXIgZSxmPTA7ZjxPYS5sZW5ndGg7ZisrKXt2YXIgZz1PYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT0kYShlLGcpKX1yZXR1cm4gZX1mdW5jdGlvbiBrYihhKXthJiYoYmI9JGEoYmIsYSkpfWZ1bmN0aW9uIGxiKGEpe3ZhciBiPWJiO2JiPW51bGw7YiYmKGE/YWIoYixkYik6YWIoYixnYiksYmI/RShcIjk1XCIpOnZvaWQgMCxQLnJldGhyb3dDYXVnaHRFcnJvcigpKX12YXIgbWI9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOmhiLGdldExpc3RlbmVyOmliLGV4dHJhY3RFdmVudHM6amIsZW5xdWV1ZUV2ZW50czprYixwcm9jZXNzRXZlbnRRdWV1ZTpsYn0pLG5iPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIituYixvYj1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK25iO1xuZnVuY3Rpb24gcGIoYSl7aWYoYVtRXSlyZXR1cm4gYVtRXTtmb3IodmFyIGI9W107IWFbUV07KWlmKGIucHVzaChhKSxhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDt2YXIgYz12b2lkIDAsZD1hW1FdO2lmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXJldHVybiBkO2Zvcig7YSYmKGQ9YVtRXSk7YT1iLnBvcCgpKWM9ZDtyZXR1cm4gY31mdW5jdGlvbiBxYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RShcIjMzXCIpfWZ1bmN0aW9uIHJiKGEpe3JldHVybiBhW29iXXx8bnVsbH1cbnZhciBzYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbUV09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6cGIsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbUV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpxYixnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOnJiLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW29iXT1ifX0pO2Z1bmN0aW9uIHRiKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiB1YihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPXRiKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfVxuZnVuY3Rpb24gdmIoYSxiLGMpe2lmKGI9aWIoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz0kYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz0kYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiB3YihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZ1YihhLl90YXJnZXRJbnN0LHZiLGEpfWZ1bmN0aW9uIHhiKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP3RiKGIpOm51bGw7dWIoYix2YixhKX19XG5mdW5jdGlvbiB5YihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1pYihhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9JGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9JGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIHpiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmeWIoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIEFiKGEpe2FiKGEsd2IpfVxuZnVuY3Rpb24gQmIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPXRiKGgpKWcrKztoPTA7Zm9yKHZhciBrPWY7aztrPXRiKGspKWgrKztmb3IoOzA8Zy1oOyllPXRiKGUpLGctLTtmb3IoOzA8aC1nOylmPXRiKGYpLGgtLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPXRiKGUpO2Y9dGIoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPXRiKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9dGIoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKyl5YihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOyl5YihjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciBDYj1PYmplY3QuZnJlZXplKHthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOkFiLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe2FiKGEseGIpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6QmIsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7YWIoYSx6Yil9fSksRGI9bnVsbDtmdW5jdGlvbiBFYigpeyFEYiYmbC5jYW5Vc2VET00mJihEYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBEYn12YXIgUz17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtcbmZ1bmN0aW9uIEZiKCl7aWYoUy5fZmFsbGJhY2tUZXh0KXJldHVybiBTLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1TLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9R2IoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO1MuX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBTLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gR2IoKXtyZXR1cm5cInZhbHVlXCJpbiBTLl9yb290P1MuX3Jvb3QudmFsdWU6Uy5fcm9vdFtFYigpXX1cbnZhciBIYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLEliPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gVChhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Qy50aGF0UmV0dXJuc1RydWU6Qy50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxuQihULnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPUMudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PUMudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Qy50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPEhiLmxlbmd0aDthKyspdGhpc1tIYlthXV09bnVsbH19KTtULkludGVyZmFjZT1JYjtULmF1Z21lbnRDbGFzcz1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9dGhpcy5wcm90b3R5cGU7dmFyIGQ9bmV3IGM7QihkLGEucHJvdG90eXBlKTthLnByb3RvdHlwZT1kO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5JbnRlcmZhY2U9Qih7fSx0aGlzLkludGVyZmFjZSxiKTthLmF1Z21lbnRDbGFzcz10aGlzLmF1Z21lbnRDbGFzcztKYihhKX07SmIoVCk7ZnVuY3Rpb24gS2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBMYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RShcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gSmIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9S2I7YS5yZWxlYXNlPUxifWZ1bmN0aW9uIE1iKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhNYix7ZGF0YTpudWxsfSk7ZnVuY3Rpb24gTmIoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKE5iLHtkYXRhOm51bGx9KTt2YXIgUGI9WzksMTMsMjcsMzJdLFZiPWwuY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxXYj1udWxsO2wuY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihXYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBYYjtcbmlmKFhiPWwuY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhV2Ipe3ZhciBZYj13aW5kb3cub3BlcmE7WGI9IShcIm9iamVjdFwiPT09dHlwZW9mIFliJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgWWIudmVyc2lvbiYmMTI+PXBhcnNlSW50KFliLnZlcnNpb24oKSwxMCkpfVxudmFyIFpiPVhiLCRiPWwuY2FuVXNlRE9NJiYoIVZifHxXYiYmODxXYiYmMTE+PVdiKSxhYz1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxiYz17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxjYz0hMTtcbmZ1bmN0aW9uIGRjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09UGIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBlYyhhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBmYz0hMTtmdW5jdGlvbiBnYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gZWMoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2NjPSEwO3JldHVybiBhYztjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1hYyYmY2M/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gaGMoYSxiKXtpZihmYylyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhVmImJmRjKGEsYik/KGE9RmIoKSxTLl9yb290PW51bGwsUy5fc3RhcnRUZXh0PW51bGwsUy5fZmFsbGJhY2tUZXh0PW51bGwsZmM9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuICRiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGljPXtldmVudFR5cGVzOmJjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoVmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6dmFyIGY9YmMuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOmY9YmMuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjpmPWJjLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBmYz9kYyhhLGMpJiYoZj1iYy5jb21wb3NpdGlvbkVuZCk6XCJ0b3BLZXlEb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPWJjLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KCRiJiYoZmN8fGYhPT1iYy5jb21wb3NpdGlvblN0YXJ0P2Y9PT1iYy5jb21wb3NpdGlvbkVuZCYmZmMmJihlPUZiKCkpOihTLl9yb290PWQsUy5fc3RhcnRUZXh0PUdiKCksZmM9ITApKSxmPU1iLmdldFBvb2xlZChmLGIsYyxkKSxlP2YuZGF0YT1cbmU6KGU9ZWMoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLEFiKGYpLGU9Zik6ZT1udWxsOyhhPVpiP2djKGEsYyk6aGMoYSxjKSk/KGI9TmIuZ2V0UG9vbGVkKGJjLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxBYihiKSk6Yj1udWxsO3JldHVybltlLGJdfX0samM9bnVsbCxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYoYT1YYShhKSl7amMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBqYy5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpFKFwiMTk0XCIpO3ZhciBiPVdhKGEuc3RhdGVOb2RlKTtqYy5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19dmFyIG5jPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe2pjPWF9fTtmdW5jdGlvbiBvYyhhKXtrYz9sYz9sYy5wdXNoKGEpOmxjPVthXTprYz1hfVxuZnVuY3Rpb24gcGMoKXtpZihrYyl7dmFyIGE9a2MsYj1sYztsYz1rYz1udWxsO21jKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKyltYyhiW2FdKX19dmFyIHFjPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpuYyxlbnF1ZXVlU3RhdGVSZXN0b3JlOm9jLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOnBjfSk7ZnVuY3Rpb24gcmMoYSxiKXtyZXR1cm4gYShiKX12YXIgc2M9ITE7ZnVuY3Rpb24gdGMoYSxiKXtpZihzYylyZXR1cm4gcmMoYSxiKTtzYz0hMDt0cnl7cmV0dXJuIHJjKGEsYil9ZmluYWxseXtzYz0hMSxwYygpfX12YXIgdWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXVjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiB3YyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHhjO2wuY2FuVXNlRE9NJiYoeGM9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24mJmRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUmJiEwIT09ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcIlwiLFwiXCIpKTtcbmZ1bmN0aW9uIHljKGEsYil7aWYoIWwuY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2I9XCJvblwiK2E7dmFyIGM9YiBpbiBkb2N1bWVudDtjfHwoYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGMuc2V0QXR0cmlidXRlKGIsXCJyZXR1cm47XCIpLGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNbYl0pOyFjJiZ4YyYmXCJ3aGVlbFwiPT09YSYmKGM9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcIkV2ZW50cy53aGVlbFwiLFwiMy4wXCIpKTtyZXR1cm4gY31mdW5jdGlvbiB6YyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gQWMoYSl7dmFyIGI9emMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBCYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9QWMoYSkpfWZ1bmN0aW9uIENjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD16YyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBEYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtcbmZ1bmN0aW9uIEVjKGEsYixjKXthPVQuZ2V0UG9vbGVkKERjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7b2MoYyk7QWIoYSk7cmV0dXJuIGF9dmFyIEZjPW51bGwsR2M9bnVsbDtmdW5jdGlvbiBIYyhhKXtrYihhKTtsYighMSl9ZnVuY3Rpb24gSWMoYSl7dmFyIGI9cWIoYSk7aWYoQ2MoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSmMoYSxiKXtpZihcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgS2M9ITE7bC5jYW5Vc2VET00mJihLYz15YyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBMYygpe0ZjJiYoRmMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsTWMpLEdjPUZjPW51bGwpfWZ1bmN0aW9uIE1jKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZJYyhHYykmJihhPUVjKEdjLGEsd2MoYSkpLHRjKEhjLGEpKX1cbmZ1bmN0aW9uIE5jKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhMYygpLEZjPWIsR2M9YyxGYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixNYykpOlwidG9wQmx1clwiPT09YSYmTGMoKX1mdW5jdGlvbiBPYyhhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBJYyhHYyl9ZnVuY3Rpb24gUGMoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBJYyhiKX1mdW5jdGlvbiAkYyhhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBJYyhiKX1cbnZhciBhZD17ZXZlbnRUeXBlczpEYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOktjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9xYihiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUpjO2Vsc2UgaWYodmMoZSkpaWYoS2MpZz0kYztlbHNle2c9T2M7dmFyIGg9TmN9ZWxzZSBmPWUubm9kZU5hbWUsIWZ8fFwiaW5wdXRcIiE9PWYudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChnPVBjKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiBFYyhnLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmKGE9XCJcIitlLnZhbHVlLGUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikhPT1cbmEmJmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIixhKSl9fTtmdW5jdGlvbiBiZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoYmQse3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pO3ZhciBjZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gZGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1jZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGVkKCl7cmV0dXJuIGRkfWZ1bmN0aW9uIGZkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1cbmJkLmF1Z21lbnRDbGFzcyhmZCx7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTplZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KTtcbnZhciBnZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSxoZD17ZXZlbnRUeXBlczpnZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe2lmKFwidG9wTW91c2VPdmVyXCI9PT1hJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8XCJ0b3BNb3VzZU91dFwiIT09YSYmXCJ0b3BNb3VzZU92ZXJcIiE9PWEpcmV0dXJuIG51bGw7dmFyIGU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7XCJ0b3BNb3VzZU91dFwiPT09YT8oYT1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/cGIoYik6bnVsbCk6YT1udWxsO2lmKGE9PT1cbmIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOnFiKGEpO2U9bnVsbD09Yj9lOnFiKGIpO3ZhciBnPWZkLmdldFBvb2xlZChnZC5tb3VzZUxlYXZlLGEsYyxkKTtnLnR5cGU9XCJtb3VzZWxlYXZlXCI7Zy50YXJnZXQ9ZjtnLnJlbGF0ZWRUYXJnZXQ9ZTtjPWZkLmdldFBvb2xlZChnZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9ZjtCYihnLGMsYSxiKTtyZXR1cm5bZyxjXX19LGlkPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyO2Z1bmN0aW9uIGpkKGEpe2E9YS50eXBlO3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuZGlzcGxheU5hbWV8fGEubmFtZTpudWxsfVxuZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBsZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1rZChhKTohMX1mdW5jdGlvbiBtZChhKXsyIT09a2QoYSk/RShcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBuZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1rZChhKSwzPT09Yj9FKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIG1kKGUpLGE7aWYoZz09PWQpcmV0dXJuIG1kKGUpLGI7Zz1nLnNpYmxpbmd9RShcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDpFKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RShcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0UoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gb2QoYSl7YT1uZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHBkKGEpe2E9bmQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgcWQ9W107XG5mdW5jdGlvbiByZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1wYihjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLHNkKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCx3YyhhLm5hdGl2ZUV2ZW50KSl9dmFyIHRkPSEwLHNkPXZvaWQgMDtmdW5jdGlvbiB1ZChhKXt0ZD0hIWF9ZnVuY3Rpb24gVShhLGIsYyl7cmV0dXJuIGM/YmEubGlzdGVuKGMsYix2ZC5iaW5kKG51bGwsYSkpOm51bGx9ZnVuY3Rpb24gd2QoYSxiLGMpe3JldHVybiBjP2JhLmNhcHR1cmUoYyxiLHZkLmJpbmQobnVsbCxhKSk6bnVsbH1cbmZ1bmN0aW9uIHZkKGEsYil7aWYodGQpe3ZhciBjPXdjKGIpO2M9cGIoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1rZChjKXx8KGM9bnVsbCk7aWYocWQubGVuZ3RoKXt2YXIgZD1xZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXt0YyhyZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnFkLmxlbmd0aCYmcWQucHVzaChhKX19fVxudmFyIHhkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiB0ZH0sZ2V0IF9oYW5kbGVUb3BMZXZlbCgpe3JldHVybiBzZH0sc2V0SGFuZGxlVG9wTGV2ZWw6ZnVuY3Rpb24oYSl7c2Q9YX0sc2V0RW5hYmxlZDp1ZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGR9LHRyYXBCdWJibGVkRXZlbnQ6VSx0cmFwQ2FwdHVyZWRFdmVudDp3ZCxkaXNwYXRjaEV2ZW50OnZkfSk7ZnVuY3Rpb24geWQoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciB6ZD17YW5pbWF0aW9uZW5kOnlkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOnlkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6eWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6eWQoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxBZD17fSxCZD17fTtsLmNhblVzZURPTSYmKEJkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIHpkLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIHpkLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIHpkLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIHpkLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBDZChhKXtpZihBZFthXSlyZXR1cm4gQWRbYV07aWYoIXpkW2FdKXJldHVybiBhO3ZhciBiPXpkW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEJkKXJldHVybiBBZFthXT1iW2NdO3JldHVyblwiXCJ9XG52YXIgRGQ9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BBbmltYXRpb25FbmQ6Q2QoXCJhbmltYXRpb25lbmRcIil8fFwiYW5pbWF0aW9uZW5kXCIsdG9wQW5pbWF0aW9uSXRlcmF0aW9uOkNkKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpfHxcImFuaW1hdGlvbml0ZXJhdGlvblwiLHRvcEFuaW1hdGlvblN0YXJ0OkNkKFwiYW5pbWF0aW9uc3RhcnRcIil8fFwiYW5pbWF0aW9uc3RhcnRcIix0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLFxudG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsdG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLFxudG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOkNkKFwidHJhbnNpdGlvbmVuZFwiKXx8XCJ0cmFuc2l0aW9uZW5kXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIix0b3BXaGVlbDpcIndoZWVsXCJ9LEVkPXt9LEZkPTAsR2Q9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIEhkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEdkKXx8KGFbR2RdPUZkKyssRWRbYVtHZF1dPXt9KTtyZXR1cm4gRWRbYVtHZF1dfWZ1bmN0aW9uIElkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpkKGEsYil7dmFyIGM9SWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SWQoYyl9fWZ1bmN0aW9uIEtkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBMZD1sLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLE1kPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sTmQ9bnVsbCxPZD1udWxsLFBkPW51bGwsUWQ9ITE7XG5mdW5jdGlvbiBSZChhLGIpe2lmKFFkfHxudWxsPT1OZHx8TmQhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPU5kO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJktkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gUGQmJmVhKFBkLGMpP251bGw6KFBkPWMsYT1ULmdldFBvb2xlZChNZC5zZWxlY3QsT2QsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1OZCxBYihhKSxhKX1cbnZhciBTZD17ZXZlbnRUeXBlczpNZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1IZChlKTtmPVNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/cWIoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwidG9wRm9jdXNcIjppZih2YyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlOZD1lLE9kPWIsUGQ9bnVsbDticmVhaztjYXNlIFwidG9wQmx1clwiOlBkPU9kPU5kPW51bGw7YnJlYWs7Y2FzZSBcInRvcE1vdXNlRG93blwiOlFkPSEwO2JyZWFrO2Nhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIFFkPSExLFJkKGMsZCk7Y2FzZSBcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKExkKWJyZWFrO1xuY2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gUmQoYyxkKX1yZXR1cm4gbnVsbH19O2Z1bmN0aW9uIFRkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhUZCx7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSk7ZnVuY3Rpb24gVWQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKFVkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSk7ZnVuY3Rpb24gVmQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWJkLmF1Z21lbnRDbGFzcyhWZCx7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBXZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBYZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sWWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9O2Z1bmN0aW9uIFpkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1cbmJkLmF1Z21lbnRDbGFzcyhaZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1YZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1XZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/WWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmVkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9XZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP1dkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSk7ZnVuY3Rpb24gJGQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWZkLmF1Z21lbnRDbGFzcygkZCx7ZGF0YVRyYW5zZmVyOm51bGx9KTtmdW5jdGlvbiBhZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9YmQuYXVnbWVudENsYXNzKGFlLHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWR9KTtmdW5jdGlvbiBiZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoYmUse3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSk7XG5mdW5jdGlvbiBjZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9ZmQuYXVnbWVudENsYXNzKGNlLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pO3ZhciBkZT17fSxlZT17fTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBibHVyIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgc2Nyb2xsIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hNb3ZlIHRvdWNoU3RhcnQgdHJhbnNpdGlvbkVuZCB2b2x1bWVDaGFuZ2Ugd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKStcbmEuc2xpY2UoMSksYz1cIm9uXCIrYjtiPVwidG9wXCIrYjtjPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpjLGNhcHR1cmVkOmMrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbYl19O2RlW2FdPWM7ZWVbYl09Y30pO1xudmFyIGZlPXtldmVudFR5cGVzOmRlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZWVbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1XZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9WmQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPVZkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9ZmQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1cbiRkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9YWU7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPVRkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1iZTticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1iZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPWNlO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9VWQ7YnJlYWs7ZGVmYXVsdDphPVR9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtBYihiKTtyZXR1cm4gYn19O3NkPWZ1bmN0aW9uKGEsYixjLGQpe2E9amIoYSxiLGMsZCk7a2IoYSk7bGIoITEpfTtoYi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO1xuV2E9c2IuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTtYYT1zYi5nZXRJbnN0YW5jZUZyb21Ob2RlO1lhPXNiLmdldE5vZGVGcm9tSW5zdGFuY2U7aGIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpmZSxFbnRlckxlYXZlRXZlbnRQbHVnaW46aGQsQ2hhbmdlRXZlbnRQbHVnaW46YWQsU2VsZWN0RXZlbnRQbHVnaW46U2QsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjppY30pO3ZhciBnZT1bXSxoZT0tMTtmdW5jdGlvbiBWKGEpezA+aGV8fChhLmN1cnJlbnQ9Z2VbaGVdLGdlW2hlXT1udWxsLGhlLS0pfWZ1bmN0aW9uIFcoYSxiKXtoZSsrO2dlW2hlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9bmV3IFNldDt2YXIgaWU9e2N1cnJlbnQ6RH0sWD17Y3VycmVudDohMX0samU9RDtmdW5jdGlvbiBrZShhKXtyZXR1cm4gbGUoYSk/amU6aWUuY3VycmVudH1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gRDt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBsZShhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gbmUoYSl7bGUoYSkmJihWKFgsYSksVihpZSxhKSl9XG5mdW5jdGlvbiBvZShhLGIsYyl7bnVsbCE9aWUuY3Vyc29yP0UoXCIxNjhcIik6dm9pZCAwO1coaWUsYixhKTtXKFgsYyxhKX1mdW5jdGlvbiBwZShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpFKFwiMTA4XCIsamQoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBCKHt9LGIsYyl9ZnVuY3Rpb24gcWUoYSl7aWYoIWxlKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8RDtqZT1pZS5jdXJyZW50O1coaWUsYixhKTtXKFgsWC5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gcmUoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpFKFwiMTY5XCIpO2lmKGIpe3ZhciBkPXBlKGEsamUpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZDtWKFgsYSk7VihpZSxhKTtXKGllLGQsYSl9ZWxzZSBWKFgsYSk7VyhYLGIsYSl9XG5mdW5jdGlvbiBZKGEsYixjKXt0aGlzLnRhZz1hO3RoaXMua2V5PWI7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9dGhpcy5wZW5kaW5nUHJvcHM9dGhpcy5yZWY9bnVsbDt0aGlzLmludGVybmFsQ29udGV4dFRhZz1jO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiBzZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IFkoYS50YWcsYS5rZXksYS5pbnRlcm5hbENvbnRleHRUYWcpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLnBlbmRpbmdQcm9wcz1iO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gdGUoYSxiLGMpe3ZhciBkPXZvaWQgMCxlPWEudHlwZSxmPWEua2V5O1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlPyhkPWUucHJvdG90eXBlJiZlLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50P25ldyBZKDIsZixiKTpuZXcgWSgwLGYsYiksZC50eXBlPWUsZC5wZW5kaW5nUHJvcHM9YS5wcm9wcyk6XCJzdHJpbmdcIj09PXR5cGVvZiBlPyhkPW5ldyBZKDUsZixiKSxkLnR5cGU9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcIm51bWJlclwiPT09dHlwZW9mIGUudGFnPyhkPWUsZC5wZW5kaW5nUHJvcHM9YS5wcm9wcyk6RShcIjEzMFwiLG51bGw9PWU/ZTp0eXBlb2YgZSxcIlwiKTtkLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGR9ZnVuY3Rpb24gdWUoYSxiLGMsZCl7Yj1uZXcgWSgxMCxkLGIpO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifVxuZnVuY3Rpb24gdmUoYSxiLGMpe2I9bmV3IFkoNixudWxsLGIpO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIHdlKGEsYixjKXtiPW5ldyBZKDcsYS5rZXksYik7Yi50eXBlPWEuaGFuZGxlcjtiLnBlbmRpbmdQcm9wcz1hO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiB4ZShhLGIsYyl7YT1uZXcgWSg5LG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHllKGEsYixjKXtiPW5ldyBZKDQsYS5rZXksYik7Yi5wZW5kaW5nUHJvcHM9YS5jaGlsZHJlbnx8W107Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn12YXIgemU9bnVsbCxBZT1udWxsO1xuZnVuY3Rpb24gQmUoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBDZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTt6ZT1CZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7QWU9QmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBEZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgemUmJnplKGEpfWZ1bmN0aW9uIEVlKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBBZSYmQWUoYSl9XG5mdW5jdGlvbiBGZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExfX1mdW5jdGlvbiBHZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9XG5mdW5jdGlvbiBIZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1GZShudWxsKSk7bnVsbCE9PWM/KGE9Yy51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yy51cGRhdGVRdWV1ZT1GZShudWxsKSkpOmE9bnVsbDthPWEhPT1kP2E6bnVsbDtudWxsPT09YT9HZShkLGIpOm51bGw9PT1kLmxhc3R8fG51bGw9PT1hLmxhc3Q/KEdlKGQsYiksR2UoYSxiKSk6KEdlKGQsYiksYS5sYXN0PWIpfWZ1bmN0aW9uIEllKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gSmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGc9ITAsaD1jLmZpcnN0LGs9ITE7bnVsbCE9PWg7KXt2YXIgcT1oLmV4cGlyYXRpb25UaW1lO2lmKHE+Zil7dmFyIHY9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09dnx8dj5xKWMuZXhwaXJhdGlvblRpbWU9cTtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fChjLmZpcnN0PWgubmV4dCxudWxsPT09XG5jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihoLmlzUmVwbGFjZSlhPUllKGgsZCxhLGUpLGc9ITA7ZWxzZSBpZihxPUllKGgsZCxhLGUpKWE9Zz9CKHt9LGEscSk6QihhLHEpLGc9ITE7aC5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1oLmNhbGxiYWNrJiYocT1jLmNhbGxiYWNrTGlzdCxudWxsPT09cSYmKHE9Yy5jYWxsYmFja0xpc3Q9W10pLHEucHVzaChoKSl9aD1oLm5leHR9bnVsbCE9PWMuY2FsbGJhY2tMaXN0P2IuZWZmZWN0VGFnfD0zMjpudWxsIT09Yy5maXJzdHx8Yy5oYXNGb3JjZVVwZGF0ZXx8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9FKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBMZShhLGIsYyxkKXtmdW5jdGlvbiBlKGEsYil7Yi51cGRhdGVyPWY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX12YXIgZj17aXNNb3VudGVkOmxkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihjLGQsZSl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZz1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmcscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7YShjLGcpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGMsZCxlKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBnPWIoYyk7SGUoYyx7ZXhwaXJhdGlvblRpbWU6ZyxwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTtcbmEoYyxnKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGMsZCl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZT1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6ZCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7YShjLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTplLGNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1rZShhKSxmPTI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNvbnRleHRUeXBlcyxnPWY/bWUoYSxkKTpEO2I9bmV3IGMoYixnKTtlKGEsYik7ZiYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWQsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1nKTtyZXR1cm4gYn0sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsXG5iKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuc3RhdGVOb2RlLGU9ZC5zdGF0ZXx8bnVsbCxnPWEucGVuZGluZ1Byb3BzO2c/dm9pZCAwOkUoXCIxNThcIik7dmFyIGg9a2UoYSk7ZC5wcm9wcz1nO2Quc3RhdGU9YS5tZW1vaXplZFN0YXRlPWU7ZC5yZWZzPUQ7ZC5jb250ZXh0PW1lKGEsaCk7bnVsbCE9YS50eXBlJiZudWxsIT1hLnR5cGUucHJvdG90eXBlJiYhMD09PWEudHlwZS5wcm90b3R5cGUudW5zdGFibGVfaXNBc3luY1JlYWN0Q29tcG9uZW50JiYoYS5pbnRlcm5hbENvbnRleHRUYWd8PTEpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmKGU9ZC5zdGF0ZSxkLmNvbXBvbmVudFdpbGxNb3VudCgpLGUhPT1kLnN0YXRlJiZmLmVucXVldWVSZXBsYWNlU3RhdGUoZCxkLnN0YXRlLG51bGwpLGU9YS51cGRhdGVRdWV1ZSxudWxsIT09ZSYmKGQuc3RhdGU9SmUoYyxhLGUsZCxnLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KX0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsZSl7dmFyIGc9Yi5zdGF0ZU5vZGU7Zy5wcm9wcz1iLm1lbW9pemVkUHJvcHM7Zy5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHM7a3x8KGs9aCxudWxsPT1rP0UoXCIxNTlcIik6dm9pZCAwKTt2YXIgdT1nLmNvbnRleHQsej1rZShiKTt6PW1lKGIseik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8aD09PWsmJnU9PT16fHwodT1nLnN0YXRlLGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhrLHopLGcuc3RhdGUhPT11JiZmLmVucXVldWVSZXBsYWNlU3RhdGUoZyxnLnN0YXRlLG51bGwpKTt1PWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP0plKGEsYixiLnVwZGF0ZVF1ZXVlLGcsayxlKTp1O2lmKCEoaCE9PWt8fHUhPT1lfHxYLmN1cnJlbnR8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSwhMTt2YXIgRz1rO2lmKG51bGw9PT1ofHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlHPSEwO2Vsc2V7dmFyIEk9Yi5zdGF0ZU5vZGUsTD1iLnR5cGU7Rz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgSS5zaG91bGRDb21wb25lbnRVcGRhdGU/SS5zaG91bGRDb21wb25lbnRVcGRhdGUoRyxlLHopOkwucHJvdG90eXBlJiZMLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoaCxHKXx8IWVhKHUsZSk6ITB9Rz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGssZSx6KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxjKGIsayksZChiLGUpKTtnLnByb3BzPWs7Zy5zdGF0ZT1lO2cuY29udGV4dD16O3JldHVybiBHfX19dmFyIFFlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxSZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFNlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQsVGU9UWU/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LFVlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixWZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxXZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBYZShhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9V2UmJmFbV2VdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIFllPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBaZShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGwhPT1jJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl7aWYoYi5fb3duZXIpe2I9Yi5fb3duZXI7dmFyIGQ9dm9pZCAwO2ImJigyIT09Yi50YWc/RShcIjExMFwiKTp2b2lkIDAsZD1iLnN0YXRlTm9kZSk7ZD92b2lkIDA6RShcIjE0N1wiLGMpO3ZhciBlPVwiXCIrYztpZihudWxsIT09YSYmbnVsbCE9PWEucmVmJiZhLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYS5yZWY7YT1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1EP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTthLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYX1cInN0cmluZ1wiIT09dHlwZW9mIGM/RShcIjE0OFwiKTp2b2lkIDA7Yi5fb3duZXI/dm9pZCAwOkUoXCIxNDlcIixjKX1yZXR1cm4gY31cbmZ1bmN0aW9uICRlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZFKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBhZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXNlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9dmUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9WmUoYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPXRlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCk7ZC5yZWY9WmUoYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gcShhLGIsYyxkKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPXdlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtcbmJbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw5IT09Yi50YWcpcmV0dXJuIGI9eGUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiLnR5cGU9Yy52YWx1ZSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixudWxsLGQpO2IudHlwZT1jLnZhbHVlO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB5KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj15ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9dWUoYyxhLmludGVybmFsQ29udGV4dFRhZyxcbmQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dmUoXCJcIitiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFJlOmlmKGIudHlwZT09PVZlKXJldHVybiBiPXVlKGIucHJvcHMuY2hpbGRyZW4sYS5pbnRlcm5hbENvbnRleHRUYWcsYyxiLmtleSksYltcInJldHVyblwiXT1hLGI7Yz10ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpO2MucmVmPVplKG51bGwsYik7Y1tcInJldHVyblwiXT1hO3JldHVybiBjO2Nhc2UgU2U6cmV0dXJuIGI9d2UoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYjtjYXNlIFRlOnJldHVybiBjPXhlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5jKSxjLnR5cGU9Yi52YWx1ZSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIFVlOnJldHVybiBiPXllKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGJ9aWYoWWUoYil8fFhlKGIpKXJldHVybiBiPXVlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjskZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIEcoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgUmU6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1WZT91KGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgU2U6cmV0dXJuIGMua2V5PT09ZT9xKGEsYixjLGQpOm51bGw7Y2FzZSBUZTpyZXR1cm4gbnVsbD09PVxuZT92KGEsYixjLGQpOm51bGw7Y2FzZSBVZTpyZXR1cm4gYy5rZXk9PT1lP3koYSxiLGMsZCk6bnVsbH1pZihZZShjKXx8WGUoYykpcmV0dXJuIG51bGwhPT1lP251bGw6dShhLGIsYyxkLG51bGwpOyRlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBSZTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09VmU/dShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgU2U6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHEoYixhLGQsZSk7Y2FzZSBUZTpyZXR1cm4gYT1hLmdldChjKXx8bnVsbCx2KGIsYSxkLGUpO2Nhc2UgVWU6cmV0dXJuIGE9XG5hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwseShiLGEsZCxlKX1pZihZZShkKXx8WGUoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsdShiLGEsZCxlLG51bGwpOyRlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChlLGcsbSxBKXtmb3IodmFyIGg9bnVsbCxyPW51bGwsbj1nLHc9Zz0wLGs9bnVsbDtudWxsIT09biYmdzxtLmxlbmd0aDt3Kyspe24uaW5kZXg+dz8oaz1uLG49bnVsbCk6az1uLnNpYmxpbmc7dmFyIHg9RyhlLG4sbVt3XSxBKTtpZihudWxsPT09eCl7bnVsbD09PW4mJihuPWspO2JyZWFrfWEmJm4mJm51bGw9PT14LmFsdGVybmF0ZSYmYihlLG4pO2c9Zih4LGcsdyk7bnVsbD09PXI/aD14OnIuc2libGluZz14O3I9eDtuPWt9aWYodz09PW0ubGVuZ3RoKXJldHVybiBjKGUsbiksaDtpZihudWxsPT09bil7Zm9yKDt3PG0ubGVuZ3RoO3crKylpZihuPXooZSxtW3ddLEEpKWc9ZihuLGcsdyksbnVsbD09PXI/aD1uOnIuc2libGluZz1uLHI9bjtyZXR1cm4gaH1mb3Iobj1cbmQoZSxuKTt3PG0ubGVuZ3RoO3crKylpZihrPUkobixlLHcsbVt3XSxBKSl7aWYoYSYmbnVsbCE9PWsuYWx0ZXJuYXRlKW5bXCJkZWxldGVcIl0obnVsbD09PWsua2V5P3c6ay5rZXkpO2c9ZihrLGcsdyk7bnVsbD09PXI/aD1rOnIuc2libGluZz1rO3I9a31hJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBofWZ1bmN0aW9uIE4oZSxnLG0sQSl7dmFyIGg9WGUobSk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGg/RShcIjE1MFwiKTp2b2lkIDA7bT1oLmNhbGwobSk7bnVsbD09bT9FKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIHI9aD1udWxsLG49Zyx3PWc9MCxrPW51bGwseD1tLm5leHQoKTtudWxsIT09biYmIXguZG9uZTt3KysseD1tLm5leHQoKSl7bi5pbmRleD53PyhrPW4sbj1udWxsKTprPW4uc2libGluZzt2YXIgSj1HKGUsbix4LnZhbHVlLEEpO2lmKG51bGw9PT1KKXtufHwobj1rKTticmVha31hJiZuJiZudWxsPT09Si5hbHRlcm5hdGUmJmIoZSxuKTtnPWYoSixcbmcsdyk7bnVsbD09PXI/aD1KOnIuc2libGluZz1KO3I9SjtuPWt9aWYoeC5kb25lKXJldHVybiBjKGUsbiksaDtpZihudWxsPT09bil7Zm9yKDsheC5kb25lO3crKyx4PW0ubmV4dCgpKXg9eihlLHgudmFsdWUsQSksbnVsbCE9PXgmJihnPWYoeCxnLHcpLG51bGw9PT1yP2g9eDpyLnNpYmxpbmc9eCxyPXgpO3JldHVybiBofWZvcihuPWQoZSxuKTsheC5kb25lO3crKyx4PW0ubmV4dCgpKWlmKHg9SShuLGUsdyx4LnZhbHVlLEEpLG51bGwhPT14KXtpZihhJiZudWxsIT09eC5hbHRlcm5hdGUpbltcImRlbGV0ZVwiXShudWxsPT09eC5rZXk/dzp4LmtleSk7Zz1mKHgsZyx3KTtudWxsPT09cj9oPXg6ci5zaWJsaW5nPXg7cj14fWEmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGh9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVZlJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO1xudmFyIG09XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihtKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFJlOmE6e3ZhciByPWYua2V5O2ZvcihtPWQ7bnVsbCE9PW07KXtpZihtLmtleT09PXIpaWYoMTA9PT1tLnRhZz9mLnR5cGU9PT1WZTptLnR5cGU9PT1mLnR5cGUpe2MoYSxtLnNpYmxpbmcpO2Q9ZShtLGYudHlwZT09PVZlP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1aZShtLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxtKTticmVha31lbHNlIGIoYSxtKTttPW0uc2libGluZ31mLnR5cGU9PT1WZT8oZD11ZShmLnByb3BzLmNoaWxkcmVuLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihoPXRlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCksaC5yZWY9WmUoZCxmKSxoW1wicmV0dXJuXCJdPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIFNlOmE6e2ZvcihtPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1cbm0paWYoNz09PWQudGFnKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLGgpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXdlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIFRlOmE6e2lmKG51bGwhPT1kKWlmKDk9PT1kLnRhZyl7YyhhLGQuc2libGluZyk7ZD1lKGQsbnVsbCxoKTtkLnR5cGU9Zi52YWx1ZTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZSBjKGEsZCk7ZD14ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpO2QudHlwZT1mLnZhbHVlO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBVZTphOntmb3IobT1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09bSlpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09XG5mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD15ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCkpOihjKGEsZCksZD12ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpKSxkW1wicmV0dXJuXCJdPWEsYT1kLGcoYSk7aWYoWWUoZikpcmV0dXJuIEwoYSxkLGYsaCk7aWYoWGUoZikpcmV0dXJuIE4oYSxkLGYsaCk7bSYmJGUoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmg9YS50eXBlLEUoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxcbmgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIGJmPWFmKCEwKSxjZj1hZighMSk7XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7Yi5jaGlsZD1udWxsPT09YT9jZihiLG51bGwsYyxkKTpiZihiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnKGEsYil7dmFyIGM9Yi5yZWY7bnVsbD09PWN8fGEmJmEucmVmPT09Y3x8KGIuZWZmZWN0VGFnfD0xMjgpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7ZyhhLGIpO2lmKCFjKXJldHVybiBkJiZyZShiLCExKSxxKGEsYik7Yz1iLnN0YXRlTm9kZTtpZC5jdXJyZW50PWI7dmFyIGU9Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtmKGEsYixlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZyZShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBrKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/b2UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmb2UoYSxcbmIuY29udGV4dCwhMSk7SShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24gcShhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9FKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXNlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9c2UoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gdihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmsoYik7YnJlYWs7Y2FzZSAyOnFlKGIpO2JyZWFrO2Nhc2UgNDpJKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyl9cmV0dXJuIG51bGx9dmFyIHk9YS5zaG91bGRTZXRUZXh0Q29udGVudCx1PWEudXNlU3luY1NjaGVkdWxpbmcsej1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUsXG5HPWIucHVzaEhvc3RDb250ZXh0LEk9Yi5wdXNoSG9zdENvbnRhaW5lcixMPWMuZW50ZXJIeWRyYXRpb25TdGF0ZSxOPWMucmVzZXRIeWRyYXRpb25TdGF0ZSxKPWMudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7YT1MZShkLGUsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciB3PWEuYWRvcHRDbGFzc0luc3RhbmNlLG09YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLEE9YS5tb3VudENsYXNzSW5zdGFuY2UsT2I9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHYoYSxiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9FKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxyPWtlKGIpO3I9bWUoYixyKTtkPWQoZSxyKTtiLmVmZmVjdFRhZ3w9XG4xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlcj8oYi50YWc9MixlPXFlKGIpLHcoYixkKSxBKGIsYyksYj1oKGEsYiwhMCxlKSk6KGIudGFnPTEsZihhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE6YTp7ZT1iLnR5cGU7Yz1iLnBlbmRpbmdQcm9wcztkPWIubWVtb2l6ZWRQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWMmJihjPWQpO2Vsc2UgaWYobnVsbD09PWN8fGQ9PT1jKXtiPXEoYSxiKTticmVhayBhfWQ9a2UoYik7ZD1tZShiLGQpO2U9ZShjLGQpO2IuZWZmZWN0VGFnfD0xO2YoYSxiLGUpO2IubWVtb2l6ZWRQcm9wcz1jO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDI6cmV0dXJuIGU9cWUoYiksZD12b2lkIDAsbnVsbD09PWE/Yi5zdGF0ZU5vZGU/RShcIjE1M1wiKToobShiLGIucGVuZGluZ1Byb3BzKSxBKGIsYyksZD0hMCk6ZD1PYihhLGIsYyksaChhLGIsZCxlKTtjYXNlIDM6cmV0dXJuIGsoYiksXG5lPWIudXBkYXRlUXVldWUsbnVsbCE9PWU/KGQ9Yi5tZW1vaXplZFN0YXRlLGU9SmUoYSxiLGUsbnVsbCxudWxsLGMpLGQ9PT1lPyhOKCksYj1xKGEsYikpOihkPWUuZWxlbWVudCxyPWIuc3RhdGVOb2RlLChudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZyLmh5ZHJhdGUmJkwoYik/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9Y2YoYixudWxsLGQsYykpOihOKCksZihhLGIsZCkpLGIubWVtb2l6ZWRTdGF0ZT1lLGI9Yi5jaGlsZCkpOihOKCksYj1xKGEsYikpLGI7Y2FzZSA1OkcoYik7bnVsbD09PWEmJkooYik7ZT1iLnR5cGU7dmFyIG49Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7bnVsbD09PWQmJihkPW4sbnVsbD09PWQ/RShcIjE1NFwiKTp2b2lkIDApO3I9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7WC5jdXJyZW50fHxudWxsIT09ZCYmbiE9PWQ/KG49ZC5jaGlsZHJlbix5KGUsZCk/bj1udWxsOnImJnkoZSxyKSYmKGIuZWZmZWN0VGFnfD0xNiksZyhhLGIpLFxuMjE0NzQ4MzY0NyE9PWMmJiF1JiZ6KGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9MjE0NzQ4MzY0NyxiPW51bGwpOihmKGEsYixuKSxiLm1lbW9pemVkUHJvcHM9ZCxiPWIuY2hpbGQpKTpiPXEoYSxiKTtyZXR1cm4gYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZKKGIpLGE9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWEmJihhPWIubWVtb2l6ZWRQcm9wcyksYi5tZW1vaXplZFByb3BzPWEsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6ZT1iLnBlbmRpbmdQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWUmJihlPWEmJmEubWVtb2l6ZWRQcm9wcyxudWxsPT09ZT9FKFwiMTU0XCIpOnZvaWQgMCk7ZWxzZSBpZihudWxsPT09ZXx8Yi5tZW1vaXplZFByb3BzPT09ZSllPWIubWVtb2l6ZWRQcm9wcztkPWUuY2hpbGRyZW47Yi5zdGF0ZU5vZGU9bnVsbD09PWE/Y2YoYixiLnN0YXRlTm9kZSxkLGMpOmJmKGIsYi5zdGF0ZU5vZGUsZCxjKTtiLm1lbW9pemVkUHJvcHM9ZTtyZXR1cm4gYi5zdGF0ZU5vZGU7XG5jYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OmE6e0koYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtlPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09ZSYmKGU9YSYmYS5tZW1vaXplZFByb3BzLG51bGw9PWU/RShcIjE1NFwiKTp2b2lkIDApO2Vsc2UgaWYobnVsbD09PWV8fGIubWVtb2l6ZWRQcm9wcz09PWUpe2I9cShhLGIpO2JyZWFrIGF9bnVsbD09PWE/Yi5jaGlsZD1iZihiLG51bGwsZSxjKTpmKGEsYixlKTtiLm1lbW9pemVkUHJvcHM9ZTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAxMDphOntjPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9Yi5tZW1vaXplZFByb3BzKTtlbHNlIGlmKG51bGw9PT1jfHxiLm1lbW9pemVkUHJvcHM9PT1jKXtiPXEoYSxiKTticmVhayBhfWYoYSxiLGMpO2IubWVtb2l6ZWRQcm9wcz1jO2I9Yi5jaGlsZH1yZXR1cm4gYjtkZWZhdWx0OkUoXCIxNTZcIil9fSxiZWdpbkZhaWxlZFdvcms6ZnVuY3Rpb24oYSxiLFxuYyl7c3dpdGNoKGIudGFnKXtjYXNlIDI6cWUoYik7YnJlYWs7Y2FzZSAzOmsoYik7YnJlYWs7ZGVmYXVsdDpFKFwiMTU3XCIpfWIuZWZmZWN0VGFnfD02NDtudWxsPT09YT9iLmNoaWxkPW51bGw6Yi5jaGlsZCE9PWEuY2hpbGQmJihiLmNoaWxkPWEuY2hpbGQpO2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHYoYSxiKTtiLmZpcnN0RWZmZWN0PW51bGw7Yi5sYXN0RWZmZWN0PW51bGw7Yi5jaGlsZD1udWxsPT09YT9jZihiLG51bGwsbnVsbCxjKTpiZihiLGEuY2hpbGQsbnVsbCxjKTsyPT09Yi50YWcmJihhPWIuc3RhdGVOb2RlLGIubWVtb2l6ZWRQcm9wcz1hLnByb3BzLGIubWVtb2l6ZWRTdGF0ZT1hLnN0YXRlKTtyZXR1cm4gYi5jaGlsZH19fVxuZnVuY3Rpb24gZWYoYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGU9YS5jcmVhdGVJbnN0YW5jZSxmPWEuY3JlYXRlVGV4dEluc3RhbmNlLGc9YS5hcHBlbmRJbml0aWFsQ2hpbGQsaD1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGs9YS5wcmVwYXJlVXBkYXRlLHE9YS5wZXJzaXN0ZW5jZSx2PWIuZ2V0Um9vdEhvc3RDb250YWluZXIseT1iLnBvcEhvc3RDb250ZXh0LHU9Yi5nZXRIb3N0Q29udGV4dCx6PWIucG9wSG9zdENvbnRhaW5lcixHPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxJPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsTD1jLnBvcEh5ZHJhdGlvblN0YXRlLE49dm9pZCAwLEo9dm9pZCAwLHc9dm9pZCAwO2EubXV0YXRpb24/KE49ZnVuY3Rpb24oKXt9LEo9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZkKGIpfSx3PWZ1bmN0aW9uKGEsYixjLGUpe2MhPT1lJiZkKGIpfSk6cT9FKFwiMjM1XCIpOkUoXCIyMzZcIik7XG5yZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgbT1iLnBlbmRpbmdQcm9wcztpZihudWxsPT09bSltPWIubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDIxNDc0ODM2NDchPT1iLmV4cGlyYXRpb25UaW1lfHwyMTQ3NDgzNjQ3PT09YyliLnBlbmRpbmdQcm9wcz1udWxsO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbmUoYiksbnVsbDtjYXNlIDM6eihiKTtWKFgsYik7VihpZSxiKTttPWIuc3RhdGVOb2RlO20ucGVuZGluZ0NvbnRleHQmJihtLmNvbnRleHQ9bS5wZW5kaW5nQ29udGV4dCxtLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClMKGIpLGIuZWZmZWN0VGFnJj0tMztOKGIpO3JldHVybiBudWxsO2Nhc2UgNTp5KGIpO2M9digpO3ZhciBBPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxxPWIuc3RhdGVOb2RlLHg9dSgpO3E9XG5rKHEsQSxwLG0sYyx4KTtKKGEsYixxLEEscCxtLGMpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFtKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXUoKTtpZihMKGIpKUcoYixjLGEpJiZkKGIpO2Vsc2V7YT1lKEEsbSxjLGEsYik7YTpmb3IocD1iLmNoaWxkO251bGwhPT1wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWcpZyhhLHAuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1wLnRhZyYmbnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9aWYocD09PWIpYnJlYWs7Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfWgoYSxBLG0sYykmJmQoYik7Yi5zdGF0ZU5vZGU9YX1udWxsIT09Yi5yZWYmJlxuKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl3KGEsYixhLm1lbW9pemVkUHJvcHMsbSk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIG0pcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9FKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9digpO2M9dSgpO0woYik/SShiKSYmZChiKTpiLnN0YXRlTm9kZT1mKG0sYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzoobT1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpFKFwiMTY1XCIpO2IudGFnPTg7QT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylFKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKUEucHVzaChwLnR5cGUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PVxucFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1tLmhhbmRsZXI7bT1wKG0ucHJvcHMsQSk7Yi5jaGlsZD1iZihiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxtLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4geihiKSxOKGIpLG51bGw7Y2FzZSAwOkUoXCIxNjdcIik7ZGVmYXVsdDpFKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gZmYoYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKXRyeXtjKG51bGwpfWNhdGNoKEEpe2IoYSxBKX19ZnVuY3Rpb24gZChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmMoYSk7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2QucHJvcHM9YS5tZW1vaXplZFByb3BzLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChBKXtiKGEsQSl9YnJlYWs7Y2FzZSA1OmMoYSk7YnJlYWs7Y2FzZSA3OmUoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDprJiZnKGEpfX1mdW5jdGlvbiBlKGEpe2Zvcih2YXIgYj1hOzspaWYoZChiKSxudWxsPT09Yi5jaGlsZHx8ayYmND09PWIudGFnKXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8XG5iW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBmKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxmPXZvaWQgMCxnPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9FKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpmPWMuc3RhdGVOb2RlO2c9ITE7YnJlYWsgYTtjYXNlIDM6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyllKGIpLGc/SihmLGIuc3RhdGVOb2RlKTpOKGYsYi5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0PT09Yi50YWc/Zj1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmQoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBoPWEuZ2V0UHVibGljSW5zdGFuY2Usaz1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtrfHwoYT9FKFwiMjM1XCIpOkUoXCIyMzZcIikpO3ZhciBxPWsuY29tbWl0TW91bnQsdj1rLmNvbW1pdFVwZGF0ZSx5PWsucmVzZXRUZXh0Q29udGVudCx1PWsuY29tbWl0VGV4dFVwZGF0ZSx6PWsuYXBwZW5kQ2hpbGQsRz1rLmFwcGVuZENoaWxkVG9Db250YWluZXIsST1rLmluc2VydEJlZm9yZSxMPWsuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsXG5OPWsucmVtb3ZlQ2hpbGQsSj1rLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXt5KGEuc3RhdGVOb2RlKX0sY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoZihiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1FKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RShcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHkoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGYoY1tcInJldHVyblwiXSkpe2M9XG5udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0woYixlLnN0YXRlTm9kZSxjKTpJKGIsZS5zdGF0ZU5vZGUsYyk6ZD9HKGIsZS5zdGF0ZU5vZGUpOnooYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09XG5hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXtnKGEpO2FbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZ2KGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0UoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO3UoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxuYyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpFKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBjPWIuc3RhdGVOb2RlO2lmKGIuZWZmZWN0VGFnJjQpaWYobnVsbD09PWEpYy5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9YS5tZW1vaXplZFByb3BzO2E9YS5tZW1vaXplZFN0YXRlO2MucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Muc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2MuY29tcG9uZW50RGlkVXBkYXRlKGQsYSl9Yj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZLZShiLGMpO2JyZWFrO2Nhc2UgMzpjPWIudXBkYXRlUXVldWU7bnVsbCE9PWMmJktlKGMsbnVsbCE9PWIuY2hpbGQ/Yi5jaGlsZC5zdGF0ZU5vZGU6bnVsbCk7YnJlYWs7Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7bnVsbD09PWEmJmIuZWZmZWN0VGFnJjQmJnEoYyxcbmIudHlwZSxiLm1lbW9pemVkUHJvcHMsYik7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkUoXCIxNjNcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmIoaChjKSk7YnJlYWs7ZGVmYXVsdDpiKGMpfX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiZhKG51bGwpfX19dmFyIGdmPXt9O1xuZnVuY3Rpb24gaGYoYSl7ZnVuY3Rpb24gYihhKXthPT09Z2Y/RShcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGM9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGQ9YS5nZXRSb290SG9zdENvbnRleHQsZT17Y3VycmVudDpnZn0sZj17Y3VycmVudDpnZn0sZz17Y3VycmVudDpnZn07cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoZS5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYihnLmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe1YoZSxhKTtWKGYsYSk7VihnLGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtmLmN1cnJlbnQ9PT1hJiYoVihlLGEpLFYoZixhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7VyhnLGIsYSk7Yj1kKGIpO1coZixhLGEpO1coZSxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGQ9YihnLmN1cnJlbnQpLGg9YihlLmN1cnJlbnQpO1xuZD1jKGgsYS50eXBlLGQpO2ghPT1kJiYoVyhmLGEsYSksVyhlLGQsYSkpfSxyZXNldEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtlLmN1cnJlbnQ9Z2Y7Zy5jdXJyZW50PWdmfX19XG5mdW5jdGlvbiBqZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IFkoNSxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9ZyhiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3k9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0UoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RShcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGc9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGg9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHE9YS5oeWRyYXRlSW5zdGFuY2Usdj1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UseT1udWxsLHU9bnVsbCx6PSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3U9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3k9YTtyZXR1cm4gej0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3U9eT1udWxsO3o9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKHope3ZhciBkPXU7aWYoZCl7aWYoIWMoYSxkKSl7ZD1oKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9Mjt6PSExO3k9YTtyZXR1cm59Yih5LHUpfXk9YTt1PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix6PSExLHk9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9cShhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gdihhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnkpcmV0dXJuITE7aWYoIXopcmV0dXJuIGQoYSksej0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXU7YzspYihhLGMpLGM9aChjKTtkKGEpO3U9eT9oKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBrZihhKXtmdW5jdGlvbiBiKGEpe1FiPWphPSEwO3ZhciBiPWEuc3RhdGVOb2RlO2IuY3VycmVudD09PWE/RShcIjE3N1wiKTp2b2lkIDA7Yi5pc1JlYWR5Rm9yQ29tbWl0PSExO2lkLmN1cnJlbnQ9bnVsbDtpZigxPGEuZWZmZWN0VGFnKWlmKG51bGwhPT1hLmxhc3RFZmZlY3Qpe2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE7dmFyIGM9YS5maXJzdEVmZmVjdH1lbHNlIGM9YTtlbHNlIGM9YS5maXJzdEVmZmVjdDt5ZygpO2Zvcih0PWM7bnVsbCE9PXQ7KXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dDspe3ZhciBmPXQuZWZmZWN0VGFnO2YmMTYmJnpnKHQpO2lmKGYmMTI4KXt2YXIgZz10LmFsdGVybmF0ZTtudWxsIT09ZyYmQWcoZyl9c3dpdGNoKGYmLTI0Mil7Y2FzZSAyOk5lKHQpO3QuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6TmUodCk7dC5lZmZlY3RUYWcmPS0zO09lKHQuYWx0ZXJuYXRlLHQpO2JyZWFrO2Nhc2UgNDpPZSh0LmFsdGVybmF0ZSxcbnQpO2JyZWFrO2Nhc2UgODpTYz0hMCxCZyh0KSxTYz0hMX10PXQubmV4dEVmZmVjdH19Y2F0Y2goVGMpe2Q9ITAsZT1UY31kJiYobnVsbD09PXQ/RShcIjE3OFwiKTp2b2lkIDAsaCh0LGUpLG51bGwhPT10JiYodD10Lm5leHRFZmZlY3QpKX1DZygpO2IuY3VycmVudD1hO2Zvcih0PWM7bnVsbCE9PXQ7KXtjPSExO2Q9dm9pZCAwO3RyeXtmb3IoO251bGwhPT10Oyl7dmFyIGs9dC5lZmZlY3RUYWc7ayYzNiYmRGcodC5hbHRlcm5hdGUsdCk7ayYxMjgmJkVnKHQpO2lmKGsmNjQpc3dpdGNoKGU9dCxmPXZvaWQgMCxudWxsIT09UiYmKGY9Ui5nZXQoZSksUltcImRlbGV0ZVwiXShlKSxudWxsPT1mJiZudWxsIT09ZS5hbHRlcm5hdGUmJihlPWUuYWx0ZXJuYXRlLGY9Ui5nZXQoZSksUltcImRlbGV0ZVwiXShlKSkpLG51bGw9PWY/RShcIjE4NFwiKTp2b2lkIDAsZS50YWcpe2Nhc2UgMjplLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaChmLmVycm9yLHtjb21wb25lbnRTdGFjazpmLmNvbXBvbmVudFN0YWNrfSk7XG5icmVhaztjYXNlIDM6bnVsbD09PWNhJiYoY2E9Zi5lcnJvcik7YnJlYWs7ZGVmYXVsdDpFKFwiMTU3XCIpfXZhciBRYz10Lm5leHRFZmZlY3Q7dC5uZXh0RWZmZWN0PW51bGw7dD1RY319Y2F0Y2goVGMpe2M9ITAsZD1UY31jJiYobnVsbD09PXQ/RShcIjE3OFwiKTp2b2lkIDAsaCh0LGQpLG51bGwhPT10JiYodD10Lm5leHRFZmZlY3QpKX1qYT1RYj0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRGUmJkRlKGEuc3RhdGVOb2RlKTtoYSYmKGhhLmZvckVhY2goRyksaGE9bnVsbCk7bnVsbCE9PWNhJiYoYT1jYSxjYT1udWxsLE9iKGEpKTtiPWIuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHFhPVI9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gYyhhKXtmb3IoOzspe3ZhciBiPUZnKGEuYWx0ZXJuYXRlLGEsSCksYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO3ZhciBlPWE7aWYoMjE0NzQ4MzY0Nz09PUh8fDIxNDc0ODM2NDchPT1lLmV4cGlyYXRpb25UaW1lKXtpZigyIT09ZS50YWcmJjMhPT1cbmUudGFnKXZhciBmPTA7ZWxzZSBmPWUudXBkYXRlUXVldWUsZj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7Zm9yKHZhciBnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPWcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7XG5pZihudWxsIT09YylhPWM7ZWxzZXthLnN0YXRlTm9kZS5pc1JlYWR5Rm9yQ29tbWl0PSEwO2JyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEpe3ZhciBiPXJnKGEuYWx0ZXJuYXRlLGEsSCk7bnVsbD09PWImJihiPWMoYSkpO2lkLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBlKGEpe3ZhciBiPUdnKGEuYWx0ZXJuYXRlLGEsSCk7bnVsbD09PWImJihiPWMoYSkpO2lkLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEpe2lmKG51bGwhPT1SKXtpZighKDA9PT1IfHxIPmEpKWlmKEg8PVVjKWZvcig7bnVsbCE9PUY7KUY9ayhGKT9lKEYpOmQoRik7ZWxzZSBmb3IoO251bGwhPT1GJiYhQSgpOylGPWsoRik/ZShGKTpkKEYpfWVsc2UgaWYoISgwPT09SHx8SD5hKSlpZihIPD1VYylmb3IoO251bGwhPT1GOylGPWQoRik7ZWxzZSBmb3IoO251bGwhPT1GJiYhQSgpOylGPWQoRil9ZnVuY3Rpb24gZyhhLGIpe2phP0UoXCIyNDNcIik6dm9pZCAwO2phPSEwO2EuaXNSZWFkeUZvckNvbW1pdD1cbiExO2lmKGEhPT1yYXx8YiE9PUh8fG51bGw9PT1GKXtmb3IoOy0xPGhlOylnZVtoZV09bnVsbCxoZS0tO2plPUQ7aWUuY3VycmVudD1EO1guY3VycmVudD0hMTt4KCk7cmE9YTtIPWI7Rj1zZShyYS5jdXJyZW50LG51bGwsYil9dmFyIGM9ITEsZD1udWxsO3RyeXtmKGIpfWNhdGNoKFJjKXtjPSEwLGQ9UmN9Zm9yKDtjOyl7aWYoZWIpe2NhPWQ7YnJlYWt9dmFyIGc9RjtpZihudWxsPT09ZyllYj0hMDtlbHNle3ZhciBrPWgoZyxkKTtudWxsPT09az9FKFwiMTgzXCIpOnZvaWQgMDtpZighZWIpe3RyeXtjPWs7ZD1iO2ZvcihrPWM7bnVsbCE9PWc7KXtzd2l0Y2goZy50YWcpe2Nhc2UgMjpuZShnKTticmVhaztjYXNlIDU6cWcoZyk7YnJlYWs7Y2FzZSAzOnAoZyk7YnJlYWs7Y2FzZSA0OnAoZyl9aWYoZz09PWt8fGcuYWx0ZXJuYXRlPT09aylicmVhaztnPWdbXCJyZXR1cm5cIl19Rj1lKGMpO2YoZCl9Y2F0Y2goUmMpe2M9ITA7ZD1SYztjb250aW51ZX1icmVha319fWI9Y2E7ZWI9amE9ITE7Y2E9XG5udWxsO251bGwhPT1iJiZPYihiKTtyZXR1cm4gYS5pc1JlYWR5Rm9yQ29tbWl0P2EuY3VycmVudC5hbHRlcm5hdGU6bnVsbH1mdW5jdGlvbiBoKGEsYil7dmFyIGM9aWQuY3VycmVudD1udWxsLGQ9ITEsZT0hMSxmPW51bGw7aWYoMz09PWEudGFnKWM9YSxxKGEpJiYoZWI9ITApO2Vsc2UgZm9yKHZhciBnPWFbXCJyZXR1cm5cIl07bnVsbCE9PWcmJm51bGw9PT1jOyl7Mj09PWcudGFnP1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaCYmKGQ9ITAsZj1qZChnKSxjPWcsZT0hMCk6Mz09PWcudGFnJiYoYz1nKTtpZihxKGcpKXtpZihTY3x8bnVsbCE9PWhhJiYoaGEuaGFzKGcpfHxudWxsIT09Zy5hbHRlcm5hdGUmJmhhLmhhcyhnLmFsdGVybmF0ZSkpKXJldHVybiBudWxsO2M9bnVsbDtlPSExfWc9Z1tcInJldHVyblwiXX1pZihudWxsIT09Yyl7bnVsbD09PXFhJiYocWE9bmV3IFNldCk7cWEuYWRkKGMpO3ZhciBoPVwiXCI7Zz1hO2Rve2E6c3dpdGNoKGcudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGs9XG5nLl9kZWJ1Z093bmVyLFFjPWcuX2RlYnVnU291cmNlO3ZhciBtPWpkKGcpO3ZhciBuPW51bGw7ayYmKG49amQoaykpO2s9UWM7bT1cIlxcbiAgICBpbiBcIisobXx8XCJVbmtub3duXCIpKyhrP1wiIChhdCBcIitrLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIray5saW5lTnVtYmVyK1wiKVwiOm4/XCIgKGNyZWF0ZWQgYnkgXCIrbitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6bT1cIlwifWgrPW07Zz1nW1wicmV0dXJuXCJdfXdoaWxlKGcpO2c9aDthPWpkKGEpO251bGw9PT1SJiYoUj1uZXcgTWFwKTtiPXtjb21wb25lbnROYW1lOmEsY29tcG9uZW50U3RhY2s6ZyxlcnJvcjpiLGVycm9yQm91bmRhcnk6ZD9jLnN0YXRlTm9kZTpudWxsLGVycm9yQm91bmRhcnlGb3VuZDpkLGVycm9yQm91bmRhcnlOYW1lOmYsd2lsbFJldHJ5OmV9O1Iuc2V0KGMsYik7dHJ5e3ZhciBwPWIuZXJyb3I7cCYmcC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKHApfWNhdGNoKFZjKXtWYyYmXG5WYy5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKFZjKX1RYj8obnVsbD09PWhhJiYoaGE9bmV3IFNldCksaGEuYWRkKGMpKTpHKGMpO3JldHVybiBjfW51bGw9PT1jYSYmKGNhPWIpO3JldHVybiBudWxsfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIG51bGwhPT1SJiYoUi5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmUi5oYXMoYS5hbHRlcm5hdGUpKX1mdW5jdGlvbiBxKGEpe3JldHVybiBudWxsIT09cWEmJihxYS5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmcWEuaGFzKGEuYWx0ZXJuYXRlKSl9ZnVuY3Rpb24gdigpe3JldHVybiAyMCooKChJKCkrMTAwKS8yMHwwKSsxKX1mdW5jdGlvbiB5KGEpe3JldHVybiAwIT09a2E/a2E6amE/UWI/MTpIOiFIZ3x8YS5pbnRlcm5hbENvbnRleHRUYWcmMT92KCk6MX1mdW5jdGlvbiB1KGEsYil7cmV0dXJuIHooYSxiLCExKX1mdW5jdGlvbiB6KGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxcbmEuZXhwaXJhdGlvblRpbWU+YilhLmV4cGlyYXRpb25UaW1lPWI7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5iKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IWphJiZjPT09cmEmJmI8SCYmKEY9cmE9bnVsbCxIPTApO3ZhciBkPWMsZT1iO1JiPklnJiZFKFwiMTg1XCIpO2lmKG51bGw9PT1kLm5leHRTY2hlZHVsZWRSb290KWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZSxudWxsPT09Tz8oc2E9Tz1kLGQubmV4dFNjaGVkdWxlZFJvb3Q9ZCk6KE89Ty5uZXh0U2NoZWR1bGVkUm9vdD1kLE8ubmV4dFNjaGVkdWxlZFJvb3Q9c2EpO2Vsc2V7dmFyIGY9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Znx8ZTxmKWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZX1GYXx8KGxhP1xuU2ImJihtYT1kLG5hPTEsbShtYSxuYSkpOjE9PT1lP3coMSxudWxsKTpMKGUpKTshamEmJmM9PT1yYSYmYjxIJiYoRj1yYT1udWxsLEg9MCl9ZWxzZSBicmVhazthPWFbXCJyZXR1cm5cIl19fWZ1bmN0aW9uIEcoYSl7eihhLDEsITApfWZ1bmN0aW9uIEkoKXtyZXR1cm4gVWM9KChXYygpLVBlKS8xMHwwKSsyfWZ1bmN0aW9uIEwoYSl7aWYoMCE9PVRiKXtpZihhPlRiKXJldHVybjtKZyhYYyl9dmFyIGI9V2MoKS1QZTtUYj1hO1hjPUtnKEose3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIE4oKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Tylmb3IodmFyIGM9TyxkPXNhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1PP0UoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtzYT1PPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1zYSlzYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsXG5PLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PU8pe089YztPLm5leHRTY2hlZHVsZWRSb290PXNhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1PKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9bWE7bnVsbCE9PWMmJmM9PT1iP1JiKys6UmI9MDttYT1iO25hPWF9ZnVuY3Rpb24gSihhKXt3KDAsYSl9ZnVuY3Rpb24gdyhhLGIpe2ZiPWI7Zm9yKE4oKTtudWxsIT09bWEmJjAhPT1uYSYmKDA9PT1hfHxuYTw9YSkmJiFZYzspbShtYSxuYSksTigpO251bGwhPT1mYiYmKFRiPTAsWGM9LTEpOzAhPT1uYSYmTChuYSk7ZmI9bnVsbDtZYz0hMTtSYj0wO2lmKFViKXRocm93IGE9WmMsWmM9XG5udWxsLFViPSExLGE7fWZ1bmN0aW9uIG0oYSxjKXtGYT9FKFwiMjQ1XCIpOnZvaWQgMDtGYT0hMDtpZihjPD1JKCkpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kPyhhLmZpbmlzaGVkV29yaz1udWxsLGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSk6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1nKGEsYyksbnVsbCE9PWQmJihhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/KGEuZmluaXNoZWRXb3JrPW51bGwsYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWcoYSxjKSxudWxsIT09ZCYmKEEoKT9hLmZpbmlzaGVkV29yaz1kOmEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSkpO0ZhPSExfWZ1bmN0aW9uIEEoKXtyZXR1cm4gbnVsbD09PWZifHxmYi50aW1lUmVtYWluaW5nKCk+TGc/ITE6WWM9ITB9ZnVuY3Rpb24gT2IoYSl7bnVsbD09PW1hP0UoXCIyNDZcIik6XG52b2lkIDA7bWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtVYnx8KFViPSEwLFpjPWEpfXZhciByPWhmKGEpLG49amYoYSkscD1yLnBvcEhvc3RDb250YWluZXIscWc9ci5wb3BIb3N0Q29udGV4dCx4PXIucmVzZXRIb3N0Q29udGFpbmVyLE1lPWRmKGEscixuLHUseSkscmc9TWUuYmVnaW5Xb3JrLEdnPU1lLmJlZ2luRmFpbGVkV29yayxGZz1lZihhLHIsbikuY29tcGxldGVXb3JrO3I9ZmYoYSxoKTt2YXIgemc9ci5jb21taXRSZXNldFRleHRDb250ZW50LE5lPXIuY29tbWl0UGxhY2VtZW50LEJnPXIuY29tbWl0RGVsZXRpb24sT2U9ci5jb21taXRXb3JrLERnPXIuY29tbWl0TGlmZUN5Y2xlcyxFZz1yLmNvbW1pdEF0dGFjaFJlZixBZz1yLmNvbW1pdERldGFjaFJlZixXYz1hLm5vdyxLZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxKZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssSGc9YS51c2VTeW5jU2NoZWR1bGluZyx5Zz1hLnByZXBhcmVGb3JDb21taXQsQ2c9YS5yZXNldEFmdGVyQ29tbWl0LFxuUGU9V2MoKSxVYz0yLGthPTAsamE9ITEsRj1udWxsLHJhPW51bGwsSD0wLHQ9bnVsbCxSPW51bGwscWE9bnVsbCxoYT1udWxsLGNhPW51bGwsZWI9ITEsUWI9ITEsU2M9ITEsc2E9bnVsbCxPPW51bGwsVGI9MCxYYz0tMSxGYT0hMSxtYT1udWxsLG5hPTAsWWM9ITEsVWI9ITEsWmM9bnVsbCxmYj1udWxsLGxhPSExLFNiPSExLElnPTFFMyxSYj0wLExnPTE7cmV0dXJue2NvbXB1dGVBc3luY0V4cGlyYXRpb246dixjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOnksc2NoZWR1bGVXb3JrOnUsYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1sYTtsYT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsobGE9Yyl8fEZhfHx3KDEsbnVsbCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe2lmKGxhJiYhU2Ipe1NiPSEwO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7U2I9ITF9fXJldHVybiBhKCl9LGZsdXNoU3luYzpmdW5jdGlvbihhKXt2YXIgYj1sYTtsYT0hMDt0cnl7YTp7dmFyIGM9XG5rYTtrYT0xO3RyeXt2YXIgZD1hKCk7YnJlYWsgYX1maW5hbGx5e2thPWN9ZD12b2lkIDB9cmV0dXJuIGR9ZmluYWxseXtsYT1iLEZhP0UoXCIxODdcIik6dm9pZCAwLHcoMSxudWxsKX19LGRlZmVycmVkVXBkYXRlczpmdW5jdGlvbihhKXt2YXIgYj1rYTtrYT12KCk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtrYT1ifX19fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYihhKXthPW9kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXZhciBjPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1rZihhKTt2YXIgZD1hLmNvbXB1dGVBc3luY0V4cGlyYXRpb24sZT1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsZj1hLnNjaGVkdWxlV29yaztyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFkoMyxudWxsLDApO2E9e2N1cnJlbnQ6Yyxjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxpc1JlYWR5Rm9yQ29tbWl0OiExLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YixuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYy5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLHEpe3ZhciBnPWIuY3VycmVudDtpZihjKXtjPVxuYy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBoO2I6ezI9PT1rZChjKSYmMj09PWMudGFnP3ZvaWQgMDpFKFwiMTcwXCIpO2ZvcihoPWM7MyE9PWgudGFnOyl7aWYobGUoaCkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oaD1oW1wicmV0dXJuXCJdKT92b2lkIDA6RShcIjE3MVwiKX1oPWguc3RhdGVOb2RlLmNvbnRleHR9Yz1sZShjKT9wZShjLGgpOmh9ZWxzZSBjPUQ7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1xO2I9dm9pZCAwPT09Yj9udWxsOmI7cT1udWxsIT1hJiZudWxsIT1hLnR5cGUmJm51bGwhPWEudHlwZS5wcm90b3R5cGUmJiEwPT09YS50eXBlLnByb3RvdHlwZS51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQ/ZCgpOmUoZyk7SGUoZyx7ZXhwaXJhdGlvblRpbWU6cSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5uZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTtmKGcscSl9LGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGMoYS5jaGlsZC5zdGF0ZU5vZGUpO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX0sZmluZEhvc3RJbnN0YW5jZTpiLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9cGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYz1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBDZShCKHt9LFxuYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGIoYSl9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBjP2MoYSk6bnVsbH19KSl9fX12YXIgbWY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpsZn0pLG5mPW1mJiZsZnx8bWYsb2Y9bmZbXCJkZWZhdWx0XCJdP25mW1wiZGVmYXVsdFwiXTpuZjtmdW5jdGlvbiBwZihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOlVlLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fXZhciBxZj1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LHJmPXZvaWQgMDtyZj1xZj9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07XG52YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcbmlmKGwuY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdWY9bnVsbCx2Zj0hMSx3Zj0tMSx4Zj0hMSx5Zj0wLHpmPTMzLEFmPTMzLEJmO0JmPXFmP3tkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT15Zi1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19OntkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT15Zi1EYXRlLm5vdygpO3JldHVybiAwPGE/YTowfX07dmFyIENmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09Q2Ype3ZmPSExO2E9cmYoKTtpZigwPj15Zi1hKWlmKC0xIT09d2YmJndmPD1cbmEpQmYuZGlkVGltZW91dD0hMDtlbHNle3hmfHwoeGY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKERmKSk7cmV0dXJufWVsc2UgQmYuZGlkVGltZW91dD0hMTt3Zj0tMTthPXVmO3VmPW51bGw7bnVsbCE9PWEmJmEoQmYpfX0sITEpO3ZhciBEZj1mdW5jdGlvbihhKXt4Zj0hMTt2YXIgYj1hLXlmK0FmO2I8QWYmJnpmPEFmPyg4PmImJihiPTgpLEFmPWI8emY/emY6Yik6emY9Yjt5Zj1hK0FmO3ZmfHwodmY9ITAsd2luZG93LnBvc3RNZXNzYWdlKENmLFwiKlwiKSl9O3NmPWZ1bmN0aW9uKGEsYil7dWY9YTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKHdmPXJmKCkrYi50aW1lb3V0KTt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybiAwfTt0Zj1mdW5jdGlvbigpe3VmPW51bGw7dmY9ITE7d2Y9LTF9fWVsc2Ugc2Y9d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2ssdGY9d2luZG93LmNhbmNlbElkbGVDYWxsYmFjaztlbHNlIHNmPWZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX19KX0pfSxcbnRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07dmFyIEVmPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxGZj17fSxHZj17fTtcbmZ1bmN0aW9uIEhmKGEpe2lmKEdmLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKEZmLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKEVmLnRlc3QoYSkpcmV0dXJuIEdmW2FdPSEwO0ZmW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPXdhKGIpO2lmKGQmJnZhKGIsYykpe3ZhciBlPWQubXV0YXRpb25NZXRob2Q7ZT9lKGEsYyk6bnVsbD09Y3x8ZC5oYXNCb29sZWFuVmFsdWUmJiFjfHxkLmhhc051bWVyaWNWYWx1ZSYmaXNOYU4oYyl8fGQuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUmJjE+Y3x8ZC5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlJiYhMT09PWM/SmYoYSxiKTpkLm11c3RVc2VQcm9wZXJ0eT9hW2QucHJvcGVydHlOYW1lXT1jOihiPWQuYXR0cmlidXRlTmFtZSwoZT1kLmF0dHJpYnV0ZU5hbWVzcGFjZSk/YS5zZXRBdHRyaWJ1dGVOUyhlLGIsXCJcIitjKTpkLmhhc0Jvb2xlYW5WYWx1ZXx8ZC5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlJiYhMD09PWM/YS5zZXRBdHRyaWJ1dGUoYixcIlwiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpfWVsc2UgS2YoYSxiLHZhKGIsYyk/YzpudWxsKX1cbmZ1bmN0aW9uIEtmKGEsYixjKXtIZihiKSYmKG51bGw9PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPXdhKGIpO2M/KGI9Yy5tdXRhdGlvbk1ldGhvZCk/YihhLHZvaWQgMCk6Yy5tdXN0VXNlUHJvcGVydHk/YVtjLnByb3BlcnR5TmFtZV09Yy5oYXNCb29sZWFuVmFsdWU/ITE6XCJcIjphLnJlbW92ZUF0dHJpYnV0ZShjLmF0dHJpYnV0ZU5hbWUpOmEucmVtb3ZlQXR0cmlidXRlKGIpfVxuZnVuY3Rpb24gTGYoYSxiKXt2YXIgYz1iLnZhbHVlLGQ9Yi5jaGVja2VkO3JldHVybiBCKHt0eXBlOnZvaWQgMCxzdGVwOnZvaWQgMCxtaW46dm9pZCAwLG1heDp2b2lkIDB9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLGNoZWNrZWQ6bnVsbCE9ZD9kOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIE1mKGEsYil7dmFyIGM9Yi5kZWZhdWx0VmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpudWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQsaW5pdGlhbFZhbHVlOm51bGwhPWIudmFsdWU/Yi52YWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fVxuZnVuY3Rpb24gTmYoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZJZihhLFwiY2hlY2tlZFwiLGIpfWZ1bmN0aW9uIE9mKGEsYil7TmYoYSxiKTt2YXIgYz1iLnZhbHVlO2lmKG51bGwhPWMpaWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlKWEudmFsdWU9XCIwXCI7ZWxzZSBpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZihiPXBhcnNlRmxvYXQoYS52YWx1ZSl8fDAsYyE9Ynx8Yz09YiYmYS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBudWxsPT1iLnZhbHVlJiZudWxsIT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1cIlwiK2IuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitiLmRlZmF1bHRWYWx1ZSksbnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gUGYoYSxiKXtzd2l0Y2goYi50eXBlKXtjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7Y2FzZSBcImNvbG9yXCI6Y2FzZSBcImRhdGVcIjpjYXNlIFwiZGF0ZXRpbWVcIjpjYXNlIFwiZGF0ZXRpbWUtbG9jYWxcIjpjYXNlIFwibW9udGhcIjpjYXNlIFwidGltZVwiOmNhc2UgXCJ3ZWVrXCI6YS52YWx1ZT1cIlwiO2EudmFsdWU9YS5kZWZhdWx0VmFsdWU7YnJlYWs7ZGVmYXVsdDphLnZhbHVlPWEudmFsdWV9Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uIFFmKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFJmKGEsYil7YT1CKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9UWYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIFNmKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBUZihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gVWYoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0UoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIEIoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gVmYoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9FKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RShcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gV2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gWGYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIFlmPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIFpmKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gJGYoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1pmKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGFnPXZvaWQgMCxiZz1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1ZZi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXthZz1hZ3x8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTthZy5pbm5lckhUTUw9XCJcXHgzY3N2Z1xceDNlXCIrYitcIlxceDNjL3N2Z1xceDNlXCI7Zm9yKGI9YWcuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gY2coYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBkZz17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxlZz1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoZGcpLmZvckVhY2goZnVuY3Rpb24oYSl7ZWcuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtkZ1tiXT1kZ1thXX0pfSk7XG5mdW5jdGlvbiBmZyhhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxkZy5oYXNPd25Qcm9wZXJ0eShlKSYmZGdbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgZ2c9Qih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIGhnKGEsYixjKXtiJiYoZ2dbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0UoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9FKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkUoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0UoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIGlnKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgamc9WWYuaHRtbCxrZz1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gbGcoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SGQoYSk7Yj1TYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/d2QoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8od2QoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSx3ZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KHljKFwiY2FuY2VsXCIsITApJiZ3ZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KHljKFwiY2xvc2VcIiwhMCkmJndkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6RGQuaGFzT3duUHJvcGVydHkoZSkmJlUoZSxEZFtlXSxhKSxjW2VdPSEwKX19XG52YXIgbWc9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIixcbnRvcFdhaXRpbmc6XCJ3YWl0aW5nXCJ9O2Z1bmN0aW9uIG5nKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PWpnJiYoZD1aZihhKSk7ZD09PWpnP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gcGcoYSxiLGMsZCl7dmFyIGU9aWcoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gbWcpbWcuaGFzT3duUHJvcGVydHkoZikmJlUoZixtZ1tmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlUoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtVKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6TWYoYSxjKTtmPUxmKGEsYyk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtcbmxnKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1SZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpUZihhLGMpO2Y9Qih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWZihhLGMpO2Y9VWYoYSxjKTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31oZyhiLGYsa2cpO3ZhciBnPWYsaDtmb3IoaCBpbiBnKWlmKGcuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBrPWdbaF07XCJzdHlsZVwiPT09aD9mZyhhLGssa2cpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmYmcoYSxrKSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmY2coYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmNnKGEsXG5cIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihSYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZsZyhkLGgpOmU/S2YoYSxoLGspOm51bGwhPWsmJklmKGEsaCxrKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkJjKGEpO1BmKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6QmMoYSk7WGYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9TZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmU2YoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1cbkMpfX1cbmZ1bmN0aW9uIHNnKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1MZihhLGMpO2Q9TGYoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPVJmKGEsYyk7ZD1SZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9Qih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPUIoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPVVmKGEsYyk7ZD1VZihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfWhnKGIsZCxrZyk7dmFyIGcsaDthPW51bGw7Zm9yKGcgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShnKSYmYy5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9Y1tnXSlpZihcInN0eWxlXCI9PT1nKWZvcihoIGluIGI9Y1tnXSxiKWIuaGFzT3duUHJvcGVydHkoaCkmJihhfHwoYT17fSksYVtoXT1cblwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1nJiZcImNoaWxkcmVuXCIhPT1nJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYoUmEuaGFzT3duUHJvcGVydHkoZyk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGcsbnVsbCkpO2ZvcihnIGluIGQpe3ZhciBrPWRbZ107Yj1udWxsIT1jP2NbZ106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoZykmJmshPT1iJiYobnVsbCE9a3x8bnVsbCE9YikpaWYoXCJzdHlsZVwiPT09ZylpZihiKXtmb3IoaCBpbiBiKSFiLmhhc093blByb3BlcnR5KGgpfHxrJiZrLmhhc093blByb3BlcnR5KGgpfHwoYXx8KGE9e30pLGFbaF09XCJcIik7Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiZiW2hdIT09a1toXSYmKGF8fChhPXt9KSxhW2hdPWtbaF0pfWVsc2UgYXx8KGZ8fChmPVtdKSxmLnB1c2goZyxhKSksYT1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1cbmc/KGs9az9rLl9faHRtbDp2b2lkIDAsYj1iP2IuX19odG1sOnZvaWQgMCxudWxsIT1rJiZiIT09ayYmKGY9Znx8W10pLnB1c2goZyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1nP2I9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goZyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmKFJhLmhhc093blByb3BlcnR5KGcpPyhudWxsIT1rJiZsZyhlLGcpLGZ8fGI9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGcsaykpfWEmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixhKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIHRnKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJk5mKGEsZSk7aWcoYyxkKTtkPWlnKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/ZmcoYSxoLGtnKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2JnKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9jZyhhLGgpOmQ/bnVsbCE9aD9LZihhLGcsaCk6YS5yZW1vdmVBdHRyaWJ1dGUoZyk6bnVsbCE9aD9JZihhLGcsaCk6SmYoYSxnKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6T2YoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpXZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP1NmKGEsXG4hIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1NmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpTZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiB1ZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlUoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIG1nKW1nLmhhc093blByb3BlcnR5KGYpJiZVKGYsbWdbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1UoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpVKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VShcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpNZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7bGcoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpUZihhLGMpO1xuVShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtsZyhlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmYoYSxjKSxVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLGxnKGUsXCJvbkNoYW5nZVwiKX1oZyhiLGMsa2cpO2Q9bnVsbDtmb3IodmFyIGcgaW4gYyljLmhhc093blByb3BlcnR5KGcpJiYoZj1jW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6UmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWYmJmxnKGUsZykpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpCYyhhKTtQZihhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkJjKGEpO1hmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiB2ZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgd2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpuZyxjcmVhdGVUZXh0Tm9kZTpvZyxzZXRJbml0aWFsUHJvcGVydGllczpwZyxkaWZmUHJvcGVydGllczpzZyx1cGRhdGVQcm9wZXJ0aWVzOnRnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6dWcsZGlmZkh5ZHJhdGVkVGV4dDp2Zyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpPZihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPXJiKGQpO2U/dm9pZCAwOkUoXCI5MFwiKTtDYyhkKTtPZihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6V2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJlNmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtuYy5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KHdnKTt2YXIgeGc9bnVsbCxNZz1udWxsO2Z1bmN0aW9uIE5nKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIE9nKGEpe2E9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbDtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZXx8IWEuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpfVxudmFyIFo9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTokZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9JGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiAkZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3hnPXRkO3ZhciBhPWRhKCk7aWYoS2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goeil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsaz0wLHE9MCx2PWEseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7diE9PWJ8fDAhPT1kJiYzIT09di5ub2RlVHlwZXx8KGc9ZitkKTt2IT09ZXx8MCE9PWMmJjMhPT12Lm5vZGVUeXBlfHwoaD1mK2MpOzM9PT12Lm5vZGVUeXBlJiYoZis9di5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9di5maXJzdENoaWxkKSlicmVhazt5PXY7dj11fWZvcig7Oyl7aWYodj09PWEpYnJlYWsgYjt5PT09YiYmKytrPT09ZCYmKGc9Zik7eT09PWUmJisrcT09PWMmJihoPWYpO2lmKG51bGwhPT0odT12Lm5leHRTaWJsaW5nKSlicmVhazt2PXk7eT12LnBhcmVudE5vZGV9dj11fWI9LTE9PT1nfHwtMT09PWg/bnVsbDpcbntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtNZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTt1ZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1NZyxiPWRhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmZmEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihLZChjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbRWIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPUpkKGMsYSk7dmFyIGY9SmQoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGc9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtnLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoZyksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGcuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShnKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2lhKGMpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPVxuYS50b3B9TWc9bnVsbDt1ZCh4Zyk7eGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPW5nKGEsYixjLGQpO2FbUV09ZTthW29iXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtwZyhhLGIsYyxkKTthOntzd2l0Y2goYil7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjphPSEhYy5hdXRvRm9jdXM7YnJlYWsgYX1hPSExfXJldHVybiBhfSxwcmVwYXJlVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIHNnKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT1cbnR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0sc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZTpmdW5jdGlvbihhLGIpe3JldHVybiEhYi5oaWRkZW59LGNyZWF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkKXthPW9nKGEsYik7YVtRXT1kO3JldHVybiBhfSxub3c6cmYsbXV0YXRpb246e2NvbW1pdE1vdW50OmZ1bmN0aW9uKGEpe2EuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtvYl09ZTt0ZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe2EudGV4dENvbnRlbnQ9XCJcIn0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsXG5iKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLFxuYil7cmV0dXJuXCJcIj09PWJ8fDMhPT1hLm5vZGVUeXBlP251bGw6YX0sZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOmZ1bmN0aW9uKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW1FdPWY7YVtvYl09YztyZXR1cm4gdWcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtRXT1jO3JldHVybiB2ZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxcbmRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6c2YsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp0Zix1c2VTeW5jU2NoZWR1bGluZzohMH0pO3JjPVouYmF0Y2hlZFVwZGF0ZXM7XG5mdW5jdGlvbiBQZyhhLGIsYyxkLGUpe05nKGMpP3ZvaWQgMDpFKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKVoudXBkYXRlQ29udGFpbmVyKGIsZixhLGUpO2Vsc2V7ZD1kfHxPZyhjKTtpZighZClmb3IoZj12b2lkIDA7Zj1jLmxhc3RDaGlsZDspYy5yZW1vdmVDaGlsZChmKTt2YXIgZz1aLmNyZWF0ZUNvbnRhaW5lcihjLGQpO2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWc7Wi51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7Wi51cGRhdGVDb250YWluZXIoYixnLGEsZSl9KX1yZXR1cm4gWi5nZXRQdWJsaWNSb290SW5zdGFuY2UoZil9ZnVuY3Rpb24gUWcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtOZyhiKT92b2lkIDA6RShcIjIwMFwiKTtyZXR1cm4gcGYoYSxiLG51bGwsYyl9XG5mdW5jdGlvbiBSZyhhLGIpe3RoaXMuX3JlYWN0Um9vdENvbnRhaW5lcj1aLmNyZWF0ZUNvbnRhaW5lcihhLGIpfVJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXtaLnVwZGF0ZUNvbnRhaW5lcihhLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGIpfTtSZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXtaLnVwZGF0ZUNvbnRhaW5lcihudWxsLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGEpfTtcbnZhciBTZz17Y3JlYXRlUG9ydGFsOlFnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFouZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RShcIjE4OFwiKTpFKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUGcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFBnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RShcIjM4XCIpOnZvaWQgMDtyZXR1cm4gUGcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7TmcoYSk/dm9pZCAwOlxuRShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFoudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe1BnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOlFnLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOnRjLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpaLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6Wi5mbHVzaFN5bmMsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOm1iLEV2ZW50UGx1Z2luUmVnaXN0cnk6VmEsRXZlbnRQcm9wYWdhdG9yczpDYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6cWMsUmVhY3RET01Db21wb25lbnRUcmVlOnNiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjp4ZH19O1xuWi5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnBiLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFRnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6U2d9KSxVZz1UZyYmU2d8fFRnO21vZHVsZS5leHBvcnRzPVVnW1wiZGVmYXVsdFwiXT9VZ1tcImRlZmF1bHRcIl06VWc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG4gKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG4gKi9cbnZhciBFdmVudExpc3RlbmVyID0ge1xuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBidWJibGUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGNhcHR1cmU6IGZ1bmN0aW9uIGNhcHR1cmUodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHQoKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9FdmVudExpc3RlbmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9jb250YWluc05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2lzVGV4dE5vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9pc05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuXG5mdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuICAvLyBJRTggY2FuIHRocm93IFwiQ2FuJ3QgbW92ZSBmb2N1cyB0byB0aGUgY29udHJvbCBiZWNhdXNlIGl0IGlzIGludmlzaWJsZSxcbiAgLy8gbm90IGVuYWJsZWQsIG9yIG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IGFjY2VwdCB0aGUgZm9jdXMuXCIgZm9yIGFsbCBraW5kcyBvZlxuICAvLyByZWFzb25zIHRoYXQgYXJlIHRvbyBleHBlbnNpdmUgYW5kIGZyYWdpbGUgdG8gdGVzdC5cbiAgdHJ5IHtcbiAgICBub2RlLmZvY3VzKCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9jdXNOb2RlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9mb2N1c05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoL2RlYm91bmNlJztcblxuaW1wb3J0IGZldGNoVmlkZW9zIGZyb20gJy4vYWN0aW9ucy9mZXRjaC12aWRlb3MnO1xuXG5pbXBvcnQgVmlkZW9EZXRhaWwgZnJvbSAnLi9jb21wb25lbnRzL1ZpZGVvRGV0YWlsJztcbmltcG9ydCBWaWRlb0xpc3QgZnJvbSAnLi9jb21wb25lbnRzL1ZpZGVvTGlzdCc7XG5pbXBvcnQgU2VhcmNoQmFyIGZyb20gJy4vY29tcG9uZW50cy9TZWFyY2hCYXInO1xuXG5pbXBvcnQgeyBBUElfUk9PVF9VUkwsIEFQSV9LRVksIERFRkFVTFRfU0VBUkNIIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2aWRlb3M6IFtdLFxuICAgICAgc2VsZWN0ZWRWaWRlbzogbnVsbCxcbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVWaWRlb1NlbGVjdCA9IHRoaXMuaGFuZGxlVmlkZW9TZWxlY3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVNlYXJjaFRlcm1DaGFuZ2UgPSB0aGlzLmhhbmRsZVNlYXJjaFRlcm1DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnZpZGVvU2VhcmNoID0gZGVib3VuY2UodGhpcy52aWRlb1NlYXJjaC5iaW5kKHRoaXMpLCAzMDApO1xuICAgIHRoaXMudmlkZW9TZWFyY2goREVGQVVMVF9TRUFSQ0gpO1xuICB9XG5cbiAgdmlkZW9TZWFyY2godGVybSkge1xuICAgIHJldHVybiBmZXRjaFZpZGVvcyhBUElfUk9PVF9VUkwsIEFQSV9LRVksIHRlcm0pXG4gICAgICAudGhlbigodmlkZW9zKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHZpZGVvcyxcbiAgICAgICAgICBzZWxlY3RlZFZpZGVvOiB2aWRlb3NbMF0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBoYW5kbGVWaWRlb1NlbGVjdCh2aWRlbykge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFZpZGVvOiB2aWRlbyB9KTtcbiAgfVxuXG4gIGhhbmRsZVNlYXJjaFRlcm1DaGFuZ2UodGVybSkge1xuICAgIHRoaXMudmlkZW9TZWFyY2godGVybSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxTZWFyY2hCYXIgb25TZWFyY2hUZXJtQ2hhbmdlPXt0aGlzLmhhbmRsZVNlYXJjaFRlcm1DaGFuZ2V9IC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgPFZpZGVvRGV0YWlsIHZpZGVvPXt0aGlzLnN0YXRlLnNlbGVjdGVkVmlkZW99IC8+XG4gICAgICAgICAgPFZpZGVvTGlzdFxuICAgICAgICAgICAgb25WaWRlb1NlbGVjdD17dGhpcy5oYW5kbGVWaWRlb1NlbGVjdH1cbiAgICAgICAgICAgIHZpZGVvcz17dGhpcy5zdGF0ZS52aWRlb3N9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9BcHAuanN4IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIG5vdyA9IHJlcXVpcmUoJy4vbm93JyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gvZGVib3VuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc09iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm93O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9ub3cuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gvX3Jvb3QuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gvX2ZyZWVHbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC90b051bWJlci5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc1N5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gvX2Jhc2VHZXRUYWcuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL19TeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gvX2dldFJhd1RhZy5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL19vYmplY3RUb1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc09iamVjdExpa2UuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNvbnN0IGZldGNoVmlkZW9zID0gKHVybCwgYXBpS2V5LCBzZWFyY2hTdHJpbmcgPSAnJykgPT4ge1xuICBpZiAoIXVybCB8fCAhYXBpS2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBhcGkgdXJsIGFuZCBrZXknKTtcbiAgfVxuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBwYXJ0OiAnc25pcHBldCcsXG4gICAga2V5OiBhcGlLZXksXG4gICAgcTogc2VhcmNoU3RyaW5nLFxuICAgIHR5cGU6ICd2aWRlbycsXG4gIH07XG5cbiAgcmV0dXJuIGF4aW9zLmdldCh1cmwsIHsgcGFyYW1zIH0pLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuZGF0YS5pdGVtcyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmZXRjaFZpZGVvcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hY3Rpb25zL2ZldGNoLXZpZGVvcy5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lzLWJ1ZmZlci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9BeGlvcy5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2RlZmF1bHRzLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgYnRvYSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuYnRvYSAmJiB3aW5kb3cuYnRvYS5iaW5kKHdpbmRvdykpIHx8IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idG9hJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGxvYWRFdmVudCA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xuICAgIHZhciB4RG9tYWluID0gZmFsc2U7XG5cbiAgICAvLyBGb3IgSUUgOC85IENPUlMgc3VwcG9ydFxuICAgIC8vIE9ubHkgc3VwcG9ydHMgUE9TVCBhbmQgR0VUIGNhbGxzIGFuZCBkb2Vzbid0IHJldHVybnMgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAgLy8gRE9OJ1QgZG8gdGhpcyBmb3IgdGVzdGluZyBiL2MgWE1MSHR0cFJlcXVlc3QgaXMgbW9ja2VkLCBub3QgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ICYmICEoJ3dpdGhDcmVkZW50aWFscycgaW4gcmVxdWVzdCkgJiZcbiAgICAgICAgIWlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcbiAgICAgIGxvYWRFdmVudCA9ICdvbmxvYWQnO1xuICAgICAgeERvbWFpbiA9IHRydWU7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcygpIHt9O1xuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge307XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdFtsb2FkRXZlbnRdID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0ICYmICF4RG9tYWluKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICAvLyBJRSBzZW5kcyAxMjIzIGluc3RlYWQgb2YgMjA0IChodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzIwMSlcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/ICdObyBDb250ZW50JyA6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9zZXR0bGUuanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9idG9hLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanNcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanNcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzXG4vLyBtb2R1bGUgaWQgPSA1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGlzRW1wdHkgZnJvbSAnbG9kYXNoL2lzRW1wdHknO1xuXG5jb25zdCBWaWRlb0RldGFpbCA9ICh7IHZpZGVvID0ge30gfSkgPT4ge1xuICBpZiAoaXNFbXB0eSh2aWRlbykpIHtcbiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nLi4uPC9kaXY+O1xuICB9XG4gIGNvbnN0IHsgdmlkZW9JZCB9ID0gdmlkZW8uaWQ7XG4gIGNvbnN0IHVybCA9IGBodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8ke3ZpZGVvSWR9YDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW8tZGV0YWlsIGNvbC1tZC04XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImVtYmVkLXJlc3BvbnNpdmUgZW1iZWQtcmVzcG9uc2l2ZS0xNmJ5OVwiPlxuICAgICAgICA8aWZyYW1lIHRpdGxlPVwidmlkZW8tZGV0YWlsLXdpbmRvd1wiIGNsYXNzTmFtZT1cImVtYmVkLXJlc3BvbnNpdmUtaXRlbVwiIHNyYz17dXJsfSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldGFpbHNcIj5cbiAgICAgICAgPGRpdj57dmlkZW8uc25pcHBldC50aXRsZX08L2Rpdj5cbiAgICAgICAgPGRpdj57dmlkZW8uc25pcHBldC5kZXNjcmlwdGlvbn08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuVmlkZW9EZXRhaWwucHJvcFR5cGVzID0ge1xuICB2aWRlbzogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzbmlwcGV0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9KSxcbiAgfSksXG59O1xuXG5WaWRlb0RldGFpbC5kZWZhdWx0UHJvcHMgPSB7XG4gIHZpZGVvOiB7fSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvRGV0YWlsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvVmlkZW9EZXRhaWwuanN4IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb3AtdHlwZXMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2ludmFyaWFudC5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAqXG4gKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAqIHByb3BlcnRpZXMuXG4gKlxuICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRW1wdHkobnVsbCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KHRydWUpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSgxKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgfVxuICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgfVxuICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRW1wdHk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL2lzRW1wdHkuanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fYmFzZUtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL19uYXRpdmVLZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fb3ZlckFyZy5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fZ2V0VGFnLmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fRGF0YVZpZXcuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fZ2V0TmF0aXZlLmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc0Z1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gvX2lzTWFza2VkLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fY29yZUpzRGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fdG9Tb3VyY2UuanNcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fZ2V0VmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL19NYXAuanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL19Qcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fU2V0LmpzXG4vLyBtb2R1bGUgaWQgPSA3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fV2Vha01hcC5qc1xuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc0FyZ3VtZW50cy5qc1xuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL2lzQXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc0FycmF5TGlrZS5qc1xuLy8gbW9kdWxlIGlkID0gODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc0xlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9pc0J1ZmZlci5qc1xuLy8gbW9kdWxlIGlkID0gODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufVxyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL3N0dWJGYWxzZS5qc1xuLy8gbW9kdWxlIGlkID0gODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL2lzVHlwZWRBcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fYmFzZVVuYXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2xvZGFzaC9fbm9kZVV0aWwuanNcbi8vIG1vZHVsZSBpZCA9IDkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgVmlkZW9MaXN0SXRlbSBmcm9tICcuL1ZpZGVvTGlzdEl0ZW0nO1xuXG5jb25zdCBWaWRlb0xpc3QgPSAoeyB2aWRlb3MsIG9uVmlkZW9TZWxlY3QgfSkgPT4ge1xuICBjb25zdCB2aWRlb0l0ZW1zID0gdmlkZW9zLm1hcCh2aWRlbyA9PiAoXG4gICAgPFZpZGVvTGlzdEl0ZW1cbiAgICAgIG9uVmlkZW9TZWxlY3Q9e29uVmlkZW9TZWxlY3R9XG4gICAgICBrZXk9e3ZpZGVvLmV0YWd9XG4gICAgICB2aWRlbz17dmlkZW99XG4gICAgLz5cbiAgKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8dWwgY2xhc3NOYW1lPVwiY29sLW1kLTQgbGlzdC1ncm91cFwiPlxuICAgICAge3ZpZGVvSXRlbXN9XG4gICAgPC91bD5cbiAgKTtcbn07XG5cblZpZGVvTGlzdC5wcm9wVHlwZXMgPSB7XG4gIHZpZGVvczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBldGFnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9KSksXG4gIG9uVmlkZW9TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuVmlkZW9MaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgdmlkZW9zOiBbXSxcbiAgb25WaWRlb1NlbGVjdDogKCkgPT4ge30sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBWaWRlb0xpc3Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9WaWRlb0xpc3QuanN4IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jbGFzcyBWaWRlb0xpc3RJdGVtIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIGNvbnN0IHsgdmlkZW8sIG9uVmlkZW9TZWxlY3QgfSA9IHRoaXMucHJvcHM7XG4gICAgb25WaWRlb1NlbGVjdCh2aWRlbyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB2aWRlbyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBpbWFnZVVybCA9IHZpZGVvLnNuaXBwZXQudGh1bWJuYWlscy5kZWZhdWx0LnVybDtcbiAgICByZXR1cm4gKFxuICAgICAgPGxpIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9IGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLWxpc3QgbWVkaWFcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lZGlhLWxlZnRcIj5cbiAgICAgICAgICAgIDxpbWcgYWx0PVwiXCIgY2xhc3NOYW1lPVwibWVkaWEtb2JqZWN0XCIgc3JjPXtpbWFnZVVybH0gLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVkaWEtYm9keVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZWRpYS1oYWRpbmdcIj57dmlkZW8uc25pcHBldC50aXRsZX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn1cblxuVmlkZW9MaXN0SXRlbS5wcm9wVHlwZXMgPSB7XG4gIHZpZGVvOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHNuaXBwZXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB0aHVtYm5haWxzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIH0pLFxuICB9KS5pc1JlcXVpcmVkLFxuICBvblZpZGVvU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVmlkZW9MaXN0SXRlbTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL1ZpZGVvTGlzdEl0ZW0uanN4IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jbGFzcyBTZWFyY2hCYXIgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLm9uSW5wdXRDaGFuZ2UgPSB0aGlzLm9uSW5wdXRDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGVybTogJycsXG4gICAgfTtcbiAgfVxuXG4gIG9uSW5wdXRDaGFuZ2UoZXZlbnQpIHtcbiAgICBjb25zdCB0ZXJtID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXJtIH0pO1xuICAgIHRoaXMucHJvcHMub25TZWFyY2hUZXJtQ2hhbmdlKHRlcm0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1iYXJcIj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudGVybX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbklucHV0Q2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5TZWFyY2hCYXIucHJvcFR5cGVzID0ge1xuICBvblNlYXJjaFRlcm1DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuU2VhcmNoQmFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25TZWFyY2hUZXJtQ2hhbmdlOiAoKSA9PiB7fSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEJhcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL1NlYXJjaEJhci5qc3giLCJleHBvcnQgY29uc3QgQVBJX1JPT1RfVVJMID0gJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3lvdXR1YmUvdjMvc2VhcmNoJztcbmV4cG9ydCBjb25zdCBBUElfS0VZID0gJ0FJemFTeUEtRmNkbF94N1JwMWV6Mzg0VlFrdXVhU0lVVVh0WVZxUSc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9TRUFSQ0ggPSAndGlueSBob3VzZXMnO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=